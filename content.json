{"meta":{"title":"Anarckk's Blog","subtitle":"","description":"Anarckk's Blog","author":"Anarckk","url":"https://anarckk.github.io/myvolantis","root":"/myvolantis/"},"pages":[{"title":"关于","date":"2023-06-20T03:18:39.549Z","updated":"2023-06-20T03:18:39.549Z","comments":true,"path":"about/index.html","permalink":"https://anarckk.github.io/myvolantis/about/index.html","excerpt":"","text":"人生不如意十有八九，少侠请继续走下去"},{"title":"归档","date":"2023-06-20T03:18:47.499Z","updated":"2023-06-20T03:18:47.499Z","comments":true,"path":"archives/index.html","permalink":"https://anarckk.github.io/myvolantis/archives/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2023-06-20T03:18:52.349Z","updated":"2023-06-20T03:18:52.349Z","comments":true,"path":"categories/index.html","permalink":"https://anarckk.github.io/myvolantis/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-06-20T03:19:13.980Z","updated":"2023-06-20T03:19:13.980Z","comments":true,"path":"tags/index.html","permalink":"https://anarckk.github.io/myvolantis/tags/index.html","excerpt":"","text":""},{"title":"","date":"2023-06-20T03:01:25.305Z","updated":"2023-06-20T03:01:25.305Z","comments":true,"path":"assets/js/jquery.min.js","permalink":"https://anarckk.github.io/myvolantis/assets/js/jquery.min.js","excerpt":"","text":"/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license //@ sourceMappingURL=jquery.min.map */ (function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p=\"2.0.3\",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^(?:\\s*()[^>]*|#([\\w-]*))$/,C=/^(?:|)$/,k=/^-ms-/,N=/-([\\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener(\"DOMContentLoaded\",S,!1),e.removeEventListener(\"load\",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if(\"string\"==typeof e){if(r=\"\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for(\"boolean\"==typeof s&&(l=s,s=arguments[1]||{},a=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger(\"ready\").off(\"ready\")))},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,\"text/xml\")}catch(r){t=undefined}return(!t||t.getElementsByTagName(\"parsererror\").length)&&x.error(\"Invalid XML: \"+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf(\"use strict\")?(t=o.createElement(\"script\"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,\"ms-\").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?\"\":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if(\"number\"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return\"string\"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if(\"object\"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),\"complete\"===o.readyState?setTimeout(x.ready):(o.addEventListener(\"DOMContentLoaded\",S,!1),e.addEventListener(\"load\",S,!1))),n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v=\"sizzle\"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1"},{"title":"","date":"2023-06-20T03:01:25.305Z","updated":"2023-06-20T03:01:25.305Z","comments":true,"path":"assets/js/statistics.js","permalink":"https://anarckk.github.io/myvolantis/assets/js/statistics.js","excerpt":"","text":""}],"posts":[{"title":"学习数据库的方法","slug":"2023-08/学习数据库的方法","date":"2023-08-16T13:42:00.000Z","updated":"2023-08-16T13:46:31.741Z","comments":true,"path":"2023/08/16/2023-08/学习数据库的方法/","link":"","permalink":"https://anarckk.github.io/myvolantis/2023/08/16/2023-08/%E5%AD%A6%E4%B9%A0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"纸上得来终觉浅，觉知此事要躬行","categories":[],"tags":[]},{"title":"制作vscode远程容器开发镜像(支持docker和k8s远程容器开发)","slug":"2023-08/制作vscode远程容器开发镜像","date":"2023-08-15T02:36:13.000Z","updated":"2023-08-15T03:58:28.671Z","comments":true,"path":"2023/08/15/2023-08/制作vscode远程容器开发镜像/","link":"","permalink":"https://anarckk.github.io/myvolantis/2023/08/15/2023-08/%E5%88%B6%E4%BD%9Cvscode%E8%BF%9C%E7%A8%8B%E5%AE%B9%E5%99%A8%E5%BC%80%E5%8F%91%E9%95%9C%E5%83%8F/","excerpt":"","text":"为什么要弄远程容器开发镜像 越来越少的时间在自己家里搞机，总是东走西走，电脑也不一定用自己的，所以，在一个新地方就重新搭环境，不合理。 机器多了，可以折腾 巨硬的vscode太好用了，java，golang, nodejs全部可以在上面开发 远程开发镜像中有什么java开发环境，golang开发环境，nodejs开发环境同时支持docker内嵌docker 准备 搭建一个ng服务，提前缓存好jdk等软件，加速构建过程，局域网dns: ng-dev-dependency.bee.anarckk.me 搭建好verdaccio，这个适合我用，别人不一定需要，局域网dns: verdaccio.bee.anarckk.me 内网弄好dns解析，软路由上配一下就行 制作基础镜像fh-devdockerfile1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253FROM bee.anarckk.me:5000/anarckk/ubuntu:20.04-git2.24.0-docker20.10.19ARG NG_DEV_DEPENDENCY=ng-dev-dependency.bee.anarckk.meENV JAVA_HOME /usr/local/jdk1.8.0_371ENV MAVEN_HOME /usr/local/apache-maven-3.9.3ENV PATH=&quot;$&#123;PATH&#125;:/usr/local/go/bin:/usr/local/node-v18.16.0-linux-x64/bin:$&#123;MAVEN_HOME&#125;/bin:$&#123;JAVA_HOME&#125;/bin:/usr/local/gradle-8.2.1/bin&quot;ENV GOPROXY https://proxy.golang.com.cn # 安装 gradleRUN echo &#x27;install gradle&#x27; \\ &amp;&amp; cd /usr/local \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/gradle/gradle-8.2.1-bin.zip \\ &amp;&amp; unzip gradle-8.2.1-bin.zip \\ &amp;&amp; rm -rf gradle-8.2.1-bin.zip \\ # 安装 maven &amp;&amp; echo &#x27;install maven&#x27; \\ &amp;&amp; cd /usr/local \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/apache-maven-3.9.3-bin.tar.gz \\ &amp;&amp; tar xzf apache-maven-3.9.3-bin.tar.gz \\ &amp;&amp; rm -rf apache-maven-3.9.3-bin.tar.gz \\ # 安装 java8 &amp;&amp; echo &#x27;install java8&#x27; \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/jdk-8u371-linux-x64.tar.gz \\ &amp;&amp; tar zxf jdk-8u371-linux-x64.tar.gz \\ &amp;&amp; rm -rf jdk-8u371-linux-x64.tar.gz \\ # 安装 java17 &amp;&amp; echo &#x27;install java17&#x27; \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/openjdk-17.0.2_linux-x64_bin.tar.gz \\ &amp;&amp; tar zxf openjdk-17.0.2_linux-x64_bin.tar.gz \\ &amp;&amp; rm -rf openjdk-17.0.2_linux-x64_bin.tar.gz \\ # 安装 nodejs &amp;&amp; echo &#x27;install nodejs&#x27; \\ &amp;&amp; cd /usr/local \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/node-v18.16.0-linux-x64.tar.xz \\ &amp;&amp; tar -xvf node-v18.16.0-linux-x64.tar.xz \\ &amp;&amp; rm -rf node-v18.16.0-linux-x64.tar.xz \\ &amp;&amp; echo &#x27;install npm@^9.7.2&#x27; \\ &amp;&amp; npm install -g npm@^9.7.2 \\ &amp;&amp; echo &#x27;install nrm&#x27; \\ &amp;&amp; npm i -g nrm open@8.4.2 --save \\ &amp;&amp; nrm add verdaccio http://verdaccio.bee.anarckk.me/ \\ &amp;&amp; nrm use verdaccio \\ &amp;&amp; echo &#x27;install yarn&#x27; \\ &amp;&amp; npm install -g yarn@^1.22.19 \\ # 安装 golang &amp;&amp; echo &#x27;install golang&#x27; \\ &amp;&amp; cd /usr/local \\ &amp;&amp; curl -L -O http://$&#123;NG_DEV_DEPENDENCY&#125;/go1.20.4.linux-amd64.tar.gz \\ &amp;&amp; rm -rf /usr/local/go \\ &amp;&amp; tar -C /usr/local -xzf go1.20.4.linux-amd64.tar.gz \\ &amp;&amp; rm -rf go1.20.4.linux-amd64.tar.gzVOLUME [ &quot;/root/.vscode-server&quot;, &quot;/root/.m2&quot;, &quot;/root/.ssh&quot;,&quot;/root/go/pkg&quot;, &quot;/root/go/bin&quot;, &quot;/root/.npm&quot; ] 构建命令12docker build -t bee.anarckk.me:5000/anarckk/fh-dev:latest . \\&amp;&amp; docker push bee.anarckk.me:5000/anarckk/fh-dev:latest 已推送到dockerhub上https://hub.docker.com/repository/docker/anarckk/fh-dev 在基础镜像上制作业务镜像dockerfile业务镜像主要在基础镜像上增加自定义maven配置，自定义golang的私有依赖仓库配置 12345678910111213141516FROM bee.anarckk.me:5000/anarckk/fh-dev:latestARG GIT_NAME=michaelARG GIT_EMAIL=michael@gmail.com# mavne的配置文件ARG MVN_SETTINGS=settings.xmlENV GOINSECURE gogs.bee.anarckk.meENV GONOPROXY gogs.bee.anarckk.meENV GONOSUMDB gogs.bee.anarckk.meENV GOPRIVATE gogs.bee.anarckk.meRUN git config --global user.name $GIT_NAME \\ &amp;&amp; git config --global user.email $GIT_EMAIL \\ &amp;&amp; ln -s /usr/bin/python3 /usr/bin/pythonCOPY $&#123;MVN_SETTINGS&#125; /usr/local/apache-maven-3.9.3/conf/settings.xml 构建命令12345docker build --no-cache -t bee.anarckk.me:5000/anarckk/my-dev2:latest \\ --build-arg GIT_NAME=anarckk \\ --build-arg GIT_EMAIL=anarckk@gmail.com \\ --build-arg MVN_SETTINGS=settings.xml . \\&amp;&amp; docker push bee.anarckk.me:5000/anarckk/my-dev2:latest docker-compose.yaml运行脚本12345678910111213141516171819202122232425262728293031version: &quot;3&quot;services: my-dev2: image: bee.anarckk.me:5000/anarckk/my-dev2:latest container_name: my-dev2 restart: unless-stopped networks: custom-bridge: volumes: - /workdir/data2/dev/my-dev/workspace:/workdir/data2/dev/my-dev/workspace - ./vscode-server:/root/.vscode-server - ../common/m2:/root/.m2 - ../common/ssh:/root/.ssh - ../common/pkg:/root/go/pkg - ../common/go-bin:/root/go/bin - ../common/npm-cache:/root/.npm - /var/run/docker.sock:/var/run/docker.sock - /etc/localtime:/etc/localtime:ro - /etc/timezone:/etc/timezone:ro environment: - TZ=Asia/Shanghai logging: options: max-size: &quot;10m&quot; stdin_open: true privileged: true user: &quot;root&quot;networks: custom-bridge: external: true 同时，这个镜像那个可以k8s远程容器开发这个技术学会的太晚了，早一年学会这个技术，就不用telepresence折腾的麻烦，远程到容器中开发，对于调试k8s二开的应用来说，方便的很。 k8s1-dev.yaml 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697apiVersion: v1kind: Namespacemetadata: name: k8s1-dev-nsspec: finalizers: - kubernetes---apiVersion: v1kind: ServiceAccountmetadata: labels: k8s-app: k8s1-dev name: k8s1-dev namespace: k8s1-dev-ns---apiVersion: v1kind: Podmetadata: name: k8s1-dev namespace: k8s1-dev-ns labels: app: k8s1-devspec: containers: - name: k8s1-dev image: bee.anarckk.me:5000/anarckk/my-dev2:latest stdin: true tty: true volumeMounts: - mountPath: /workdir/data1/k8s1-dev/workspace name: workspace - mountPath: /root/.vscode-server name: vscode-server - mountPath: /root/go/pkg name: go-pkg - mountPath: /root/go/bin name: go-bin - mountPath: /root/.ssh name: ssh - mountPath: /root/.kube name: kube resources: limits: cpu: &#x27;2&#x27; memory: 3Gi requests: cpu: 500m memory: 500Mi nodeName: k8s1 volumes: - name: workspace hostPath: path: /workdir/data1/k8s1-dev/workspace type: DirectoryOrCreate - name: vscode-server hostPath: path: /workdir/data1/k8s1-dev/common/vscode-server type: DirectoryOrCreate - name: go-pkg hostPath: path: /workdir/data1/k8s1-dev/common/go-pkg type: DirectoryOrCreate - name: go-bin hostPath: path: /workdir/data1/k8s1-dev/common/go-bin type: DirectoryOrCreate - name: ssh hostPath: path: /workdir/data1/k8s1-dev/common/ssh type: DirectoryOrCreate - name: kube hostPath: path: /workdir/data1/k8s1-dev/common/.kube type: Directory #- name: docker # hostPath: # path: /var/lib/docker serviceAccountName: k8s1-dev---apiVersion: rbac.authorization.k8s.io/v1kind: ClusterRoleBindingmetadata: name: k8s1-dev-adminroleRef: apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-adminsubjects:- kind: ServiceAccount name: k8s1-dev namespace: k8s1-dev-ns 运行这个脚本 1kubectl create -f k8s1-dev.yaml","categories":[],"tags":[]},{"title":"重新恢复搭建hexo的过程","slug":"2023-6/搭建hexo的过程","date":"2023-06-20T01:21:54.000Z","updated":"2023-06-20T09:09:51.787Z","comments":true,"path":"2023/06/20/2023-6/搭建hexo的过程/","link":"","permalink":"https://anarckk.github.io/myvolantis/2023/06/20/2023-6/%E6%90%AD%E5%BB%BAhexo%E7%9A%84%E8%BF%87%E7%A8%8B/","excerpt":"","text":"前言以前hexo像是在玩一样，只是随便弄一弄。自从私有云服务器没了，就再没搞过hexo博客. 但是现在发现 material-x 已经变成了 volantis 升级更新的很好，所以这次想放到github page上做永久发布。 知乎 - hexo-butterfly主题-giscus评论系统设置知乎 - 【hexo】基础教程-四-新增RSS订阅 giscus 增加rss订阅运行：npm install --save hexo-generator-feed 然后修改文件 _config.yml 12345678# Extensionsplugins: hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 20 然后就可以了，npm run build完了之后，就可以用了。 参考: 知乎 - 【hexo】基础教程-四-新增RSS订阅 开启搜索服务12345678############################### Search ############################### &gt; start# To use hexo search, you need to install the following plugins:# npm i hexo-generator-json-contentsearch: enable: true service: hexo # hexo js:############################### Search ############################### &gt; end 根据这个配置来，在 _config.volantis.yml ，先执行命令，再放一下这个配置，就OK了 配置giscus评论系统_config.volantis.yml 12345678910111213141516171819202122#############################################################################################comments: service: giscus # giscus # https://giscus.app # https://github.com/laymonage/giscus giscus: # 以下配置按照 yml 格式增删填写即可 repo: anarckk/giscus repo-id: R_kgDOJxkH0w category: Announcements category-id: DIC_kwDOJxkH084CXU85 mapping: &quot;url&quot; reactions-enabled: &quot;1&quot; emit-metadata: &quot;0&quot; lang: &quot;zh-CN&quot; # 以上配置按照 yml 格式增删填写即可 theme: light: &quot;light&quot; # https://gcore.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/light.css dark: &quot;dark&quot; # https://gcore.jsdelivr.net/gh/volantis-x/cdn-volantis@master/css/giscus/dark.css############################################################################################# 参考： 知乎 - hexo-butterfly主题-giscus评论系统设置 giscus 增加用户配置参考资料：https://volantis.js.org/v5/advanced-settings/?keyword=author 增加文件 source&#x2F;_data&#x2F;author.yml 1234Anarckk: name: Anarckk avatar: https://cn.bing.com/th?id=AMMS_fc8f99fd41ebd737a71c4e13806db9a0&amp;w=110&amp;h=110&amp;c=7&amp;rs=1&amp;qlt=80&amp;pcl=f9f9f9&amp;cdv=1&amp;dpr=2&amp;pid=16.1 url:","categories":[],"tags":[],"author":"Anarckk"},{"title":"解决excel文件下载乱码问题","slug":"2020-1/15-解决excel文件下载乱码问题","date":"2020-01-15T08:38:39.000Z","updated":"2023-06-20T07:44:54.795Z","comments":true,"path":"2020/01/15/2020-1/15-解决excel文件下载乱码问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/15/2020-1/15-%E8%A7%A3%E5%86%B3excel%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"今天遇到一个excel下载乱码问题，从服务器上使用流下载方式，用jquery.ajax下载之后，再转成blob使用虚拟节点下载客户端。然后一直乱码。找了很多方法，包括服务器指定 response.setCharacterEncoding(“utf-8”); 客户端再使用 charset&#x3D;utf-8 指定编码。再或者从 ms-excel 到修改为 octet-stream ，各种组合都无效。烦了一下午。终于找到了一篇博客 jQuery的ajax下载blob文件 ，很显然这篇博客被抄来抄去。也就不转载了，自己搜吧以后。这篇博客提供了一个思路，ajax在底层自动将数据转型为字符串，而且编码不被控制。这也就是为什么我自己制定编码都无效的原因，因为我没有指定ajax底层的编码方式。","text":"今天遇到一个excel下载乱码问题，从服务器上使用流下载方式，用jquery.ajax下载之后，再转成blob使用虚拟节点下载客户端。然后一直乱码。找了很多方法，包括服务器指定 response.setCharacterEncoding(“utf-8”); 客户端再使用 charset&#x3D;utf-8 指定编码。再或者从 ms-excel 到修改为 octet-stream ，各种组合都无效。烦了一下午。终于找到了一篇博客 jQuery的ajax下载blob文件 ，很显然这篇博客被抄来抄去。也就不转载了，自己搜吧以后。这篇博客提供了一个思路，ajax在底层自动将数据转型为字符串，而且编码不被控制。这也就是为什么我自己制定编码都无效的原因，因为我没有指定ajax底层的编码方式。 旧代码 1234567891011121314151617181920212223$.ajax(&#123; type: method, data: JSON.stringify(data), url: &quot;http://localhost:8096&quot; + url, headers: &#123; &#x27;Content-Type&#x27;: &#x27;application/json&#x27; &#125;&#125;).done(function (data, status, jqXHR) &#123; console.log(data instanceof Blob); var reader = new FileReader(); reader.readAsText(new Blob([data]), &#x27;utf-8&#x27;); reader.onload = function (evt) &#123; console.log(evt); const url = window.URL.createObjectURL(new Blob([&#x27;\\uFEFF&#x27; + evt.target.result], &#123;type: &#x27;application/ms-excel;charset=utf-8&#x27;&#125;)); const link = document.createElement(&#x27;a&#x27;); link.href = url; link.setAttribute(&#x27;download&#x27;, &#x27;名片印刷导出.xls&#x27;); document.body.appendChild(link); link.click(); URL.revokeObjectURL(link.href); document.body.removeChild(link); &#125;;&#125;); 本着这个思路，就用 XMLHttpRequest 替代掉了 ajax ，没想到马上就解决了。真的是坑 有效的代码 123456789101112131415161718192021222324252627282930313233var url = &quot;/businessCard/excelBusinessCard&quot;;var method = &quot;POST&quot;;var data = &#123; &quot;applicantId&quot;: getUserId(), &quot;pageNo&quot;: 1, &quot;pageSize&quot;: 10000&#125;;data.token = getToken();var xhr = new XMLHttpRequest();xhr.open(&#x27;POST&#x27;, &quot;http://localhost:8096&quot; + url, true); // 也可以使用POST方式，根据接口xhr.setRequestHeader(&quot;Content-Type&quot;, &#x27;application/json&#x27;);xhr.responseType = &quot;blob&quot;; // 返回类型blob// 定义请求完成的处理函数，请求前也可以增加加载框/禁用下载按钮逻辑xhr.onload = function () &#123; // 请求完成 if (this.status === 200) &#123; // 返回200 var blob = this.response; var reader = new FileReader(); reader.readAsDataURL(blob); // 转换为base64，可以直接放入a表情href reader.onload = function (e) &#123; // 转换完成，创建一个a标签用于下载 var a = document.createElement(&#x27;a&#x27;); a.download = &#x27;data.xls&#x27;; a.href = e.target.result; $(&quot;body&quot;).append(a); // 修复firefox中无法触发click a.click(); $(a).remove(); &#125; &#125;&#125;;// 发送ajax请求xhr.send(JSON.stringify(data));","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"excel","slug":"excel","permalink":"https://anarckk.github.io/myvolantis/tags/excel/"}]},{"title":"Character类检查码点一个char放不放的下","slug":"2020-1/10-Character类检查码点一个char放不放的下","date":"2020-01-10T01:02:26.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/10/2020-1/10-Character类检查码点一个char放不放的下/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/10/2020-1/10-Character%E7%B1%BB%E6%A3%80%E6%9F%A5%E7%A0%81%E7%82%B9%E4%B8%80%E4%B8%AAchar%E6%94%BE%E4%B8%8D%E6%94%BE%E7%9A%84%E4%B8%8B/","excerpt":"","text":"在java中，一个char是2个字节，用utf-16进行编码。一个字符可以转为数字，我猜称为码点(codePoint)。Character里有个方法可以检查，一个码点要用几个char来放。 12345678/** * 如果一个字符用utf-8编码，那么它就有3个字节。 * 这个函数检查，2个字节能不能放的下codePoint码点的字符 * 放的下返回1，放不下返回2 */public static int charCount(int codePoint) &#123; return codePoint &gt;= MIN_SUPPLEMENTARY_CODE_POINT ? 2 : 1;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"}]},{"title":"java 依赖、组合、聚合与继承","slug":"2020-1/09-java-依赖、组合、聚合与继承","date":"2020-01-09T05:20:36.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/09/2020-1/09-java-依赖、组合、聚合与继承/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/09/2020-1/09-java-%E4%BE%9D%E8%B5%96%E3%80%81%E7%BB%84%E5%90%88%E3%80%81%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/","excerpt":"","text":"类之间的关系大体上存在五种—继承(实现)、依赖、关联、聚合、组合。 继承继承是一种“is-a”关系。多了就不说了，都懂得。 依赖依赖简单的理解，就是一个类A中的方法使用到了另一个类B。 这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A。 比如说，我用笔写字，首先需要一个类来代表我自己，然后需要一个类来代表一支笔，最后，‘我’要调用‘笔’里的方法来写字，用代码实现一下： 1234567891011public class Pen &#123; public void write()&#123; System.out.println(&quot;use pen to write&quot;); &#125;&#125; public class Me &#123; public void write(Pen pen)&#123;//这里，pen作为Me类方法的参数。 Me类依赖Pen类 pen.write(); &#125;&#125; 看到这大家都懂了，因为这种代码你每天都会写。现在你知道了，这就是一种类与类之间的关系，叫做依赖。 这种关系是一种很弱的关系，但是pen类的改变，有可能会影响到Me类的结果，比如我把pen类write方法的方法体改了，me中再调用就会得到不同的结果。 一般而言，依赖关系在Java中体现为局域变量、方法的形参，或者对静态方法的调用。 关联关联体现的是两个类、或者类与接口之间语义级别的一种强依赖关系。 这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的。 123456789101112// pen 还是上面的penpublic class You &#123; private Pen pen; // 让pen成为you的类属性 public You(Pen p)&#123; this.pen = p; &#125; public void write()&#123; pen.write(); &#125;&#125; 被关联类B以类属性的形式出现在关联类A中，或者关联类A引用了一个类型为被关联类B的全局变量的这种关系，就叫关联关系。 在Java中，关联关系一般使用成员变量来实现。 聚合聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系 看下面一段代码： 12345public class Family &#123; private List&lt;Child&gt; children; //一个家庭里有许多孩子 // ...&#125; 在代码层面，聚合和关联关系是一致的，只能从语义级别来区分。普通的关联关系中，a类和b类没有必然的联系，而聚合中，需要b类是a类的一部分，是一种”has-a“的关系，即 a has-a b; 比如家庭有孩子，屋子里有空调。 但是，has 不是 must has，a可以有b，也可以没有。a是整体，b是部分，整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。 不同于关联关系的平等地位，聚合关系中两个类的地位是不平等。 组合组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。 123456public class Person &#123; private Eye eye = new Eye(); //一个人有鼻子有眼睛 private Nose nose = new Nose(); // .... &#125; 组合同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。 就像你有鼻子有眼睛，如果你一不小心结束了生命周期，鼻子和眼睛的生命周期也会结束，而且，鼻子和眼睛不能脱离你单独存在。 只看代码，你是无法区分关联，聚合和组合的，具体是哪一种关系，只能从语义级别来区分。 同样，组合关系中，两个类关系也是不平等的。 组合，聚合和继承依赖关系是每一个java程序都离不开的，所以就不单独讨论了，普通的关联关系也没有什么特殊的地方，下面我们重点研究一下组合，聚合和继承。 聚合与组合聚合与组合都是一种关联关系，只是额外具有整体-部分的意义。 部件的生命周期不同 聚合关系中，整件不会拥有部件的生命周期，所以整件删除时，部件不会被删除。再者，多个整件可以共享同一个部件。 组合关系中，整件拥有部件的生命周期，所以整件删除时，部件一定会跟着删除。而且，多个整件不可以同时间共享同一个部件。 这个区别可以用来区分某个关联关系到底是组合还是聚合。两个类生命周期不同步，则是聚合关系，生命周期同步就是组合关系。 聚合关系是【has-a】关系，组合关系是【contains-a】关系 平时我们只讨论组合和继承的时候，认为组合是【has-a 】关系，而事实上，聚合才是真正的【has-a】关系，组合是更深层次的【contains-a】关系。 由于【contains-a】关系是一种更深的【has-a】关系，所以说组合是【has-a】关系也是正确的。 组合和继承这个才是本文的重点。 学过设计模式的都知道，要“少用继承，多用组合”，这究竟是为什么呢？ 我们先来看一下组合和继承各自的优缺点： 组合 优点： 不破坏封装，整体类与局部类之间松耦合，彼此相对独立 具有较好的可扩展性 支持动态组合。在运行时，整体对象可以选择不同类型的局部对象 整体类可以对局部类进行包装，封装局部类的接口，提供新的接口 缺点： 整体类不能自动获得和局部类同样的接口 创建整体类的对象时，需要创建所有局部类的对象 继承 优点: 子类能自动继承父类的接口 创建子类的对象时，无须创建父类的对象 缺点： 破坏封装，子类与父类之间紧密耦合，子类依赖于父类的实现，子类缺乏独立性 支持扩展，但是往往以增加系统结构的复杂度为代价 不支持动态继承。在运行时，子类无法选择不同的父类 子类不能改变父类的接口 (后面罗里吧嗦的，不记了) 参考来源https://www.cnblogs.com/ccgjava/p/11433745.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"}]},{"title":"shiro的组件架构","slug":"归档/shiro/2020-01-09-shiro的组件架构","date":"2020-01-09T03:29:50.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2020/01/09/归档/shiro/2020-01-09-shiro的组件架构/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/09/%E5%BD%92%E6%A1%A3/shiro/2020-01-09-shiro%E7%9A%84%E7%BB%84%E4%BB%B6%E6%9E%B6%E6%9E%84/","excerpt":"","text":"Shiro主要组件包括：Subject，SecurityManager，Authenticator，Authorizer，SessionManager，CacheManager，Cryptography，Realms。 SubjectSubject表示与系统交互的对象，可以是登录系统的操作用户，也可能是另外一个软件系统。Subject类图： SecurityManagerSecurityManager是Shiro架构最核心的组件。实际上，SecurityManager就是Shiro框架的控制器，协调其他组件一起完成认证和授权，如下图所示：","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"在hexo中使用PlantUML来画UML","slug":"2020-1/09-在hexo中使用PlantUML来画UML","date":"2020-01-09T03:20:28.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/09/2020-1/09-在hexo中使用PlantUML来画UML/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/09/2020-1/09-%E5%9C%A8hexo%E4%B8%AD%E4%BD%BF%E7%94%A8PlantUML%E6%9D%A5%E7%94%BBUML/","excerpt":"","text":"PlantUML使你轻松地从文字描述来生成UML，可谓UML中的MarkDown，支持时序图、用例图、类图、活动图、组件图、状态图、对象图、部署图等UML以及非UML图。在hexo中可以使用hexo-tag-plantuml插件来集成进来。这种方式画UML不仅快速和可控，还给后期维护带来了便捷性。 java包 它可以用java直接使用，下载jar包：plantuml.jar。 描述文件demo.txt: 12345678@startumlstart:配置Java环境; :下载pantuml.jar;:编写描述文件; :执行; stop@enduml 执行Jar script1java -jar plantuml.jar demo.txt hexo plantuml插件安装插件 script1npm install hexo-tag-plantuml --save 语法 123&#123;% plantuml %&#125; Bob-&gt;Alice : hello&#123;% endplantuml %&#125; 示例 12345678&#123;% plantuml %&#125;start:配置Java环境; :下载pantuml.jar;:编写描述文件; :执行; stop&#123;% endplantuml %&#125; 效果如下： 画图方法12345678继承（泛化） --|&gt;接口继承 ..|&gt;接口实现 ..|&gt;依赖 ..&gt;关联 -直接关联 --&gt;聚合 o--组合 *-- 这篇教程已经写的很清楚了。如果以后没有不能用，就不会写它。https://plantuml.com/zh/class-diagram 还有这张图可以参考 参考来源PlantUml画类图 https://www.jianshu.com/p/b65e8dca999dhttp://www.zhaiqianfeng.com/2017/05/hexo-plantuml.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"uml","slug":"uml","permalink":"https://anarckk.github.io/myvolantis/tags/uml/"}]},{"title":"String.trim()","slug":"2020-1/09-String-trim","date":"2020-01-09T00:52:36.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/09/2020-1/09-String-trim/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/09/2020-1/09-String-trim/","excerpt":"","text":"函数签名 public String trim(); 注释 Returns a string whose value is this string, with any leading and trailing whitespace removed.返回一个字符串它的值是它自身，移除前导和后缀空白字符","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"},{"name":"java api","slug":"java-api","permalink":"https://anarckk.github.io/myvolantis/tags/java-api/"}]},{"title":"给类制作标准文档","slug":"2020-1/09-给类制作标准文档","date":"2020-01-09T00:36:05.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/09/2020-1/09-给类制作标准文档/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/09/2020-1/09-%E7%BB%99%E7%B1%BB%E5%88%B6%E4%BD%9C%E6%A0%87%E5%87%86%E6%96%87%E6%A1%A3/","excerpt":"","text":"现在发现，java学习更多是api接口学习。所以要学会把懂的接口写成文档。一个类，所在包，内部公开的api,api调用示例，讲解。这些都要有个标准。就这么定吧：只记录自己见到用到的api的用法，以及源码的英文翻译。和自己的见解。不做全面细致的api翻译，不去全面搞懂所有的api。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"}]},{"title":"shiro认证过程","slug":"归档/shiro/2020-01-08-shiro认证过程","date":"2020-01-08T08:58:09.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2020/01/08/归档/shiro/2020-01-08-shiro认证过程/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/08/%E5%BD%92%E6%A1%A3/shiro/2020-01-08-shiro%E8%AE%A4%E8%AF%81%E8%BF%87%E7%A8%8B/","excerpt":"","text":"1234567891011121314Subject currentUser = SecurityUtils.getSubject();UsernamePasswordToken token = new UsernamePasswordToken(username, password);token.setRememberMe(true);try &#123; currentUser.login(token);&#125; catch (UnknownAccountException e) &#123; logger.error(String.format(&quot;user not found: %s&quot;, username), e); // 用户不存在&#125; catch (IncorrectCredentialsException e) &#123; logger.error(String.format(&quot;incorrent credentials: %s&quot;, username), e); // 密码不正确&#125; catch (ConcurrentAccessException e) &#123; logger.error(String.format(&quot;user has been authenticated: %s&quot;, username), e); // 用户重复登录&#125; catch (AccountException e) &#123; logger.error(String.format(&quot;account except: %s&quot;, username), e); // 其他账户异常&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"springboot访问命令行参数","slug":"2020-1/08-springboot访问命令行参数","date":"2020-01-08T01:52:06.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/08/2020-1/08-springboot访问命令行参数/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/08/2020-1/08-springboot%E8%AE%BF%E9%97%AE%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/","excerpt":"","text":"默认情况下，SpringApplication 将所有命令行选项参数（即以 – 开头的参数，比如 –server.port&#x3D;9000）转换为属性，并将它们添加到 Spring Environment 中。如之前所述，命令行属性始终优先于其他属性源。 如果您不希望将命令行属性添加到 Environment，可以使用 SpringApplication.setAddCommandLineProperties(false) 来禁用它们。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"mybatis按时间段搜索","slug":"2020-1/07-mybatis按时间段搜索","date":"2020-01-07T01:37:33.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/07/2020-1/07-mybatis按时间段搜索/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/07/2020-1/07-mybatis%E6%8C%89%E6%97%B6%E9%97%B4%E6%AE%B5%E6%90%9C%E7%B4%A2/","excerpt":"","text":"mysql1SELECT * FROM vacate WHERE create_time BETWEEN &#x27;2020-1-1 00:00:00&#x27; AND &#x27;2020-1-7 09:18:00&#x27;; mybatis mapper 12345678910&lt;if test=&quot;submitFrom != null and submitTo != null&quot;&gt; and create_time between #&#123;submitFrom&#125; and #&#123;submitTo&#125;&lt;/if&gt;&lt;!--或者如下--&gt;&lt;if test=&quot;startTime != null&quot;&gt; AND create_time &amp;gt;= #&#123;startTime,jdbcType=TIMESTAMP&#125;&lt;/if&gt;&lt;if test=&quot;endTime != null&quot;&gt; AND create_time &amp;lt;= #&#123;endTime,jdbcType=TIMESTAMP&#125;&lt;/if&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"MySQL 使用 ON UPDATE CURRENT_TIMESTAMP 自动更新 timestamp","slug":"2020-1/06-MySQL-使用-ON-UPDATE-CURRENT-TIMESTAMP-自动更新-timestamp","date":"2020-01-06T04:59:53.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/06/2020-1/06-MySQL-使用-ON-UPDATE-CURRENT-TIMESTAMP-自动更新-timestamp/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/06/2020-1/06-MySQL-%E4%BD%BF%E7%94%A8-ON-UPDATE-CURRENT-TIMESTAMP-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0-timestamp/","excerpt":"","text":"12`create_time` timestamp not null default current_timestamp comment &#x27;创建时间&#x27;,`update_time` timestamp not null default current_timestamp on update current_timestamp comment &#x27;修改时间&#x27;, 当执行update操作是，并且字段有ON UPDATE CURRENT_TIMESTAMP属性。则字段无论值有没有变化，它的值也会跟着更新为当前UPDATE操作时的时间。 timestamp的两个属性：CURRENT_TIMESTAMP 和ON UPDATE CURRENT_TIMESTAMP CURRENT_TIMESTAMP 当要向数据库执行insert操作时，如果有个timestamp字段属性设为 CURRENT_TIMESTAMP，则无论这个字段有没有set值都插入当前系统时间 ON UPDATE CURRENT_TIMESTAMP当执行update操作是，并且字段有ON UPDATE CURRENT_TIMESTAMP属性。则字段无论值有没有变化，它的值也会跟着更新为当前UPDATE操作时的时间。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"永久激活idea2019.3","slug":"2020-1/04-永久激活idea2019-3","date":"2020-01-04T07:17:47.000Z","updated":"2023-06-20T09:15:19.127Z","comments":true,"path":"2020/01/04/2020-1/04-永久激活idea2019-3/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/04/2020-1/04-%E6%B0%B8%E4%B9%85%E6%BF%80%E6%B4%BBidea2019-3/","excerpt":"","text":"今天突然idea不能用了，激活码无法有效激活了。看了下，原来的激活码是用在idea2019.2.3的,我升级了idea的版本到2019.3了。所以激活码不能用应该很正常。重新找了个激活的方法，以下是步骤： 下载jetbrains-agent.jarjetbrains-agent.jar 移动jetbrains-agent.jar到安装目录 将文件移动到 C:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\bin 路径下，这是我idea的安装目录。 修改idea64.exe.vmoptions启动配置 本来按照网上的文章，修改 C:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\bin\\idea64.exe.vmoptions 文件就好，但是我修改了不生效，想起来之前一次有用到idea修改内存大小配置的，配置在这里一样不生效，狡兔三窟的配置文件竟然配置在 C:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\bin\\idea.bat,里面有一段配置是这么写的: 1234IF NOT EXIST &quot;%VM_OPTIONS_FILE%&quot; ( :: user-overridden SET VM_OPTIONS_FILE=%USERPROFILE%\\.IntelliJIdea2019.3\\config\\idea%BITS%.exe.vmoptions) 所以，实际的配置文件目录在 C:\\Users&lt;!–swig￼3–&gt;.IntelliJIdea2019.3\\config\\idea64.exe.vmoptions。在末尾添加 -javaagent:破解补丁所在的目录 1-javaagent:D:\\IntelliJ IDEA 2019.2.3\\bin\\jetbrains-agent.jar 修改hosts文件C:\\Windows\\System32\\drivers\\etc\\hosts，在末尾补上 123#idea用0.0.0.0 account.jetbrains.com0.0.0.0 www.jetbrains.com 激活idea点击Help→Register，选择License Server激活，输入 http://jetbrains-license-server ,然后点击Activate，我这张图已经激活完了，激活的时候好像还有个continue按钮。注意不要点exit。 img { border-radius: 0 !important; }","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"},{"name":"idea激活","slug":"idea激活","permalink":"https://anarckk.github.io/myvolantis/tags/idea%E6%BF%80%E6%B4%BB/"}]},{"title":"visio中用手型工具拖动设计界面","slug":"2020-1/02-visio中用手型工具拖动设计界面","date":"2020-01-02T13:50:23.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2020/01/02/2020-1/02-visio中用手型工具拖动设计界面/","link":"","permalink":"https://anarckk.github.io/myvolantis/2020/01/02/2020-1/02-visio%E4%B8%AD%E7%94%A8%E6%89%8B%E5%9E%8B%E5%B7%A5%E5%85%B7%E6%8B%96%E5%8A%A8%E8%AE%BE%E8%AE%A1%E7%95%8C%E9%9D%A2/","excerpt":"","text":"Ctrl + Alt + 左键放大 &#x2F; 右键拖动","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"visio","slug":"visio","permalink":"https://anarckk.github.io/myvolantis/tags/visio/"}]},{"title":"接口的传统风格转向RestFul风格","slug":"归档/restful/2019-12-31-接口的传统风格转向RestFul风格","date":"2019-12-31T04:04:29.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/31/归档/restful/2019-12-31-接口的传统风格转向RestFul风格/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/31/%E5%BD%92%E6%A1%A3/restful/2019-12-31-%E6%8E%A5%E5%8F%A3%E7%9A%84%E4%BC%A0%E7%BB%9F%E9%A3%8E%E6%A0%BC%E8%BD%AC%E5%90%91RestFul%E9%A3%8E%E6%A0%BC/","excerpt":"","text":"想到以前的点赞接口，如果用restful改，应该改成 &#x2F;topic&#x2F;{topicId}&#x2F;my&#x2F;zan&#x2F;{status} 。status表示我对这个topic表示赞还是不赞。 查询其他用户是否点了赞用 &#x2F;topic&#x2F;{topicId}&#x2F;{userId}&#x2F;zan 账户零钱增加x元的接口，哎，设计不出来的接口就不要抱着教条主义了，改一下，继续用 post &#x2F;account&#x2F;addMoney 也不会死。对于很难设计的动作类接口，如果可以想一个抽象名字代表就更好。不然就回归传统。 对于抽象动词都表达不了的意思这个接口的作用，是通知后端修复完成时间不准确的问题，所以用 &#x2F;signal&#x2F;{notice} 来表达一个信号通知接口的意思 &#x2F;signal&#x2F;fixCompleteTime","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"restful","slug":"restful","permalink":"https://anarckk.github.io/myvolantis/tags/restful/"}]},{"title":"java生成图形验证码（两种图形）","slug":"2019-12/31-java生成图形验证码（两种图形）","date":"2019-12-31T00:45:47.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/31/2019-12/31-java生成图形验证码（两种图形）/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/31/2019-12/31-java%E7%94%9F%E6%88%90%E5%9B%BE%E5%BD%A2%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%88%E4%B8%A4%E7%A7%8D%E5%9B%BE%E5%BD%A2%EF%BC%89/","excerpt":"","text":"来源：https://blog.csdn.net/iku5200/article/details/91792260 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280package com.security.sercritydemo.untils; import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.RenderingHints;import java.awt.geom.AffineTransform;import java.awt.image.BufferedImage;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Arrays;import java.util.Random; import javax.imageio.ImageIO; public class VerifyCodeUtils &#123; //使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符 public static final String VERIFY_CODES = &quot;23456789ABCDEFGHJKLMNPQRSTUVWXYZ&quot;; private static Random random = new Random(); /** * 使用系统默认字符源生成验证码 * * @param verifySize 验证码长度 * @return */ public static String generateVerifyCode(int verifySize) &#123; return generateVerifyCode(verifySize, VERIFY_CODES); &#125; /** * 使用指定源生成验证码 * * @param verifySize 验证码长度 * @param sources 验证码字符源 * @return */ public static String generateVerifyCode(int verifySize, String sources) &#123; if (sources == null || sources.length() == 0) &#123; sources = VERIFY_CODES; &#125; int codesLen = sources.length(); Random rand = new Random(System.currentTimeMillis()); StringBuilder verifyCode = new StringBuilder(verifySize); for (int i = 0; i &lt; verifySize; i++) &#123; verifyCode.append(sources.charAt(rand.nextInt(codesLen - 1))); &#125; return verifyCode.toString(); &#125; /** * 生成随机验证码文件,并返回验证码值 * * @param w * @param h * @param outputFile * @param verifySize * @return * @throws IOException */ public static String outputVerifyImage(int w, int h, File outputFile, int verifySize) throws IOException &#123; String verifyCode = generateVerifyCode(verifySize); outputImage(w, h, outputFile, verifyCode); return verifyCode; &#125; /** * 输出随机验证码图片流,并返回验证码值 * * @param w * @param h * @param os * @param verifySize * @return * @throws IOException */ public static String outputVerifyImage(int w, int h, OutputStream os, int verifySize) throws IOException &#123; String verifyCode = generateVerifyCode(verifySize); outputImage(w, h, os, verifyCode); return verifyCode; &#125; /** * 生成指定验证码图像文件 * * @param w * @param h * @param outputFile * @param code * @throws IOException */ public static void outputImage(int w, int h, File outputFile, String code) throws IOException &#123; if (outputFile == null) &#123; return; &#125; File dir = outputFile.getParentFile(); if (!dir.exists()) &#123; dir.mkdirs(); &#125; try &#123; outputFile.createNewFile(); FileOutputStream fos = new FileOutputStream(outputFile); outputImage(w, h, fos, code); fos.close(); &#125; catch (IOException e) &#123; throw e; &#125; &#125; /** * 输出指定验证码图片流 * * @param w * @param h * @param os * @param code * @throws IOException */ public static void outputImage(int w, int h, OutputStream os, String code) throws IOException &#123; int verifySize = code.length(); BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB); Random rand = new Random(); Graphics2D g2 = image.createGraphics(); g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); Color[] colors = new Color[5]; Color[] colorSpaces = new Color[]&#123;Color.WHITE, Color.CYAN, Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE, Color.PINK, Color.YELLOW&#125;; float[] fractions = new float[colors.length]; for (int i = 0; i &lt; colors.length; i++) &#123; colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)]; fractions[i] = rand.nextFloat(); &#125; Arrays.sort(fractions); g2.setColor(Color.GRAY);// 设置边框色 g2.fillRect(0, 0, w, h); Color c = getRandColor(200, 250); g2.setColor(c);// 设置背景色 g2.fillRect(0, 2, w, h - 4); //绘制干扰线 Random random = new Random(); g2.setColor(getRandColor(160, 200));// 设置线条的颜色 for (int i = 0; i &lt; 20; i++) &#123; int x = random.nextInt(w - 1); int y = random.nextInt(h - 1); int xl = random.nextInt(6) + 1; int yl = random.nextInt(12) + 1; g2.drawLine(x, y, x + xl + 40, y + yl + 20); &#125; // 添加噪点 float yawpRate = 0.05f;// 噪声率 int area = (int) (yawpRate * w * h); for (int i = 0; i &lt; area; i++) &#123; int x = random.nextInt(w); int y = random.nextInt(h); int rgb = getRandomIntColor(); image.setRGB(x, y, rgb); &#125; shear(g2, w, h, c);// 使图片扭曲 g2.setColor(getRandColor(100, 160)); int fontSize = h - 4; Font font = new Font(&quot;Algerian&quot;, Font.ITALIC, fontSize); g2.setFont(font); char[] chars = code.toCharArray(); for (int i = 0; i &lt; verifySize; i++) &#123; AffineTransform affine = new AffineTransform(); affine.setToRotation(Math.PI / 4 * rand.nextDouble() * (rand.nextBoolean() ? 1 : -1), (w / verifySize) * i + fontSize / 2, h / 2); g2.setTransform(affine); g2.drawChars(chars, i, 1, ((w - 10) / verifySize) * i + 5, h / 2 + fontSize / 2 - 10); &#125; g2.dispose(); ImageIO.write(image, &quot;png&quot;, os); &#125; private static Color getRandColor(int fc, int bc) &#123; if (fc &gt; 255) &#123; fc = 255; &#125; if (bc &gt; 255) &#123; bc = 255; &#125; int r = fc + random.nextInt(bc - fc); int g = fc + random.nextInt(bc - fc); int b = fc + random.nextInt(bc - fc); return new Color(r, g, b); &#125; private static int getRandomIntColor() &#123; int[] rgb = getRandomRgb(); int color = 0; for (int c : rgb) &#123; color = color &lt;&lt; 8; color = color | c; &#125; return color; &#125; private static int[] getRandomRgb() &#123; int[] rgb = new int[3]; for (int i = 0; i &lt; 3; i++) &#123; rgb[i] = random.nextInt(255); &#125; return rgb; &#125; private static void shear(Graphics g, int w1, int h1, Color color) &#123; shearX(g, w1, h1, color); shearY(g, w1, h1, color); &#125; private static void shearX(Graphics g, int w1, int h1, Color color) &#123; int period = random.nextInt(2); boolean borderGap = true; int frames = 1; int phase = random.nextInt(2); for (int i = 0; i &lt; h1; i++) &#123; double d = (double) (period &gt;&gt; 1) * Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames); g.copyArea(0, i, w1, 1, (int) d, 0); if (borderGap) &#123; g.setColor(color); g.drawLine((int) d, i, 0, i); g.drawLine((int) d + w1, i, w1, i); &#125; &#125; &#125; private static void shearY(Graphics g, int w1, int h1, Color color) &#123; int period = random.nextInt(40) + 10; // 50; boolean borderGap = true; int frames = 20; int phase = 7; for (int i = 0; i &lt; w1; i++) &#123; double d = (double) (period &gt;&gt; 1) * Math.sin((double) i / (double) period + (6.2831853071795862D * (double) phase) / (double) frames); g.copyArea(i, 0, 1, h1, 0, (int) d); if (borderGap) &#123; g.setColor(color); g.drawLine(i, (int) d, i, 0); g.drawLine(i, (int) d + h1, i, h1); &#125; &#125; &#125; public static void main(String[] args) throws IOException &#123; for (int i = 0; i &lt; 20; i++) &#123; File dir = new File(&quot;E:/img/&quot;); int w = 200, h = 80; String verifyCode = generateVerifyCode(4); File file = new File(dir, verifyCode + &quot;.jpg&quot;); outputImage(w, h, file, verifyCode); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random; import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession; /** * 生成图形验证码 */public class AuthImg extends HttpServlet &#123; private static final long serialVersionUID = 1L; // 定义图形验证码中绘制的字符的字体 private final Font mFont = new Font(&quot;Arial Black&quot;, Font.PLAIN, 23); // 图形验证码的大小 private final int IMG_WIDTH = 72; private final int IMG_HEIGTH = 27; // 获取随机颜色的方法 private Color getRandColor(int fc, int bc) &#123; Random random = new Random(); if (fc &gt; 255) fc = 255; if (bc &gt; 255) bc = 255; int r = fc + random.nextInt(bc - fc); int g = fc + random.nextInt(bc - fc); int b = fc + random.nextInt(bc - fc); return new Color(r, g, b); &#125; // 获取随机字符串 private String getRandomChar() &#123; int rand = (int) Math.round(Math.random() * 2); long itmp = 0; char ctmp = &#x27;\\u0000&#x27;; switch (rand) &#123; case 1: itmp = Math.round(Math.random() * 25 + 65); ctmp = (char) itmp; return String.valueOf(ctmp); case 2: itmp = Math.round(Math.random() * 25 + 97); ctmp = (char) itmp; return String.valueOf(ctmp); default: itmp = Math.round(Math.random() * 9); return itmp + &quot;&quot;; &#125; &#125; @Override public void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // 设置禁止缓存 response.setHeader(&quot;Pragma&quot;, &quot;No-cache&quot;); response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;); response.setDateHeader(&quot;Expires&quot;, 0); response.setContentType(&quot;image/jpeg&quot;); BufferedImage image = new BufferedImage(IMG_WIDTH, IMG_HEIGTH, BufferedImage.TYPE_INT_RGB); Graphics g = image.getGraphics(); Random random = new Random(); g.setColor(getRandColor(200, 250)); // 填充背景色 g.fillRect(1, 1, IMG_WIDTH - 1, IMG_HEIGTH - 1); // 为图形验证码绘制边框 g.setColor(new Color(102, 102, 102)); g.drawRect(0, 0, IMG_WIDTH, IMG_HEIGTH); g.setColor(getRandColor(160, 200)); // 生成随机干扰线 for (int i = 0; i &lt; 80; i++) &#123; int x = random.nextInt(IMG_WIDTH - 1); int y = random.nextInt(IMG_HEIGTH - 1); int x1 = random.nextInt(6) + 1; int y1 = random.nextInt(12) + 1; g.drawLine(x, y, x + x1, y + y1); &#125; g.setColor(getRandColor(160, 200)); // 生成随机干扰线 for (int i = 0; i &lt; 80; i++) &#123; int x = random.nextInt(IMG_WIDTH - 1); int y = random.nextInt(IMG_HEIGTH - 1); int x1 = random.nextInt(12) + 1; int y1 = random.nextInt(6) + 1; g.drawLine(x, y, x - x1, y - y1); &#125; // 设置绘制字符的字体 g.setFont(mFont); // 用于保存系统生成的随机字符串 String sRand = &quot;&quot;; for (int i = 0; i &lt; 4; i++) &#123; String tmp = getRandomChar(); sRand += tmp; g.setColor(new Color(20 + random.nextInt(110), 20 + random.nextInt(110), 20 + random.nextInt(110))); g.drawString(tmp, 15 * i + 10, 20); &#125; // 获取HttpSession对象 HttpSession session = request.getSession(true); session.removeAttribute(&quot;rand&quot;); session.setAttribute(&quot;rand&quot;, sRand); g.dispose(); // 向输出流中输出图片 ImageIO.write(image, &quot;JPEG&quot;, response.getOutputStream()); &#125; &#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"}]},{"title":"在非SpringBean类中从ApplicationContext取出Bean","slug":"2019-12/31-在非SpringBean类中从ApplicationContext取出Bean","date":"2019-12-31T00:40:24.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/31/2019-12/31-在非SpringBean类中从ApplicationContext取出Bean/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/31/2019-12/31-%E5%9C%A8%E9%9D%9ESpringBean%E7%B1%BB%E4%B8%AD%E4%BB%8EApplicationContext%E5%8F%96%E5%87%BABean/","excerpt":"","text":"本文的主要目的是从spring中取出bean，然后赋值给一个util类，util是静态工具类，不用放到spring注册到bean。所以它也拿不到spring bean。为了让util单方面的拿到bean，可以这么做 12345678910111213141516171819202122232425262728293031323334353637383940414243444546@Componentpublic class SpringContextHolder implements ApplicationContextAware &#123; private static ApplicationContext applicationContext; // 实现ApplicationContextAware接口的context注入函数, 将其存入静态变量. @Override public void setApplicationContext(ApplicationContext applicationContext) &#123; SpringContextHolder.applicationContext = applicationContext; &#125; // 取得存储在静态变量中的ApplicationContext. public static ApplicationContext getApplicationContext() &#123; checkApplicationContext(); return applicationContext; &#125; // 从静态变量ApplicationContext中取得Bean, 自动转型为所赋值对象的类型. @SuppressWarnings(&quot;unchecked&quot;) public static &lt;T&gt; T getBean(String name) &#123; checkApplicationContext(); return (T) applicationContext.getBean(name); &#125; // 从静态变量ApplicationContext中取得Bean, 自动转型为所赋值对象的类型. // 从静态变量ApplicationContext中取得Bean, 自动转型为所赋值对象的类型. // 如果有多个Bean符合Class, 取出第一个. @SuppressWarnings(&quot;unchecked&quot;) public static &lt;T&gt; T getBean(Class&lt;T&gt; clazz) &#123; checkApplicationContext(); @SuppressWarnings(&quot;rawtypes&quot;) Map beanMaps = applicationContext.getBeansOfType(clazz); if (beanMaps != null &amp;&amp; !beanMaps.isEmpty()) &#123; return (T) beanMaps.values().iterator().next(); &#125; else &#123; return null; &#125; &#125; private static void checkApplicationContext() &#123; if (applicationContext == null) &#123; throw new IllegalStateException(&quot;applicaitonContext未注入,请在applicationContext.xml中定义SpringContextHolder&quot;); &#125; &#125;&#125; 通过一个中介bean，在其他util中，就可以使用这个中介bean取出spring上下文中的bean 12private static final RedisTemplate&lt;String, Object&gt; REDIS_TEMPLATE = SpringContextHolder .getBean(RedisTemplate.class);","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"},{"name":"springframework","slug":"springframework","permalink":"https://anarckk.github.io/myvolantis/tags/springframework/"}]},{"title":"shiro中的SimpleAuthenticationInfo","slug":"归档/shiro/30-shiro中的SimpleAuthenticationInfo","date":"2019-12-30T07:18:23.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro中的SimpleAuthenticationInfo/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E4%B8%AD%E7%9A%84SimpleAuthenticationInfo/","excerpt":"","text":"在SimpleAuthenticationInfo构造函数中，第一个参数是principal,第二个参数是credencials，第三个参数可选，是用于哈希的盐的值，第四个是realm名字。 doGetAuthenticationInfo(AuthenticationToken token)得到AuthticationInfo之后，会自定对比里面的credencitals和subject.login时候传入的credentials是否匹配。匹配就通过，不匹配就会报IncorrectCredentialsException。 12345678910111213141516171819202122232425 /** * 认证 * 这一步我们根据token给的用户名，去数据库查出加密过用户密码，然后把加密后的密码和盐值一起发给shiro，让它做比对 */ @Override protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException &#123; UsernamePasswordToken userpasswordToken = (UsernamePasswordToken) token; String username = userpasswordToken.getUsername(); UserDto user = userService.getUserInfo(username); if (user == null) throw new AuthenticationException(&quot;用户不存在！&quot;); return new SimpleAuthenticationInfo(user, user.getEncryptPwd(), &quot;dbRealm&quot;);// return new SimpleAuthenticationInfo(user, user.getEncryptPwd(), ByteSource.Util.bytes(encryptSalt), &quot;dbRealm&quot;); &#125; // 授权 @Override protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) &#123; //返回实体 SimpleAuthorizationInfo result = new SimpleAuthorizationInfo(); Set&lt;String&gt; roles = new HashSet&lt;&gt;(); roles.add(&quot;user&quot;); result.setRoles(roles); return result; &#125; 如果要用上哈希盐对比密码，应该在该自定义realm构造函数里增加setCredentialsMatcher。 12345public DbShiroRealm(IUserService userService) &#123; this.userService = userService; //因为数据库中的密码做了散列，所以使用shiro的散列Matcher this.setCredentialsMatcher(new HashedCredentialsMatcher(Sha256Hash.ALGORITHM_NAME));&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro里的核心概念","slug":"归档/shiro/30-shiro里的核心概念","date":"2019-12-30T07:06:44.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro里的核心概念/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E9%87%8C%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/","excerpt":"","text":"principal 指的是账号这样的令牌 credentials 指的是密码这样的密钥","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro-spring过滤器链","slug":"归档/shiro/30-shiro-spring过滤器链","date":"2019-12-30T06:53:57.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro-spring过滤器链/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro-spring%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE/","excerpt":"","text":"123456789101112131415161718192021@Bean(name = &quot;shiroFilter&quot;)public ShiroFilterFactoryBean shiroFilter(SecurityManager securityManager) &#123; ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean(); shiroFilterFactoryBean.setSecurityManager(securityManager); shiroFilterFactoryBean.setLoginUrl(&quot;/login&quot;); shiroFilterFactoryBean.setUnauthorizedUrl(&quot;/notRole&quot;); Map&lt;String, String&gt; filterChainDefinitionMap = new LinkedHashMap&lt;&gt;(); // &lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt; filterChainDefinitionMap.put(&quot;/webjars/**&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/login&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/front/**&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/api/**&quot;, &quot;anon&quot;); filterChainDefinitionMap.put(&quot;/admin/**&quot;, &quot;authc&quot;); filterChainDefinitionMap.put(&quot;/user/**&quot;, &quot;authc&quot;); //主要这行代码必须放在所有权限设置的最后，不然会导致所有 url 都被拦截 剩余的都需要认证 filterChainDefinitionMap.put(&quot;/**&quot;, &quot;authc&quot;); shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap); return shiroFilterFactoryBean;&#125; authc这样指的就是每次进入api都要通过过滤器过滤一下，判断是否符合该过滤器的权限。anon、authc是默认的过滤器链，其他自带过滤器链包括 123456789anon org.apache.shiro.web.filter.authc.AnonymousFilterauthc org.apache.shiro.web.filter.authc.FormAuthenticationFilterauthcBasic org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilterperms org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilterport org.apache.shiro.web.filter.authz.PortFilterrest org.apache.shiro.web.filter.authz.HttpMethodPermissionFilterroles org.apache.shiro.web.filter.authz.RolesAuthorizationFilterssl org.apache.shiro.web.filter.authz.SslFilteruser org.apache.shiro.web.filter.authc.UserFilter","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro关闭session","slug":"归档/shiro/30-shiro关闭session","date":"2019-12-30T06:35:03.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro关闭session/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E5%85%B3%E9%97%ADsession/","excerpt":"","text":"在使用jwt认证过程中，后端不用记录httpSession，也就可以禁用session，shiro有自带的session，同样也可以禁用。 12345678@Beanprotected ShiroFilterChainDefinition shiroFilterChainDefinition() &#123; DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition(); chainDefinition.addPathDefinition(&quot;/login&quot;, &quot;anon&quot;); chainDefinition.addPathDefinition(&quot;/logout&quot;, &quot;anyRole[user]&quot;); chainDefinition.addPathDefinition(&quot;/**&quot;, &quot;noSessionCreation,anyRole[user]&quot;); return chainDefinition;&#125; noSessionCreation是在请求中关闭session的意思。 同时，还要注入名为SessionStorageEvaluator的bean 12345678910/** * 禁用session, 不保存用户登录状态。保证每次请求都重新认证。 * 需要注意的是，如果用户代码里调用Subject.getSession()还是可以用session，如果要完全禁用，要配合下面的noSessionCreation的Filter来实现 */@Beanprotected SessionStorageEvaluator sessionStorageEvaluator() &#123; DefaultWebSessionStorageEvaluator sessionStorageEvaluator = new DefaultWebSessionStorageEvaluator(); sessionStorageEvaluator.setSessionStorageEnabled(false); return sessionStorageEvaluator;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro中的AuthenticationInfo","slug":"归档/shiro/30-shiro中的AuthenticationInfo","date":"2019-12-30T03:14:40.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro中的AuthenticationInfo/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E4%B8%AD%E7%9A%84AuthenticationInfo/","excerpt":"","text":"AuthenticationInfo对象中存储的是主体（Subject）的身份认证信息。Shiro会调用CredentialsMatcher对象的doCredentialsMatch方法对AuthenticationInfo对象和AuthenticationToken进行匹配。匹配成功则表示主体（Subject）认证成功，否则表示认证失败。 123456789101112131415161718192021222324public interface AuthenticationInfo extends Serializable &#123; // 获取用户身份信息 //每个Realm反回一个AuthenticationInfo ， //所有AuthenticationInfo 中的PrincipalCollection 会根据指定规则进行合并 PrincipalCollection getPrincipals(); // 获取用户的 凭证信息（credentials），当有多个Realm返回多个AuthenticationInfo 时 // 凭证信息 也会根据指定的规则进行合并 // Shiro会使用 凭证信息（credentials） 验证用户身份的合法性。 Object getCredentials();&#125;public interface MergableAuthenticationInfo extends AuthenticationInfo &#123; // 用于合并多个Realm返回的AuthenticationInfo void merge(AuthenticationInfo info);&#125;public interface Account extends AuthenticationInfo, AuthorizationInfo &#123;&#125;public interface SaltedAuthenticationInfo extends AuthenticationInfo &#123; ByteSource getCredentialsSalt();// 获取凭证 信息的 盐&#125; MergableAuthenticationInfo 用于提供在多 Realm 时合并 AuthenticationInfo 的功能，主要合并 Principal、如果是其他的如 credentialsSalt，会用后边的信息覆盖前边的。 SaltedAuthenticationInfo 用于对 凭证 信息加盐。比如 HashedCredentialsMatcher，在验证时会判断AuthenticationInfo 是否是SaltedAuthenticationInfo 子类，来获取盐信息。 Account 不仅继承了AuthenticationInfo，继承了AuthorizationInfo，也就是说它不仅包含主体的身份认证信息，还包含了主体的授权信息（角色、权限）。SimpleAccount 是Account的一个实现。在 IniRealm、PropertiesRealm这种静态创建帐号信息的场景中使用，这些 Realm 直接继承了 SimpleAccountRealm，而SimpleAccountRealm 提供了相关的 API 来动态维护 SimpleAccount；即可以通过这些 API来动态增删改查 SimpleAccount；动态增删改查角色&#x2F;权限信息。如果您的帐号不是特别多，可以使用这种方式。 其他情况一般返回 SimpleAuthenticationInfo 即可。 因为我们可以在 Shiro 中同时配置多个 Realm，所以呢身份信息可能就有多个；因此其提供了 PrincipalCollection 用于聚合这些身份信息。 12345678910public interface PrincipalCollection extends Iterable, Serializable &#123; Object getPrimaryPrincipal(); //得到主要的身份 &lt;T&gt; T oneByType(Class&lt;T&gt; type); //根据身份类型获取第一个 &lt;T&gt; Collection&lt;T&gt; byType(Class&lt;T&gt; type); //根据身份类型获取一组 List asList(); //转换为 List Set asSet(); //转换为 Set Collection fromRealm(String realmName); //根据 Realm 名字获取 Set&lt;String&gt; getRealmNames(); //获取所有身份验证通过的 Realm 名字 boolean isEmpty(); //判断是否为空&#125; MutablePrincipalCollection 是一个可变的 PrincipalCollection 接口，即提供了如下可变方法： 123456public interface MutablePrincipalCollection extends PrincipalCollection &#123; void add(Object principal, String realmName); //添加 Realm-Principal 的关联 void addAll(Collection principals, String realmName); //添加一组 Realm-Principal 的关联 void addAll(PrincipalCollection principals);//添加 PrincipalCollection void clear();//清空&#125; 目前 Shiro只提供了MutablePrincipalCollection的一个实现 SimplePrincipalCollection，在多 Realm 时 SimpleAuthenticationInfo 会合并多个 Principal为一个 PrincipalCollection。 作者：JSON_NULL链接：https://www.jianshu.com/p/c7b669bd9454来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro多个realm","slug":"归档/shiro/30-shiro多个realm","date":"2019-12-30T01:00:01.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro多个realm/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E5%A4%9A%E4%B8%AArealm/","excerpt":"","text":"shiro有个AbstractAuthenticator类，作为验证器的基类。它有一个方法作为鉴权方法 12protected abstract AuthenticationInfo doAuthenticate(AuthenticationToken token) throws AuthenticationException; ModularRealmAuthenticator继承AbstractAuthenticator类，负责多Realm的鉴权策略选择。 123456789protected AuthenticationInfo doAuthenticate(AuthenticationToken authenticationToken) throws AuthenticationException &#123; assertRealmsConfigured(); Collection&lt;Realm&gt; realms = getRealms(); if (realms.size() == 1) &#123; return doSingleRealmAuthentication(realms.iterator().next(), authenticationToken); &#125; else &#123; return doMultiRealmAuthentication(realms, authenticationToken); &#125;&#125; shiro通过继承AuthorizingRealm来实现一个Realm，作为鉴权数据类。例如DbShiroRealm extends AuthorizingRealm，实现数据库鉴权类。JWTShiroRealm extends AuthorizingRealm实现JWT鉴权类。","categories":[{"name":"底层原理","slug":"底层原理","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"shiro系统设计","slug":"归档/shiro/30-shiro系统设计","date":"2019-12-30T00:48:59.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/12/30/归档/shiro/30-shiro系统设计/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/30/%E5%BD%92%E6%A1%A3/shiro/30-shiro%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/","excerpt":"","text":"系统架构 在shiro架构中，有3个最主要的组件：Subject，SecurityManager，Realm。 Subject本质上就是当前访问用户的抽象描述。 SecurityManager是Shiro架构中最核心的组件，通过它可以协调其他组件完成用户认证和授权。实际上，SecurityManager就是Shiro框架的控制器。 Realm定义了访问数据的方式，用来连接不同的数据源，如：LDAP，关系数据库，配置文件等等。 1、认证 通过调用Subject.login(token)方法开始用户认证流程。 1234567891011121314Subject currentUser = SecurityUtils.getSubject();UsernamePasswordToken token = new UsernamePasswordToken(username, password);token.setRememberMe(true);try &#123; currentUser.login(token);&#125; catch (UnknownAccountException e) &#123; logger.error(String.format(&quot;user not found: %s&quot;, username), e); // 用户不存在&#125; catch (IncorrectCredentialsException e) &#123; logger.error(String.format(&quot;incorrent credentials: %s&quot;, username), e); // 密码不正确&#125; catch (ConcurrentAccessException e) &#123; logger.error(String.format(&quot;user has been authenticated: %s&quot;, username), e); // 用户重复登录&#125; catch (AccountException e) &#123; logger.error(String.format(&quot;account except: %s&quot;, username), e); // 其他账户异常&#125; shiro用户认证时序图： 2、授权 shiro访问授权有3种实现方式：api调用，java注解，jsp标签。 （1）在独立应用程序中访问授权通过api调用实现 1234567String role = &quot;schwartz&quot;;Subject currentUser = SecurityUtils.getSubject();if(currentUser.hasRole(role)) &#123; //用户属于角色schwartz&#125;else&#123; //用户不属于角色schwartz&#125; （2）在spring框架中可以通过java注解 12345@RequiresPermissions(value=&#123;&quot;log:manage:*&quot;&#125;)public ModelAndView home(HttpServletRequest req) &#123; ModelAndView mv = new ModelAndView(&quot;home&quot;); return mv;&#125; jsp略。 shiro访问授权时序图： 注意事项1.org.apache.shiro.realm.jdbc.JdbcRealm如果需要在授权时开启权限检查，必须设置permissionsLookupEnabled为true，否则只检查角色。2.用户退出登录时，Shiro用户必须执行logout()，必须要注销Session信息，避免影响下一次用户认证和授权。 12SecurityUtils.getSubject().logout();req.getSession().invalidate(); 3.如果在数据库中存储的用户密码为编码值（如MD5加密），则在发送登录请求时传递的密码参数也必须是MD5加密结果，否则认证失败。4.shiro框架只能控制操作权限，不能控制数据权限。数据权限与具体的业务紧密关联，无法通过一个通用的框架完成，通常都是利用关系数据库查询过滤实现。对操作权限的控制有2层含义，其一：用户在前端只能看到对应权限的元素；其二：在后端对用户操作进行权限检查。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"命令语法中各种括号的含义","slug":"2019-12/27-命令语法中各种括号的含义","date":"2019-12-27T07:44:10.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-命令语法中各种括号的含义/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95%E4%B8%AD%E5%90%84%E7%A7%8D%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%90%AB%E4%B9%89/","excerpt":"","text":"命令的格式一般为： syntax: command [optional …]; 这样，里面的括号（&lt;&gt;, []）的含义如下：","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"命令语法","slug":"命令语法","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/"}]},{"title":"容器与主机之间的数据拷贝","slug":"2019-12/27-容器与主机之间的数据拷贝","date":"2019-12-27T07:38:25.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-容器与主机之间的数据拷贝/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-%E5%AE%B9%E5%99%A8%E4%B8%8E%E4%B8%BB%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8B%B7%E8%B4%9D/","excerpt":"","text":"语法script12docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH OPTIONS说明： -L :保持源目标中的链接 实例将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。 script1docker cp /www/runoob 96f7f14e99ab:/www/ 将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。 script1docker cp /www/runoob 96f7f14e99ab:/www 将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。 script1docker cp 96f7f14e99ab:/www /tmp/","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"},{"name":"docker命令","slug":"docker命令","permalink":"https://anarckk.github.io/myvolantis/tags/docker%E5%91%BD%E4%BB%A4/"}]},{"title":"VMware Workstation 与 Device/Credential Guard 不兼容","slug":"2019-12/27-VMware-Workstation-与-Device-Credential-Guard-不兼容","date":"2019-12-27T05:20:08.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-VMware-Workstation-与-Device-Credential-Guard-不兼容/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-VMware-Workstation-%E4%B8%8E-Device-Credential-Guard-%E4%B8%8D%E5%85%BC%E5%AE%B9/","excerpt":"","text":"VMware Workstation 与 Device&#x2F;Credential Guard 不兼容 解决方法，关闭hyper 。以管理员身份运行cmdscript1bcdedit /set hypervisorlaunchtype off 注意：需要重新启动计算机 如果需要重新开启hyper，可以使用以下命令script1bcdedit /set hypervisorlaunchtype auto","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"问题解决","slug":"问题解决","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"bat脚本检测端口，并删除端口对应进程","slug":"2019-12/27-bat脚本检测端口，并删除端口对应进程","date":"2019-12-27T01:37:15.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-bat脚本检测端口，并删除端口对应进程/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-bat%E8%84%9A%E6%9C%AC%E6%A3%80%E6%B5%8B%E7%AB%AF%E5%8F%A3%EF%BC%8C%E5%B9%B6%E5%88%A0%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%AF%B9%E5%BA%94%E8%BF%9B%E7%A8%8B/","excerpt":"","text":"https://www.jianshu.com/p/86fd4f867d1d 一、最终bat文件脚本 该脚本实现80端口进程PID号的检测portnum为端口号变量1.txt为临时存储netstat命令查询的中间临时存储文件%%a为PID号的存储变量 script123456789101112@echo off&amp;title 正在检测...set portnum=80netstat -ano|findstr 0.0.0.0:80&gt;1.txtfor /f &quot;tokens=5&quot; %%a in (1.txt) do (IF &quot;%%a&quot; NEQ &quot;&quot; ( echo 检测到本地%portnum%端口对应的PID号&quot;%%a&quot; pause&gt;nul )else( echo.未检测到本地%portnum%端口 exit)","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"windows bat脚本","slug":"windows-bat脚本","permalink":"https://anarckk.github.io/myvolantis/tags/windows-bat%E8%84%9A%E6%9C%AC/"},{"name":"CTW","slug":"CTW","permalink":"https://anarckk.github.io/myvolantis/tags/CTW/"}]},{"title":"DOS命令","slug":"2019-12/27-DOS命令","date":"2019-12-27T01:32:21.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-DOS命令/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-DOS%E5%91%BD%E4%BB%A4/","excerpt":"","text":"来源：https://blog.csdn.net/muximuxi_kgsecond/article/details/8127345 一份比较详细的DOS命令说明1 echo 和 @回显命令@ #关闭单行回显echo off #从下一行开始关闭回显@echo off #从本行开始关闭回显。一般批处理第一行都是这个echo on #从下一行开始打开回显echo #显示当前是 echo off 状态还是 echo on 状态echo. #输出一个”回车换行”，空白行 #(同echo, echo; echo+ echo[ echo] echo&#x2F; echo) 2 errorlevelecho %errorlevel%每个命令运行结束，可以用这个命令行格式查看返回码默认值为0，一般命令执行出错会设 errorlevel 为1 3 dir显示文件夹内容dir #显示当前目录中的文件和子目录dir &#x2F;a #显示当前目录中的文件和子目录，包括隐藏文件和系统文件dir c: &#x2F;a:d #显示 C 盘当前目录中的目录dir c: &#x2F;a:-d #显示 C 盘根目录中的文件dir c:\\ &#x2F;b&#x2F;p #&#x2F;b只显示文件名，&#x2F;p分页显示dir *.exe &#x2F;s #显示当前目录和子目录里所有的.exe文件 4 cd切换目录cd\\ #进入根目录cd #显示当前目录cd &#x2F;d d:\\sdk #可以同时更改盘符和目录 5 md创建目录md d:\\a\\b\\c #如果 d:\\a 不存在，将会自动创建中级目录#如果命令扩展名被停用，则需要键入 mkdir \\a\\b\\c。 6 rd删除目录rd abc #删除当前目录里的 abc 子目录，要求为空目录rd &#x2F;s&#x2F;q d:\\temp #删除 d:\\temp 文件夹及其子文件夹和文件，&#x2F;q安静模式 7 del删除文件del d:\\test.txt #删除指定文件，不能是隐藏、系统、只读文件del &#x2F;q&#x2F;a&#x2F;f d:\\temp*.*删除 d:\\temp 文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录del &#x2F;q&#x2F;a&#x2F;f&#x2F;s d:\\temp*.*删除 d:\\temp 及子文件夹里面的所有文件，包括隐藏、只读、系统文件，不包括子目录 8 ren重命名命令ren d:\\temp tmp #支持对文件夹的重命名 9 cls清屏 10 type显示文件内容type c:\\boot.ini #显示指定文件的内容，程序文件一般会显示乱码type *.txt #显示当前目录里所有.txt文件的内容 11 copy拷贝文件copy c:\\test.txt d:\\test.bak复制 c:\\test.txt 文件到 d:\\ ，并重命名为 test.bakcopy con test.txt从屏幕上等待输入，按 Ctrl+Z 结束输入，输入内容存为test.txt文件con代表屏幕，prn代表打印机，nul代表空设备copy 1.txt + 2.txt 3.txt合并 1.txt 和 2.txt 的内容，保存为 3.txt 文件如果不指定 3.txt ，则保存到 1.txtcopy test.txt +复制文件到自己，实际上是修改了文件日期 12 title设置cmd窗口的标题title 新标题 #可以看到cmd窗口的标题栏变了 13 ver显示系统版本 14 label 和 vol设置卷标vol #显示卷标label #显示卷标，同时提示输入新卷标label c:system #设置C盘的卷标为 system 15 pause暂停命令 16 rem 和 ::注释命令注释行不执行操作 17 date 和 time日期和时间date #显示当前日期，并提示输入新日期，按&quot;回车&quot;略过输入date&#x2F;t #只显示当前日期，不提示输入新日期time #显示当前时间，并提示输入新时间，按&quot;回车&quot;略过输入time&#x2F;t #只显示当前时间，不提示输入新时间 18 goto 和 :跳转命令:label #行首为:表示该行是标签行，标签行不执行操作goto label #跳转到指定的标签那一行 19 find (外部命令)查找命令find &quot;abc&quot; c:\\test.txt在 c:\\test.txt 文件里查找含 abc 字符串的行如果找不到，将设 errorlevel 返回码为1find &#x2F;i “abc” c:\\test.txt查找含 abc 的行，忽略大小写find &#x2F;c &quot;abc&quot; c:\\test.txt显示含 abc 的行的行数 20 more (外部命令)逐屏显示more c:\\test.txt #逐屏显示 c:\\test.txt 的文件内容 21 tree显示目录结构tree d:\\ #显示D盘的文件目录结构 22 &amp;顺序执行多条命令，而不管命令是否执行成功 23 &amp;&amp;顺序执行多条命令，当碰到执行出错的命令后将不执行后面的命令find &quot;ok&quot; c:\\test.txt &amp;&amp; echo 成功如果找到了&quot;ok&quot;字样，就显示&quot;成功&quot;，找不到就不显示 24 ||顺序执行多条命令，当碰到执行正确的命令后将不执行后面的命令find &quot;ok&quot; c:\\test.txt || echo 不成功如果找不到&quot;ok&quot;字样，就显示&quot;不成功&quot;，找到了就不显示 25 |管道命令dir . &#x2F;s&#x2F;a | find &#x2F;c &quot;.exe&quot;管道命令表示先执行 dir 命令，对其输出的结果执行后面的 find 命令该命令行结果：输出当前文件夹及所有子文件夹里的.exe文件的个数type c:\\test.txt|more这个和 more c:\\test.txt 的效果是一样的 26 &gt; 和 &gt;&gt;输出重定向命令&gt; 清除文件中原有的内容后再写入&gt;&gt; 追加内容到文件末尾，而不会清除原有的内容主要将本来显示在屏幕上的内容输出到指定文件中指定文件如果不存在，则自动生成该文件type c:\\test.txt &gt;prn屏幕上不显示文件内容，转向输出到打印机echo hello world&gt;con在屏幕上显示hello world，实际上所有输出都是默认 &gt;con 的copy c:\\test.txt f: &gt;nul拷贝文件，并且不显示&quot;文件复制成功&quot;的提示信息，但如果f盘不存在，还是会显示出错信息copy c:\\test.txt f: &gt;nul 2&gt;nul不显示”文件复制成功”的提示信息，并且f盘不存在的话，也不显示错误提示信息echo ^^W ^&gt; ^W&gt;c:\\test.txt生成的文件内容为 ^W &gt; W^ 和 &gt; 是控制命令，要把它们输出到文件，必须在前面加个 ^ 符号 27 &lt;从文件中获得输入信息，而不是从屏幕上一般用于 date time label 等需要等待输入的命令@echo offecho 2005-05-01&gt;temp.txtdate &lt;temp.txtdel temp.txt这样就可以不等待输入直接修改当前日期 28 %0 %1 %2 %3 %4 %5 %6 %7 %8 %9 %*命令行传递给批处理的参数%0 批处理文件本身%1 第一个参数%9 第九个参数%* 从第一个参数开始的所有参数 批参数(%n)的替代已被增强。您可以使用以下语法: %~1 - 删除引号(\\&quot;)，扩充 %1 %~f1 - 将 %1 扩充到一个完全合格的路径名 %~d1 - 仅将 %1 扩充到一个驱动器号 %~p1 - 仅将 %1 扩充到一个路径 %~n1 - 仅将 %1 扩充到一个文件名 %~x1 - 仅将 %1 扩充到一个文件扩展名 %~s1 - 扩充的路径指含有短名 %~a1 - 将 %1 扩充到文件属性 %~t1 - 将 %1 扩充到文件的日期/时间 %~z1 - 将 %1 扩充到文件的大小 %~$PATH : 1 - 查找列在 PATH 环境变量的目录，并将 %1 扩充到找到的第一个完全合格的名称。如果环境 变量名未被定义，或者没有找到文件，此组合键会 扩充到空字符串 可以组合修定符来取得多重结果: %~dp1 - 只将 %1 扩展到驱动器号和路径 %~nx1 - 只将 %1 扩展到文件名和扩展名 %~dp$PATH:1 - 在列在 PATH 环境变量中的目录里查找 %1， 并扩展到找到的第一个文件的驱动器号和路径。 %~ftza1 - 将 %1 扩展到类似 DIR 的输出行。 可以参照 call&#x2F;? 或 for&#x2F;? 看出每个参数的含意echo load &quot;%%1&quot; &quot;%%2&quot;&gt;c:\\test.txt生成的文件内容为 load &quot;%1&quot; &quot;%2&quot;批处理文件里，用这个格式把命令行参数输出到文件 29 if判断命令if &quot;%1&quot;&#x3D;&#x3D;&quot;&#x2F;a&quot; echo 第一个参数是&#x2F;aif &#x2F;i &quot;%1&quot; equ &quot;&#x2F;a&quot; echo 第一个参数是&#x2F;a&#x2F;i 表示不区分大小写，equ 和 &#x3D;&#x3D; 是一样的，其它运算符参见 if&#x2F;?if exist c:\\test.bat echo 存在c:\\test.bat文件if not exist c:\\windows ( echo 不存在c:\\windows文件夹 )if exist c:\\test.bat ( echo 存在c:\\test.bat ) else ( echo 不存在c:\\test.bat ) 30 setlocal 和 endlocal设置”命令扩展名”和”延缓环境变量扩充”SETLOCAL ENABLEEXTENSIONS #启用&quot;命令扩展名&quot;SETLOCAL DISABLEEXTENSIONS #停用&quot;命令扩展名&quot;SETLOCAL ENABLEDELAYEDEXPANSION #启用&quot;延缓环境变量扩充&quot;SETLOCAL DISABLEDELAYEDEXPANSION #停用&quot;延缓环境变量扩充&quot;ENDLOCAL #恢复到使用SETLOCAL语句以前的状态“命令扩展名”默认为启用“延缓环境变量扩充”默认为停用批处理结束系统会自动恢复默认值可以修改注册表以禁用&quot;命令扩展名&quot;，详见 cmd &#x2F;? 。所以用到&quot;命令扩展名&quot;的程序，建议在开头和结尾加上 SETLOCAL ENABLEEXTENSIONS 和 ENDLOCAL 语句，以确保程序能在其它系统上正确运行&quot;延缓环境变量扩充&quot;主要用于 if 和 for 的符合语句，在 set 的说明里有其实用例程 31 set设置变量引用变量可在变量名前后加 % ，即 %变量名%set #显示目前所有可用的变量，包括系统变量和自定义的变量echo %SystemDrive% #显示系统盘盘符。系统变量可以直接引用set p #显示所有以p开头的变量，要是一个也没有就设errorlevel&#x3D;1set p&#x3D;aa1bb1aa2bb2 #设置变量p，并赋值为 &#x3D; 后面的字符串，即aa1bb1aa2bb2echo %p% #显示变量p代表的字符串，即aa1bb1aa2bb2echo %p:6% #显示变量p中第6个字符以后的所有字符，即aa2bb2echo %p:6,3% #显示第6个字符以后的3个字符，即aa2echo %p:0,3% #显示前3个字符，即aa1echo %p:-2% #显示最后面的2个字符，即b2echo %p:0,-2% #显示除了最后2个字符以外的其它字符，即aa1bb1aa2becho %p:aa&#x3D;c% #用c替换变量p中所有的aa，即显示c1bb1c2bb2echo %p:aa&#x3D;% #将变量p中的所有aa字符串置换为空，即显示1bb12bb2echo %p:*bb&#x3D;c% #第一个bb及其之前的所有字符被替换为c，即显示c1aa2bb2set p&#x3D;%p:*bb&#x3D;c% #设置变量p，赋值为 %p:*bb&#x3D;c% ，即c1aa2bb2set &#x2F;a p&#x3D;39 #设置p为数值型变量，值为39set &#x2F;a p&#x3D;39&#x2F;10 #支持运算符，有小数时用去尾法，39&#x2F;10&#x3D;3.9，去尾得3，p&#x3D;3set &#x2F;a p&#x3D;p&#x2F;10 #用 &#x2F;a 参数时，在 &#x3D; 后面的变量可以不加%直接引用set &#x2F;a p&#x3D;”1&amp;0″ #”与”运算，要加引号。其它支持的运算符参见set&#x2F;?set p&#x3D; #取消p变量set &#x2F;p p&#x3D;请输入屏幕上显示”请输入”，并会将输入的字符串赋值给变量p注意这条可以用来取代 choice 命令注意变量在 if 和 for 的复合语句里是一次性全部替换的，如@echo offset p&#x3D;aaaif %p%&#x3D;&#x3D;aaa ( echo %p% set p&#x3D;bbb echo %p% )结果将显示aaaaaa因为在读取 if 语句时已经将所有 %p% 替换为aaa这里的&quot;替换&quot;，在 &#x2F;? 帮助里就是指&quot;扩充&quot;、&quot;环境变量扩充&quot;可以启用”延缓环境变量扩充”，用 ! 来引用变量，即 !变量名!@echo offSETLOCAL ENABLEDELAYEDEXPANSIONset p&#x3D;aaaif %p%&#x3D;&#x3D;aaa ( echo %p% set p&#x3D;bbb echo !p! )ENDLOCAL结果将显示aaabbb还有几个动态变量，运行 set 看不到%CD% #代表当前目录的字符串%DATE% #当前日期%TIME% #当前时间%RANDOM% #随机整数，介于032767%ERRORLEVEL% #当前 ERRORLEVEL 值%CMDEXTVERSION% #当前命令处理器扩展名版本号%CMDCMDLINE% #调用命令处理器的原始命令行可以用echo命令查看每个变量值，如 echo %time%注意 %time% 精确到毫秒，在批处理需要延时处理时可以用到 32 start批处理中调用外部程序的命令，否则等外部程序完成后才继续执行剩下的指令 33 call批处理中调用另外一个批处理的命令，否则剩下的批处理指令将不会被执行有时有的应用程序用start调用出错的，也可以call调用 34 choice (外部命令)选择命令让用户输入一个字符，从而选择运行不同的命令，返回码errorlevel为1234……win98里是choice.comwin2000pro里没有，可以从win98里拷过来win2003里是choice.exechoice &#x2F;N &#x2F;C y &#x2F;T 5 &#x2F;D y&gt;nul延时5秒 35 assoc 和 ftype文件关联assoc 设置’文件扩展名’关联，关联到’文件类型’ftype 设置’文件类型’关联，关联到’执行程序和参数’当你双击一个.txt文件时，windows并不是根据.txt直接判断用 notepad.exe 打开而是先判断.txt属于 txtfile ‘文件类型’再调用 txtfile 关联的命令行 txtfile&#x3D;%SystemRoot%\\system32\\NOTEPAD.EXE %1可以在&quot;文件夹选项&quot;→&quot;文件类型&quot;里修改这2种关联assoc #显示所有’文件扩展名’关联assoc .txt #显示.txt代表的’文件类型’，结果显示 .txt&#x3D;txtfileassoc .doc #显示.doc代表的’文件类型’，结果显示 .doc&#x3D;Word.Document.8assoc .exe #显示.exe代表的’文件类型’，结果显示 .exe&#x3D;exefileftype #显示所有’文件类型’关联ftype exefile #显示exefile类型关联的命令行，结果显示 exefile&#x3D;&quot;%1&quot; %*assoc .txt&#x3D;Word.Document.8设置.txt为word类型的文档，可以看到.txt文件的图标都变了assoc .txt&#x3D;txtfile恢复.txt的正确关联ftype exefile&#x3D;&quot;%1&quot; %*恢复 exefile 的正确关联如果该关联已经被破坏，可以运行 command.com ，再输入这条命令 36 pushd 和 popd切换当前目录@echo offc: &amp; cd\\ &amp; md mp3 #在 C:\\ 建立 mp3 文件夹md d:\\mp4 #在 D:\\ 建立 mp4 文件夹cd &#x2F;d d:\\mp4 #更改当前目录为 d:\\mp4pushd c:\\mp3 #保存当前目录，并切换当前目录为 c:\\mp3popd #恢复当前目录为刚才保存的 d:\\mp4 37 for循环命令这个比较复杂，请对照 for&#x2F;? 来看for %%i in (c: d: e: f:) do echo %%i依次调用小括号里的每个字符串，执行 do 后面的命令注意%%i，在批处理中 for 语句调用参数用2个%默认的字符串分隔符是&quot;空格键&quot;，&quot;Tab键&quot;，&quot;回车键&quot;for %%i in (.txt) do find &quot;abc&quot; %%i对当前目录里所有的txt文件执行 find 命令for &#x2F;r . %%i in (.txt) do find &quot;abc&quot; %%i在当前目录和子目录里所有的.txt文件中搜索包含 abc 字符串的行for &#x2F;r . %%i in (.) do echo %%~pni显示当前目录名和所有子目录名，包括路径，不包括盘符for &#x2F;r d:\\mp3 %%i in (.mp3) do echo %%i&gt;&gt;d:\\mp3.txt把 d:\\mp3 及其子目录里的mp3文件的文件名都存到 d:\\mp3.txt 里去for &#x2F;l %%i in (2,1,8) do echo %%i生成2345678的一串数字，2是数字序列的开头，8是结尾，1表示每次加1for &#x2F;f %%i in (‘set’) do echo %%i对 set 命令的输出结果循环调用，每行一个for &#x2F;f &quot;eol&#x3D;P&quot; %%i in (‘set’) do echo %%i取 set 命令的输出结果，忽略以 P 开头的那几行for &#x2F;f %%i in (d:\\mp3.txt) do echo %%i显示 d:\\mp3.txt 里的每个文件名，每行一个，不支持带空格的名称for &#x2F;f &quot;delims&#x3D;&quot; %%i in (d:\\mp3.txt) do echo %%i显示 d:\\mp3.txt 里的每个文件名，每行一个，支持带空格的名称for &#x2F;f &quot;skip&#x3D;5 tokens&#x3D;4&quot; %%a in (‘dir’) do echo %%a对 dir 命令的结果，跳过前面5行，余下的每行取第4列每列之间的分隔符为默认的&quot;空格&quot;可以注意到 dir 命令输出的前5行是没有文件名的for &#x2F;f &quot;tokens&#x3D;1,2,3 delims&#x3D;- &quot; %%a in (‘date &#x2F;t’) do ( echo %%a echo %%b echo %%c )对 date &#x2F;t 的输出结果，每行取1、2、3列第一列对应指定的 %%a ，后面的 %%b 和 %%c 是派生出来的，对应其它列分隔符指定为 - 和&quot;空格&quot;，注意 delims&#x3D;- 后面有个&quot;空格&quot;其中 tokens&#x3D;1,2,3 若用 tokens&#x3D;1-3 替换，效果是一样的for &#x2F;f &quot;tokens&#x3D;2 delims&#x3D;- &quot; %%a in (‘date &#x2F;t’) do echo %%b取第2列给 %%a ，其后的列都给 %%b 38 subst (外部命令)映射磁盘。subst z: \\server\\d #这样输入z:就可以访问\\server\\d了subst z: &#x2F;d #取消该映射subst #显示目前所有的映时 39 xcopy (外部命令)文件拷贝xcopy d:\\mp3 e:\\mp3 &#x2F;s&#x2F;e&#x2F;i&#x2F;y复制 d:\\mp3 文件夹、所有子文件夹和文件到 e:\\ ，覆盖已有文件加 &#x2F;i 表示如果 e:\\ 没有 mp3 文件夹就自动新建一个，否则会有询问","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"windows bat脚本","slug":"windows-bat脚本","permalink":"https://anarckk.github.io/myvolantis/tags/windows-bat%E8%84%9A%E6%9C%AC/"}]},{"title":"spring-boot-starter-log4j集成","slug":"2019-12/27-spring-boot-starter-log4j集成","date":"2019-12-27T01:12:57.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/27/2019-12/27-spring-boot-starter-log4j集成/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/27/2019-12/27-spring-boot-starter-log4j%E9%9B%86%E6%88%90/","excerpt":"","text":"一、引入依赖SpringBoot默认使用slf4j面板日志，所以只需要导入依赖包，它自动会找到实现类。 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-log4j&lt;/artifactId&gt;&lt;/dependency&gt; 二、配置在resource下的application.properties中加入配置 12# 日志logging.config=classpath:log4j.xml log4j.xml文件，下面的配置是每10M分一个新文件。info类和error类日志分开 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE log4j:configuration SYSTEM &quot;http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/xml/doc-files/log4j.dtd&quot;&gt;&lt;log4j:configuration xmlns:log4j=&#x27;http://jakarta.apache.org/log4j/&#x27; &gt; &lt;!-- 控制台输出 --&gt; &lt;appender name=&quot;CONSOLE&quot; class=&quot;org.apache.log4j.ConsoleAppender&quot;&gt; &lt;param name=&quot;Target&quot; value=&quot;System.out&quot; /&gt; &lt;param name=&quot;Threshold&quot; value=&quot;DEBUG&quot; /&gt; &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss sss&#125;[%-p][%-c][line:%-L] \\r\\n %m%n&quot; /&gt; &lt;/layout&gt; &lt;!-- 以下是过滤一些不需要输出的log信息 --&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;new a seq no spend&quot; /&gt; &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;false&quot; /&gt; &lt;/filter&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;new hi[type=&quot; /&gt; &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;false&quot; /&gt; &lt;/filter&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;FileTransfer.execCommand()&quot; /&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!--文件输出 按照文件大小滚动文件 --&gt; &lt;appender name=&quot;InfoFileAppender&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt; &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;Threshold&quot; value=&quot;INFO&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;logs/info.log&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10MB&quot; /&gt; &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;15&quot; /&gt; &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss sss&#125;[%-p][%-c][line:%-L] \\r\\n %m%n&quot; /&gt; &lt;/layout&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;new a seq no spend&quot; /&gt; &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;false&quot; /&gt; &lt;/filter&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;new hi[type=&quot; /&gt; &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;false&quot; /&gt; &lt;/filter&gt; &lt;filter class=&quot;org.apache.log4j.varia.StringMatchFilter&quot;&gt; &lt;param name=&quot;StringToMatch&quot; value=&quot;FileTransfer.execCommand()&quot; /&gt; &lt;param name=&quot;AcceptOnMatch&quot; value=&quot;false&quot; /&gt; &lt;/filter&gt; &lt;/appender&gt; &lt;!-- 错误输出 过滤出错误日志信息 --&gt; &lt;appender name=&quot;errorFileAppender&quot; class=&quot;org.apache.log4j.RollingFileAppender&quot;&gt; &lt;param name=&quot;Encoding&quot; value=&quot;UTF-8&quot; /&gt; &lt;param name=&quot;Append&quot; value=&quot;true&quot; /&gt; &lt;param name=&quot;Threshold&quot; value=&quot;ERROR&quot; /&gt; &lt;param name=&quot;File&quot; value=&quot;logs/error.log&quot; /&gt; &lt;param name=&quot;MaxFileSize&quot; value=&quot;10MB&quot; /&gt; &lt;param name=&quot;MaxBackupIndex&quot; value=&quot;4&quot; /&gt; &lt;layout class=&quot;org.apache.log4j.PatternLayout&quot;&gt; &lt;param name=&quot;ConversionPattern&quot; value=&quot;%d&#123;yyyy-MM-dd HH:mm:ss sss&#125;[%-p][%-c][line:%-L] \\r\\n %m%n&quot; /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;!-- 根loggr --&gt; &lt;root&gt; &lt;priority value=&quot;INFO&quot; /&gt; &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt; &lt;appender-ref ref=&quot;InfoFileAppender&quot; /&gt; &lt;appender-ref ref=&quot;errorFileAppender&quot; /&gt; &lt;/root&gt;&lt;/log4j:configuration&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"通过RestTemplate向服务器发送Rest请求","slug":"2019-12/26-通过RestTemplate向服务器发送Rest请求","date":"2019-12-26T09:27:38.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/26/2019-12/26-通过RestTemplate向服务器发送Rest请求/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/26/2019-12/26-%E9%80%9A%E8%BF%87RestTemplate%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81Rest%E8%AF%B7%E6%B1%82/","excerpt":"","text":"1234567891011121314151617181920212223242526272829package com.thok.trading.server.util;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.web.client.RestTemplate;/** * @Auther: Zhangzhiwei * @Date: 2018/9/12 11:43 * @Description: */public class RestTemplateUtil &#123; public static String sendPost(RestTemplate restTemplate,String url,String jsonBody) &#123; HttpHeaders headers = new HttpHeaders(); MediaType type = MediaType.parseMediaType(&quot;application/json; charset=UTF-8&quot;); headers.setContentType(type); headers.add(&quot;Accept&quot;, MediaType.APPLICATION_JSON_UTF8.toString()); HttpEntity&lt;String&gt; formEntity = new HttpEntity&lt;String&gt;(jsonBody, headers); return restTemplate.postForObject(url, formEntity, String.class); &#125;&#125;// 在spring bean中可以注入 RestTemplate，然后再调用上面的util@Autowiredprivate RestTemplate restTemplate;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"},{"name":"springframework","slug":"springframework","permalink":"https://anarckk.github.io/myvolantis/tags/springframework/"},{"name":"用java发起http","slug":"用java发起http","permalink":"https://anarckk.github.io/myvolantis/tags/%E7%94%A8java%E5%8F%91%E8%B5%B7http/"}]},{"title":"shiro依赖","slug":"2019-12/26-shiro依赖","date":"2019-12-26T06:01:26.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/26/2019-12/26-shiro依赖/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/26/2019-12/26-shiro%E4%BE%9D%E8%B5%96/","excerpt":"","text":"shiro可以在独立的环境中使用，也可以集成在spring中。但是与springBoot的rest风格接口整合却会发现非常的困难。有很多不合适的地方。 这是和spring整合时使用的，支持权限校验错误指定重定向到指定url 12345&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt; &lt;version&gt;1.4.0&lt;/version&gt;&lt;/dependency&gt; 这是在独立应用中使用的依赖，在独立应用中需要考虑到，shiro使用了slf4j日志框架，所以需要额外提供实现类的依赖包。 123456789101112&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-core --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-core&lt;/artifactId&gt; &lt;version&gt;1.4.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Shiro uses SLF4J for logging. We&#x27;ll use the &#x27;simple&#x27; binding in this example app. See http://www.slf4j.org for more info. --&gt;&lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt; &lt;version&gt;1.6.1&lt;/version&gt;&lt;/dependency&gt; 在spring boot启动器 123456&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring-boot-web-starter --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt; &lt;artifactId&gt;shiro-spring-boot-web-starter&lt;/artifactId&gt; &lt;version&gt;1.4.2&lt;/version&gt;&lt;/dependency&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"dubbo的重要原理","slug":"底层原理/dubbo的重要原理","date":"2019-12-25T06:44:08.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/25/底层原理/dubbo的重要原理/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/25/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/dubbo%E7%9A%84%E9%87%8D%E8%A6%81%E5%8E%9F%E7%90%86/","excerpt":"","text":"https://blog.csdn.net/Java_fenxiang/article/details/80695068 消费端的初始化过程1、把服务引用的信息封装成URL并注册到zk注册中心;2、监听注册中心的服务的上下线;3、连接服务提供端，创建NettyClient对象;4、将这些信息包装成DubboInvoker消费端的调用链，创建消费端Invoker实例的服务代理并返回; 消费端的服务引用过程经过负载均衡策略，调用提供者; 2、选择其中一个服务的URL与提供者netty建立连接，使用ProxyFactory 创建远程通信，或者本地通信的，Invoker发到netty服务端; 3、服务器端接收到该Invoker信息后，找到对应的本地Invoker，处理Invocation请求; 4、获取异步，或同步处理结果; 异步 不需要返回值：直接调用ExchangeClient.send()方法; 同步 需要返回值：使用ExchangeClient.request()方法，返回一个ResponseFuture，一直阻塞到服务端返回响应结果;","categories":[{"name":"底层原理","slug":"底层原理","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"dubbo","slug":"dubbo","permalink":"https://anarckk.github.io/myvolantis/tags/dubbo/"}]},{"title":"docker-compose","slug":"2019-12/23-docker-compose","date":"2019-12-23T06:46:36.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/23/2019-12/23-docker-compose/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/23/2019-12/23-docker-compose/","excerpt":"","text":"Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。 Compose 使用的三个步骤： 使用 Dockerfile 定义应用程序的环境。 使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。 最后，执行 docker-compose up 命令来启动并运行整个应用程序。 安装 docker-composecurl下载 script1sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 手动下载 https://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x86_64 设置软链接到 &#x2F;usr&#x2F;bin 中安装，方便在任意位置执行 script1234567# 增加可执行权限$ sudo chmod +x /usr/local/bin/docker-compose# 创建软链$ ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose# 测试是否安装成功$ docker-compose --versioncker-compose version 1.24.1, build 4667896b 配置范例docker-compose.yml 的配置案例，使用 docker-compose pull 可以预先拉取还没有的镜像，使用 docker-compose up 可以立即前台执行本目录下的 docker-compose.yml 文件。docker-compose up -d 立即后台执行。 1234567891011121314version: &quot;2&quot; services: mysql: network_mode: &quot;host&quot; environment: MYSQL_ROOT_PASSWORD: &quot;123456&quot; MYSQL_USER: &#x27;root&#x27; MYSQL_PASS: &#x27;root123456&#x27; image: &quot;docker.io/mysql:5.7&quot; restart: always volumes: - &quot;/data/mysql/data:/var/lib/mysql&quot; - &quot;/data/mysql/conf/my.cnf:/etc/my.cnf&quot; container_name: mysql 更多配置参考： https://www.runoob.com/docker/docker-compose.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"移位操作","slug":"底层硬核/移位操作","date":"2019-12-19T13:46:51.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/19/底层硬核/移位操作/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/19/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/%E7%A7%BB%E4%BD%8D%E6%93%8D%E4%BD%9C/","excerpt":"","text":"介绍 在位移方向上，有左移和右移。在移位策略上，有逻辑移位和算术移位。两个维度互相组合有4中组合。 逻辑左移&#x3D;算数左移，右边统一添0逻辑右移，左边补上符号位算术右移，左边补 0 e.g:1010101010，其中[]是添加的位 逻辑左移一位：010101010[0]算数左移一位：010101010[0]逻辑右移一位：[0]101010101算数右移一位：[1]101010101 左移 首先，左移运算会溢出符号位，负数在左移之后可能会变成正数。在小于变量容器一半的变量可以通过左移一位来做乘2的运算。在不考虑溢出的情况下，其左移后的数与左移前的数关系如下： 12345a &lt;&lt; 1 =&gt; a = a * 2^1;a &lt;&lt; 2 =&gt; a = a * 2^2;a &lt;&lt; 3 =&gt; a = a * 2^3;...a &lt;&lt; x =&gt; a = a * 2^x; 逻辑右移和算术右移 逻辑右移也有和左移一样的规律，但是除法会丢失小数点精度 12// 逻辑右移a &gt;&gt; x =&gt; a = a ÷ 2^x; 1234将 1010 1010 做逻辑右移1010 1010,-861101 0101,-431110 1010,-22 用 java 做算术右移，要小心 byte 在算术右移中会自动转型为 int ，高位补1，导致的byte计算时逻辑右移和算术右移结果一致。 1234567891011121314/* * 1010 1010,-86 * 1101 0101,-43 * 1110 1010,-22 * 这一定是因为 byte 在做运算时被转型为了 int，在转型为 int时采用了高位补1的补码算法，导致算术移位之后结果和逻辑移位一样 */public static void test2() &#123; byte a = (byte) 0xaa; System.out.println(byteBinary(a) + &quot;,&quot; + a); a = (byte) (a &gt;&gt;&gt; 1); System.out.println(byteBinary(a) + &quot;,&quot; + a); a = (byte) (a &gt;&gt;&gt; 1); System.out.println(byteBinary(a) + &quot;,&quot; + a);&#125;","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"二进制","slug":"二进制","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"}]},{"title":"shell-中的内置变量","slug":"2019-12/18-shell-中的内置变量","date":"2019-12-18T07:17:11.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/18/2019-12/18-shell-中的内置变量/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/18/2019-12/18-shell-%E4%B8%AD%E7%9A%84%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F/","excerpt":"","text":"shell脚本中有以下内置变量: script1234567$0: 脚本本身文件名称$1: 命令行第一个参数，$2为第二个，以此类推$*: 所有参数列表$@: 所有参数列表$#: 参数个数$$: 脚本运行时的PID$?: 脚本退出码 ∗与@的区别 当命令行为test.sh 1 2 3“$*“表示”1 2 3”“$@“表示”1” “2” “3”二者没有被引号括起来时是一样的都为”1 2 3”，只有当被引号括起来后才表现出差异","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://anarckk.github.io/myvolantis/tags/shell/"}]},{"title":"sql更新字段时替换部分字符","slug":"2019-12/18-sql更新字段时替换部分字符","date":"2019-12-18T06:41:52.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/18/2019-12/18-sql更新字段时替换部分字符/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/18/2019-12/18-sql%E6%9B%B4%E6%96%B0%E5%AD%97%E6%AE%B5%E6%97%B6%E6%9B%BF%E6%8D%A2%E9%83%A8%E5%88%86%E5%AD%97%E7%AC%A6/","excerpt":"","text":"使用 mysql 的聚合函数 replace(字段,原部分字符串,新部分字符串)，在进行数据库操作时，一定要检查sql语句，我这里把images_url漏写成image_url，结果images_url变成了image_url里的内容。 script1UPDATE pro_product SET images_url=REPLACE(images_url,&#x27;192.168.1.102:8018&#x27;,&#x27;101.37.162.212:9028&#x27;) WHERE INSTR(images_url, &#x27;192.168.1.102:8018&#x27;);","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"vbs脚本入门","slug":"2019-12/16-vbs脚本入门","date":"2019-12-16T12:37:03.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/16/2019-12/16-vbs脚本入门/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/16/2019-12/16-vbs%E8%84%9A%E6%9C%AC%E5%85%A5%E9%97%A8/","excerpt":"","text":"vsb介绍 vbs全称是VBScript,是微软开发的一门脚本语言，其目的是为了更好的管理windows操作系统。当然，VBScript同样可以像JavaScript一样嵌入到HTML中，不可否认，它和Visual Basic(VB)是如此相似，或者说几乎完全一样。 原理 vbs 是通过位于 C:\\Windows\\System32 下的 wscript.exe 解释器，来解释执行的。vbs 这个扩展名和 wscript.exe 的路径被写入到了环境变量。在cmd中输入命令：set，可以看到全部的系统环境变量。其中有个叫 PATHEXT 的环境变量，定义了 vbs 扩展名可直接执行，而 Path 这个环境变量则定义了 C:\\Windows\\System32 路径（%SystemRoot%\\System32）。 PATHEXT环境变量简介在网上找了点资料看一下，简单介绍介绍PATHEXT这个环境变量，顺便就当练习英文了。 Windows XP’s Run commandprovides a quick and easy way for experienced users to open fileswithout the need to navigate through the Start menu or browsefolders looking for a file. For example, if you type cmd.exe at theRun command and press Enter, a Command Prompt windows will open.Type msconfig.exe and the System Configuration Utility does thesame.You may also be aware of thefact that its not always necessary to enter certain file extensionswhen using the Run command. For example, entering just the filenameportion of the command - say, cmd rather than cmd.exe - if OKbecause the EXE file extension is one of those tried by XP when anextension isn’t supplied. XP will attempt to use a number of fileextensions when you don’t provide one, as dictated byit’s declared PATHEXTvariables.By default, the followingPATHEXT system variables are declared by XP:.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH. One notable onethat isn’t present is the .MSC extension used by saved MMCconsoles. If you want pre-built consoles like the Services MMC toopen without needing to type its full filename - services.msc - atthe Run command, then you’ll need to add .MSC to the XP’s PATHEXTvariable.To add a new file extensionto XP’s PATHEXT system variable, follow these steps:1. Open the System applet inControl Panel.2. Click the Advanced tab,and then click the Environment Variables button.3. Double-click the PATHEXTvariable in the System variables section and then clickEdit.4. After the .WSH entry,type a semi-colon and then type .MSC (no spaces required) and thenclick OK.5. Reboot your system andthen attempt to open the Services MMC from the Run command bysimply typing services and then click OK.WindowsXP的“运行”命令为一些有经验的用户提供了一个简单快速的方法来打开文件，而不再需要通过“开始”目录，或在文件夹中寻找文件。例如：当我再“运行”窗口中输入cmd.exe 并点击确定时，命令行窗口就直接被打开了。同样的，输入 msconfig.exe后，可以直接打开“系统配置”界面。其实很多人都知道，当使用“运行”命令时，并不需要总是输入某些文件的扩展名的，例如只输入文件名部分，用cmd代替cmd.exe即可。如果这样可以，那是因为EXE文件扩展名是XP中的可靠扩展名而无须提供。当你没有输入扩展名时，XP会尝试几种默认扩展名，这些XP默认的扩展名就在PATHEXT变量中声明。PATHEXT系统变量默认的声明如下：.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH。需要注意的是 .MSC扩展名并不在此之列。这个后缀的文件用来打开XP的管理控制台。如果你希望打开类似Services这类MMC文件，而不在“运行”窗口输入文件全名(services.msc)，那么就需要将.MSC添加到XP的PATHEXT变量中。要增加一个新的文件扩展名到XP的PATHEXT变量中的步骤如下：1、打开控制面板 - 性能和维护 - 系统2、点击“高级”，再点击“环境变量”按钮3、在系统变量列表中，双击PATHEXT变量并点击“编辑”按钮4、在.WSH后面输入一个分号，再输入.MSC，然后点击“确定”5、重启系统后尝试不加扩展名打开services.msc其实对于PATHEXT的性质来说，还可以用来做一些其他的用途，例如在网上看到的一个，不希望别人在自己机子上使用ping、net等命令，就可以通过修改PATHEXT中的文件扩展名排列顺序来实现，主要就是因为XP系统在自己匹配默认扩展名是是根据PATHEXT中的排列顺序依次进行的，简单讲一讲做法：首先将PATHEXT中的扩展名排列顺序修改为.BAT排在最前，然后创建ping.bat、net.bat文件，存放到%SystemRoot%\\system32(即存放ping.exe、net.exe的地方)，bat中的内容如下：@echo offecho ‘%0’ 不是内部或外部命令，也不是可运行的程序echo 或批处理文件。这样，当在cmd下输入ping之后，由于未加后缀，导致windows自己匹配，在首先匹配到ping.bat之后执行该文件，在前段显示该命令不存在的信息，这样就可以简单欺骗不熟悉系统的用户(比如说我)。当然自己用的时候，输全ping.exe来执行命令就可以了。 HelloWorldscript1msgbox &quot;HelloWorld&quot;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"vbs","slug":"vbs","permalink":"https://anarckk.github.io/myvolantis/tags/vbs/"}]},{"title":"Docker容器开机自动启动","slug":"2019-12/16-Docker容器开机自动启动","date":"2019-12-16T00:32:02.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/16/2019-12/16-Docker容器开机自动启动/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/16/2019-12/16-Docker%E5%AE%B9%E5%99%A8%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8/","excerpt":"1）在使用docker run启动容器时，使用–restart参数来设置： –restart具体参数值详细信息： no - 容器退出时，不重启容器； on-failure - 只有在非0状态退出时才从新启动容器； always - 无论退出状态是如何，都重启容器； 还可以在使用on - failure策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。 docker run –restart&#x3D;on-failure:10 redis 2）如果创建时未指定 –restart&#x3D;always ,可通过update 命令 docker update –restart&#x3D;always xxx 作者：吴龙华Tester链接：https://www.jianshu.com/p/b07045ba9f7d来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","text":"1）在使用docker run启动容器时，使用–restart参数来设置： –restart具体参数值详细信息： no - 容器退出时，不重启容器； on-failure - 只有在非0状态退出时才从新启动容器； always - 无论退出状态是如何，都重启容器； 还可以在使用on - failure策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新启动容器。 docker run –restart&#x3D;on-failure:10 redis 2）如果创建时未指定 –restart&#x3D;always ,可通过update 命令 docker update –restart&#x3D;always xxx 作者：吴龙华Tester链接：https://www.jianshu.com/p/b07045ba9f7d来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"springboot传参中对LocalDateTime进行序列化","slug":"2019-12/15-springboot传参中对LocalDateTime进行序列化","date":"2019-12-15T14:48:04.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/15/2019-12/15-springboot传参中对LocalDateTime进行序列化/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/15/2019-12/15-springboot%E4%BC%A0%E5%8F%82%E4%B8%AD%E5%AF%B9LocalDateTime%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"在springboot中对LocalDateTime序列化有好几种方法，但是目前只试过一种方法可用，就是在对象字段上加上注解。全局上生效的目前还不知道该怎么写。怎么写都不对。所以，应该多了解了解底层才能懂的该怎么办。 123@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)@ApiModelProperty(value = &quot;更新时间&quot;, example = &quot;2019-12-15 22:45:58&quot;)private LocalDateTime updateTime;","text":"在springboot中对LocalDateTime序列化有好几种方法，但是目前只试过一种方法可用，就是在对象字段上加上注解。全局上生效的目前还不知道该怎么写。怎么写都不对。所以，应该多了解了解底层才能懂的该怎么办。 123@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)@ApiModelProperty(value = &quot;更新时间&quot;, example = &quot;2019-12-15 22:45:58&quot;)private LocalDateTime updateTime;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"sql如果不存在就建表和如果不存库则建库","slug":"2019-12/15-sql如果不存在就建表和如果不存库则建库","date":"2019-12-15T12:37:45.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/15/2019-12/15-sql如果不存在就建表和如果不存库则建库/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/15/2019-12/15-sql%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%AD%98%E5%9C%A8%E5%B0%B1%E5%BB%BA%E8%A1%A8%E5%92%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%AD%98%E5%BA%93%E5%88%99%E5%BB%BA%E5%BA%93/","excerpt":"","text":"如果库不存在就建库1Create Database If Not Exists elegant_cloud Character Set UTF8; 如果表不存在就建表12345678910111213CREATE TABLE If Not Exists elegant_cloud.user( id CHAR(32) NOT NULL DEFAULT &#x27;&#x27; PRIMARY KEY COMMENT &#x27;主键&#x27;, full_name VARCHAR(100) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;姓名&#x27;, email VARCHAR(300) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;邮箱&#x27;, password VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;密码&#x27;, type VARCHAR(10) DEFAULT &#x27;USER&#x27; COMMENT &#x27;用户类型&#x27;, dr tinyint DEFAULT 0 COMMENT &#x27;是否已删除&#x27;, create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;, update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;, create_by CHAR(32) DEFAULT &#x27;&#x27; COMMENT &#x27;创建人&#x27;, update_by CHAR(32) DEFAULT &#x27;&#x27; COMMENT &#x27;更新人&#x27;) COMMENT &#x27;用户表&#x27;;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"paxos一致性算法-维基百科","slug":"中层算法/2019-12-12-paxos一致性算法-维基百科","date":"2019-12-12T05:55:12.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/12/中层算法/2019-12-12-paxos一致性算法-维基百科/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/12/%E4%B8%AD%E5%B1%82%E7%AE%97%E6%B3%95/2019-12-12-paxos%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95-%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/","excerpt":"","text":"https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95","categories":[{"name":"中层算法","slug":"中层算法","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%AD%E5%B1%82%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"paxos","slug":"paxos","permalink":"https://anarckk.github.io/myvolantis/tags/paxos/"}]},{"title":"关于${}占位符在springboot中失效的问题","slug":"2019-12/11-关于-占位符在springboot中失效的问题","date":"2019-12-11T01:12:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/11/2019-12/11-关于-占位符在springboot中失效的问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/11/2019-12/11-%E5%85%B3%E4%BA%8E-%E5%8D%A0%E4%BD%8D%E7%AC%A6%E5%9C%A8springboot%E4%B8%AD%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"原因分析在使用maven-resources-plugin插件时，发现${}做资源替换不生效。怎么设置都不生效。我的设置已经和文档上的一样了还是不生效。 今天终于在一篇博客的启发下，把${}改成@@，这样终于生效了。于是来查找不生效的原因。 原来插件依赖于&lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;这个配置，而springboot把它给改成了@。 那换回来行不行呢？我还是建议不要换回来。因为springboot也需要这个${}占位符用于环境变量注入到实例Bean里。所以，${}要么给插件用，要么给springboot用。","text":"原因分析在使用maven-resources-plugin插件时，发现${}做资源替换不生效。怎么设置都不生效。我的设置已经和文档上的一样了还是不生效。 今天终于在一篇博客的启发下，把${}改成@@，这样终于生效了。于是来查找不生效的原因。 原来插件依赖于&lt;resource.delimiter&gt;@&lt;&#x2F;resource.delimiter&gt;这个配置，而springboot把它给改成了@。 那换回来行不行呢？我还是建议不要换回来。因为springboot也需要这个${}占位符用于环境变量注入到实例Bean里。所以，${}要么给插件用，要么给springboot用。 解决方法一： 在pom.xml里面添加如下内容 123&lt;properties&gt; &lt;resource.delimiter&gt;$&#123;&#125;&lt;/resource.delimiter&gt;&lt;/properties&gt; 方法二： application.properties里面不用${}，改成@ 12345spring.datasource.url= @db.url@spring.datasource.username=@db.username@spring.datasource.password=@db.password@spring.datasource.driver-class-name=@db.driverClassName@spring.datasource.validationQuery=@db.validationQuery@ 方法三： pom.xml不继承spring-boot-starter-parent，dependency里面配置全部的依赖和版本号（继承了之后，很多依赖不用写version） 方法四： 把 12345&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt; 改成 1234567891011&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;version&gt;1.5.9.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt; 参考来源https://www.cnblogs.com/xiang--liu/p/11430219.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"centos7里安装frpc（详细教程）","slug":"2019-12/10-centos7里安装frpc（详细教程）","date":"2019-12-10T13:06:50.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/10/2019-12/10-centos7里安装frpc（详细教程）/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/10/2019-12/10-centos7%E9%87%8C%E5%AE%89%E8%A3%85frpc%EF%BC%88%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%89/","excerpt":"","text":"安装方法这次打算用wget从github上手动下载下来。然后放到 &#x2F;usr&#x2F;bin&#x2F;frpc 里，配置文件放在 &#x2F;etc&#x2F;frp&#x2F;frpc.ini 里。然后用 systemctl 管理 frpc。本次算对安装 frpc 做一个总结。 从 github 上下载 frpcscript12cd /usr/localwget --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.30.0/frp_0.30.0_linux_amd64.tar.gz 上面一种方法速度太慢了，直接从宿主机下载下来，然后拷贝到 &#x2F;usr&#x2F;local 底下 解压script1234567891011121314[root@localhost local]# tar -zxvf frp_0.30.0_linux_amd64.tar.gz frp_0.30.0_linux_amd64/frp_0.30.0_linux_amd64/frps_full.inifrp_0.30.0_linux_amd64/frps.inifrp_0.30.0_linux_amd64/frpcfrp_0.30.0_linux_amd64/frpc_full.inifrp_0.30.0_linux_amd64/frpsfrp_0.30.0_linux_amd64/LICENSEfrp_0.30.0_linux_amd64/frpc.inifrp_0.30.0_linux_amd64/systemd/frp_0.30.0_linux_amd64/systemd/frpc@.servicefrp_0.30.0_linux_amd64/systemd/frpc.servicefrp_0.30.0_linux_amd64/systemd/frps.servicefrp_0.30.0_linux_amd64/systemd/frps@.service 原来安装包里已经有了systemd的配置文件了，看下 script123456789101112131415[root@localhost systemd]# cat frpc.service [Unit]Description=Frp Client ServiceAfter=network.target[Service]Type=simpleUser=nobodyRestart=on-failureRestartSec=5sExecStart=/usr/bin/frpc -c /etc/frp/frpc.iniExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.ini[Install]WantedBy=multi-user.target 看起来它的包里，这个文件没有stop的命令，补一下吧 script1ExecStop=/bin/kill $MAINPID 最终文件 script12345678910111213141516[root@localhost systemd]# cat frpc.service [Unit]Description=Frp Client ServiceAfter=network.target[Service]Type=simpleUser=nobodyRestart=on-failureRestartSec=5sExecStart=/usr/bin/frpc -c /etc/frp/frpc.iniExecReload=/usr/bin/frpc reload -c /etc/frp/frpc.iniExecStop=/bin/kill $MAINPID[Install]WantedBy=multi-user.target 将文件复制一下script12cp /usr/local/frp_0.30.0_linux_amd64/frpc /usr/bincp /usr/local/frp_0.30.0_linux_amd64/systemd/frpc.service /usr/lib/systemd/system 配置文件在&#x2F;etc&#x2F;frp下新建文件frpc.ini,里面放上配置文件 启动这个应该很熟了。systemctl 相关的 start stop restart 三个命令, enable 和 disable 开机启动和开机不启动","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"},{"name":"frpc","slug":"frpc","permalink":"https://anarckk.github.io/myvolantis/tags/frpc/"}]},{"title":"maven内置变量对应目录","slug":"2019-12/10-maven内置变量对应目录","date":"2019-12-10T07:05:03.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/10/2019-12/10-maven内置变量对应目录/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/10/2019-12/10-maven%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E5%AF%B9%E5%BA%94%E7%9B%AE%E5%BD%95/","excerpt":"","text":"123456[*]$&#123;basedir&#125; 项目根目录[*]$&#123;project.build.directory&#125; 构建目录，缺省为target[*]$&#123;project.build.outputDirectory&#125; 构建过程输出目录，缺省为target/classes[*]$&#123;project.build.finalName&#125; 产出物名称，缺省为$&#123;project.artifactId&#125;-$&#123;project.version&#125;[*]$&#123;project.packaging&#125; 打包类型，缺省为jar[*]$&#123;project.xxx&#125; 当前pom文件的任意节点的内容 pom中对应元素的值。例如${project.artifactId}对应了元素的值，常用的POM属性包括： ${project.build.sourceDirectory}:项目的主源码目录，默认为src&#x2F;main&#x2F;java&#x2F;. ${project.build.testSourceDirectory}:项目的测试源码目录，默认为&#x2F;src&#x2F;test&#x2F;java&#x2F;. ${project.build.directory}:项目构建输出目录，默认为target&#x2F;. ${project.build.outputDirectory}:项目主代码编译输出目录，默认为target&#x2F;classes&#x2F;. ${project.build.testOutputDirectory}:项目测试代码编译输出目录，默认为target&#x2F;testclasses&#x2F;. ${project.groupId}:项目的groupId. ${project.artifactId}:项目的artifactId. ${project.version}:项目的version,于${version}等价 ${project.build.finalName}:项目打包输出文件的名称，默认为${project.artifactId}${project.version}.","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://anarckk.github.io/myvolantis/tags/maven/"}]},{"title":"maven插件maven-resources-plugin","slug":"2019-12/10-maven插件maven-resources-plugin","date":"2019-12-10T05:35:21.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/10/2019-12/10-maven插件maven-resources-plugin/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/10/2019-12/10-maven%E6%8F%92%E4%BB%B6maven-resources-plugin/","excerpt":"插件的groupdId和artifactId12&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; 介绍Resources插件负责处理项目资源文件并拷贝到输出目录。Maven将main resources和test resources分开，一般main resources关联main source code，而test resources关联test source code。 Resources插件目标有三个： resources:resources，拷贝main resources到main output directory。它绑定了process-resources生命周期阶段，当执行Compiler:compile插件目标前就会执行此阶段。 resources:testResources，拷贝test resources到test output directory。它绑定了process-test-resources生命周期阶段，当执行surefire:test插件目标前就会执行此阶段。 resources:copy-resources，手动拷贝资源到输出目录 可以指定resources插件读取和写入文件的字符编码，比如ASCII,UTF-8或UTF-16。也可以指定${project.build.sourceEncoding}属性。 123&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt;","text":"插件的groupdId和artifactId12&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; 介绍Resources插件负责处理项目资源文件并拷贝到输出目录。Maven将main resources和test resources分开，一般main resources关联main source code，而test resources关联test source code。 Resources插件目标有三个： resources:resources，拷贝main resources到main output directory。它绑定了process-resources生命周期阶段，当执行Compiler:compile插件目标前就会执行此阶段。 resources:testResources，拷贝test resources到test output directory。它绑定了process-test-resources生命周期阶段，当执行surefire:test插件目标前就会执行此阶段。 resources:copy-resources，手动拷贝资源到输出目录 可以指定resources插件读取和写入文件的字符编码，比如ASCII,UTF-8或UTF-16。也可以指定${project.build.sourceEncoding}属性。 123&lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;/properties&gt; 也可以通过指定编码 1234567891011&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 默认情况下，Maven会从项目的src&#x2F;main&#x2F;resources目录下查找资源。如果你的资源不在此目录下，可以用标签指定，同时也支持多个目录。 12345678910&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources1&lt;/directory&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources2&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 有的时候，资源文件中存在变量引用，可以使用标签指定是否替换资源中的变量。变量的来源为pom文件中的标签中定义的变量。也可以在中定义过滤器资源。 1234567891011&lt;build&gt; &lt;filters&gt; &lt;filter&gt;filter-values.properties&lt;/filter&gt; &lt;/filters&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 可能目录下的资源文件都需要被使用，可以使用和来精细控制。 1234567891011121314151617&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.txt&lt;/include&gt; &lt;include&gt;**/*.rtf&lt;/include&gt; &lt;/includes&gt; &lt;excludes&gt; &lt;exclude&gt;**/*.bmp&lt;/exclude&gt; &lt;exclude&gt;**/*.jpg&lt;/exclude&gt; &lt;exclude&gt;**/*.jpeg&lt;/exclude&gt; &lt;exclude&gt;**/*.gif&lt;/exclude&gt; &lt;/excludes&gt; &lt;/resource&gt; &lt;resources&gt;&lt;/build&gt; 如果资源中本来存在${}字符，不需要被替换，可以在$前加\\，并在中使用。 12345678910&lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;escapeString&gt;\\&lt;/escapeString&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;/configuration&gt; &lt;/plugin&gt;&lt;plugins&gt; 另外目录下存在二进制文件，需要排除，也可以在中使用根据后缀来过滤。 1234567891011121314&lt;!-- 过滤后缀为pdf和swf的文件 --&gt;&lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;nonFilteredFileExtensions&gt; &lt;nonFilteredFileExtension&gt;pdf&lt;/nonFilteredFileExtension&gt; &lt;nonFilteredFileExtension&gt;swf&lt;/nonFilteredFileExtension&gt; &lt;/nonFilteredFileExtensions&gt; &lt;/configuration&gt; &lt;/plugin&gt;&lt;plugins&gt; 如果你需要在其他阶段拷贝资源文件，可以使用插件目标copy-resources。 123456789101112131415161718192021222324252627&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt; &lt;version&gt;3.0.2&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;copy-resources&lt;/id&gt; &lt;!-- here the phase you need --&gt; &lt;phase&gt;validate&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;copy-resources&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;outputDirectory&gt;$&#123;basedir&#125;/target/extra-resources&lt;/outputDirectory&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/non-packaged-resources&lt;/directory&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 参考文档： http://maven.apache.org/plugins/maven-resources-plugin/ 关于变量替换变量替换有两种写法 ${xx} 和 @xx@,${xx}这种写法会和springboot起冲突，会不生效。而使用@xx@在springboot中却会生效。 来源https://my.oschina.net/u/2377110/blog/1584204","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://anarckk.github.io/myvolantis/tags/maven/"},{"name":"maven插件","slug":"maven插件","permalink":"https://anarckk.github.io/myvolantis/tags/maven%E6%8F%92%E4%BB%B6/"}]},{"title":"docker容器查看ip地址和端口","slug":"2019-12/10-docker容器查看ip地址和端口","date":"2019-12-10T02:12:08.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/10/2019-12/10-docker容器查看ip地址和端口/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/10/2019-12/10-docker%E5%AE%B9%E5%99%A8%E6%9F%A5%E7%9C%8Bip%E5%9C%B0%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3/","excerpt":"查看ip地址通过查看详细的json配置，里面写着容器的ip地址,docker inspect 会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息 script12345678docker inspect NAMES # 查看容器所有状态信息；docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; ID/NAMES# 查看 容器ip 地址docker inspect --format &#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125;&#x27; NAMES# 容器运行状态 参考来源https://www.cnblogs.com/sharesdk/p/10185931.html","text":"查看ip地址通过查看详细的json配置，里面写着容器的ip地址,docker inspect 会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息 script12345678docker inspect NAMES # 查看容器所有状态信息；docker inspect --format=&#x27;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&#x27; ID/NAMES# 查看 容器ip 地址docker inspect --format &#x27;&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125;&#x27; NAMES# 容器运行状态 参考来源https://www.cnblogs.com/sharesdk/p/10185931.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"vsftpd开启主动模式的配置","slug":"2019-12/10-vsftpd开启主动模式的配置","date":"2019-12-10T01:10:34.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/10/2019-12/10-vsftpd开启主动模式的配置/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/10/2019-12/10-vsftpd%E5%BC%80%E5%90%AF%E4%B8%BB%E5%8A%A8%E6%A8%A1%E5%BC%8F%E7%9A%84%E9%85%8D%E7%BD%AE/","excerpt":"&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf 1234## Enable active modeport_enable=YESconnect_from_port_20=YESftp_data_port=20","text":"&#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf 1234## Enable active modeport_enable=YESconnect_from_port_20=YESftp_data_port=20","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"}]},{"title":"后端返回自定义HTTPStatus状态码的原理","slug":"2019-12/09-后端返回自定义HTTPStatus状态码的原理","date":"2019-12-09T01:42:43.000Z","updated":"2023-06-20T07:48:14.205Z","comments":true,"path":"2019/12/09/2019-12/09-后端返回自定义HTTPStatus状态码的原理/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/09/2019-12/09-%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E8%87%AA%E5%AE%9A%E4%B9%89HTTPStatus%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E5%8E%9F%E7%90%86/","excerpt":"通过自定义异常拦截器，讲程序异常，转化为 org.springframework.http.ResponseEntity.ResponseEntity,这个类允许自定义任意的状态码和错误数据。 代码123456789public void save(BusUser busUser) &#123; BusUser.checkAccountAndPasswordNotNull(busUser); if (busUserRepository.findByAccount(busUser.getAccount()).size() != 0) &#123; throw new ApiException(ErrorType.SAVE_EXIST, &quot;账号已经存在!&quot;); &#125; // 存储的时候，服务器应该再次进行一次 hash，双重哈希，避免数据库泄漏，密码被人拿去登陆 todo busUserRepository.save(busUser); log.info(&quot;增加了一个用户:&quot; + busUser.getAccount());&#125; GlobalExceptionHandler.class 12345678910111213141516171819202122232425262728293031323334package pri.anarckk.common;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import pri.anarckk.common.entity.ErrorEntity;import pri.anarckk.common.exception.ApiException;/** * Created by zzanar on 2019/6/1 * 全局异常事件处理类 */@ControllerAdvicepublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler &#123; private final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class); @ResponseBody @ExceptionHandler public ResponseEntity&lt;ErrorEntity&gt; handleException(Exception e) &#123; if (e instanceof ApiException) &#123; ApiException apiException = (ApiException) e; ErrorType code = apiException.getCode(); apiException.error(logger); return new ResponseEntity&lt;&gt;(new ErrorEntity(code.code(), apiException.getMessage()), code.httpStatus()); &#125; else &#123; logger.error(e.getMessage(), e); return new ResponseEntity&lt;&gt;(new ErrorEntity(ErrorType.UN_KNOW.code(), ErrorType.UN_KNOW.message()), ErrorType.UN_KNOW.httpStatus()); &#125; &#125;&#125;","text":"通过自定义异常拦截器，讲程序异常，转化为 org.springframework.http.ResponseEntity.ResponseEntity,这个类允许自定义任意的状态码和错误数据。 代码123456789public void save(BusUser busUser) &#123; BusUser.checkAccountAndPasswordNotNull(busUser); if (busUserRepository.findByAccount(busUser.getAccount()).size() != 0) &#123; throw new ApiException(ErrorType.SAVE_EXIST, &quot;账号已经存在!&quot;); &#125; // 存储的时候，服务器应该再次进行一次 hash，双重哈希，避免数据库泄漏，密码被人拿去登陆 todo busUserRepository.save(busUser); log.info(&quot;增加了一个用户:&quot; + busUser.getAccount());&#125; GlobalExceptionHandler.class 12345678910111213141516171819202122232425262728293031323334package pri.anarckk.common;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;import pri.anarckk.common.entity.ErrorEntity;import pri.anarckk.common.exception.ApiException;/** * Created by zzanar on 2019/6/1 * 全局异常事件处理类 */@ControllerAdvicepublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler &#123; private final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class); @ResponseBody @ExceptionHandler public ResponseEntity&lt;ErrorEntity&gt; handleException(Exception e) &#123; if (e instanceof ApiException) &#123; ApiException apiException = (ApiException) e; ErrorType code = apiException.getCode(); apiException.error(logger); return new ResponseEntity&lt;&gt;(new ErrorEntity(code.code(), apiException.getMessage()), code.httpStatus()); &#125; else &#123; logger.error(e.getMessage(), e); return new ResponseEntity&lt;&gt;(new ErrorEntity(ErrorType.UN_KNOW.code(), ErrorType.UN_KNOW.message()), ErrorType.UN_KNOW.httpStatus()); &#125; &#125;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"Spring Boot 各版本的Java版本要求","slug":"2019-12/09-Spring-Boot-各版本的Java版本要求","date":"2019-12-09T01:18:06.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/09/2019-12/09-Spring-Boot-各版本的Java版本要求/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/09/2019-12/09-Spring-Boot-%E5%90%84%E7%89%88%E6%9C%AC%E7%9A%84Java%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82/","excerpt":"https://www.cnblogs.com/badtree/articles/9145493.html","text":"https://www.cnblogs.com/badtree/articles/9145493.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"Docker报错 WARNING: IPv4 forwarding is disabled. Networking will not work.","slug":"2019-12/07-Docker报错-WARNING-IPv4-forwarding-is-disabled-Networking-will-not-work","date":"2019-12-07T05:48:12.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/07/2019-12/07-Docker报错-WARNING-IPv4-forwarding-is-disabled-Networking-will-not-work/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/07/2019-12/07-Docker%E6%8A%A5%E9%94%99-WARNING-IPv4-forwarding-is-disabled-Networking-will-not-work/","excerpt":"创建容器的时候报错WARNING: IPv4 forwarding is disabled. Networking will not work. script12docker run -p 3000:3000 liyasthomas/postwoman:latestWARNING: IPv4 forwarding is disabled. Networking will not work. 解决方法script1vim /usr/lib/sysctl.d/00-system.conf 添加如下代码： script1net.ipv4.ip_forward=1 重启network服务 script1systemctl restart network 完成以后，删除错误的容器，再次创建新容器，就不再报错了。","text":"创建容器的时候报错WARNING: IPv4 forwarding is disabled. Networking will not work. script12docker run -p 3000:3000 liyasthomas/postwoman:latestWARNING: IPv4 forwarding is disabled. Networking will not work. 解决方法script1vim /usr/lib/sysctl.d/00-system.conf 添加如下代码： script1net.ipv4.ip_forward=1 重启network服务 script1systemctl restart network 完成以后，删除错误的容器，再次创建新容器，就不再报错了。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"},{"name":"问题解决","slug":"问题解决","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"CentOS7 查看IP、Gateway、DNS、Hostname、网关","slug":"2019-12/07-CentOS7-查看IP、Gateway、DNS、Hostname、网关","date":"2019-12-07T04:22:44.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/07/2019-12/07-CentOS7-查看IP、Gateway、DNS、Hostname、网关/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/07/2019-12/07-CentOS7-%E6%9F%A5%E7%9C%8BIP%E3%80%81Gateway%E3%80%81DNS%E3%80%81Hostname%E3%80%81%E7%BD%91%E5%85%B3/","excerpt":"查看IPscript1ip addr 查看路由script1ip route 查看DNSscript1cat /etc/resolv.conf 查看主机名script1hostname 查看网关script1netstat -rn","text":"查看IPscript1ip addr 查看路由script1ip route 查看DNSscript1cat /etc/resolv.conf 查看主机名script1hostname 查看网关script1netstat -rn","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"}]},{"title":"mybatis解决SQL注入问题","slug":"底层硬核/mybatis解决SQL注入问题","date":"2019-12-07T03:48:58.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/07/底层硬核/mybatis解决SQL注入问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/07/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/mybatis%E8%A7%A3%E5%86%B3SQL%E6%B3%A8%E5%85%A5%E9%97%AE%E9%A2%98/","excerpt":"转载：https://www.cnblogs.com/loveyoulx/p/9526068.html 思考与理解SQL注入本质上，是程序将用户输入的参数当成命令的一部分进行解析，从而使用户可以自由搜索我们的数据库中的记录。 解决方法，是将用户输入的内容进行解析和转义，将用户输入内容中的恶意代码转为普通字符串，从而保护数据库不被攻击。 SQL 注入攻击 SQL注入攻击，简称SQL攻击或注入攻击，是发生于应用程序之数据库层的安全漏洞。简而言之，是在输入的字符串之中注入SQL指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的SQL指令而运行，因此遭到破坏或是入侵。 最常见的就是我们在应用程序中使用字符串联结方式组合 SQL 指令，有心之人就会写一些特殊的符号，恶意篡改原本的 SQL 语法的作用，达到注入攻击的目的。 举个栗子： 比如验证用户登录需要 username 和 password，编写的 SQL 语句如下： 1String querySql = &quot;select * from user where (name = &#x27;&quot;+ username +&quot;&#x27;) and (pw = &#x27;&quot;+ password +&quot;&#x27;);&quot;; username 和 password 字段被恶意填入 1username = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;; 与 1password = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;; 将导致原本的 SQL 字符串被填为： 1select * from user where (name = &#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;) and (pw = &#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;); 实际上运行的 SQL 语句将变成： 1select * from user; 也就是不再需要 username 和 password 账密即达到登录的目的，结果不言而喻。","text":"转载：https://www.cnblogs.com/loveyoulx/p/9526068.html 思考与理解SQL注入本质上，是程序将用户输入的参数当成命令的一部分进行解析，从而使用户可以自由搜索我们的数据库中的记录。 解决方法，是将用户输入的内容进行解析和转义，将用户输入内容中的恶意代码转为普通字符串，从而保护数据库不被攻击。 SQL 注入攻击 SQL注入攻击，简称SQL攻击或注入攻击，是发生于应用程序之数据库层的安全漏洞。简而言之，是在输入的字符串之中注入SQL指令，在设计不良的程序当中忽略了检查，那么这些注入进去的指令就会被数据库服务器误认为是正常的SQL指令而运行，因此遭到破坏或是入侵。 最常见的就是我们在应用程序中使用字符串联结方式组合 SQL 指令，有心之人就会写一些特殊的符号，恶意篡改原本的 SQL 语法的作用，达到注入攻击的目的。 举个栗子： 比如验证用户登录需要 username 和 password，编写的 SQL 语句如下： 1String querySql = &quot;select * from user where (name = &#x27;&quot;+ username +&quot;&#x27;) and (pw = &#x27;&quot;+ password +&quot;&#x27;);&quot;; username 和 password 字段被恶意填入 1username = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;; 与 1password = &quot;1&#x27; OR &#x27;1&#x27;=&#x27;1&quot;; 将导致原本的 SQL 字符串被填为： 1select * from user where (name = &#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;) and (pw = &#x27;1&#x27; or &#x27;1&#x27;=&#x27;1&#x27;); 实际上运行的 SQL 语句将变成： 1select * from user; 也就是不再需要 username 和 password 账密即达到登录的目的，结果不言而喻。 mybatis 解决 SQL 注入问题我们使用 mybatis 编写 SQL 语句时，难免会使用模糊查询的方法，mybatis 提供了两种方式 #{} 和 ${} 。 #{value} 在预处理时，会把参数部分用一个占位符 ? 替代，其中 value 表示接受输入参数的名称。能有效解决 SQL 注入问题 ${} 表示使用拼接字符串，将接受到参数的内容不加任何修饰符拼接在 SQL 中，使用${}拼接 sql，将引起 SQL 注入问题。 举个例子： 1、查询数据库 sample 表 user 中的记录，我们故意使用特殊符号，看能否引起 SQL 注入。使用 mybatis 在 mapper.xml 配置文件中编写 SQL 语句，我们先采用拼接字符串形式，看看结果如何： 1234&lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;!-- 拼接 MySQL,引起 SQL 注入 --&gt; SELECT * FROM user WHERE username LIKE &#x27;%$&#123;value&#125;%&#x27;&lt;/select&gt; 注意在配置文件中编写 SQL 语句时，后边不需要加分号。 调用配置文件，编写测试文件，查询数据库内容，采用特殊符号，引起 SQL 注入： 123456789101112131415@Testpublic void testFindUserByName() throws Exception&#123; SqlSession sqlSession=sqlSessionFactory.openSession(); //创建UserMapper代理对象 UserMapper userMapper=sqlSession.getMapper(UserMapper.class); //调用userMapper的方法 List&lt;User&gt; list=userMapper.findUserByName(&quot;&#x27; or &#x27;1&#x27;=&#x27;1&quot;); sqlSession.close(); System.out.println(list);&#125; 运行结果如下图所示： 可以看到执行语句其实变为了 select * from user ,将user 表中的全部记录打印出来了。发生了 SQL 注入。 2、如果将配置文件中的 SQL 语句改成 #{} 形式，可避免 SQL 注入。 1234&lt;select id=&quot;findUserByName&quot; parameterType=&quot;java.lang.String&quot; resultType=&quot;cn.itcast.mybatis.po.User&quot;&gt; &lt;!-- 使用 SQL concat 语句,拼接字符串,防止 SQL 注入 --&gt; SELECT * FROM USER WHERE username LIKE CONCAT(&#x27;%&#x27;,#&#123;value&#125;,&#x27;%&#x27; )&lt;/select&gt; 再次运行测试程序，控制台输出如下： 可以看到程序中参数部分用 ? 替代了，很好地解决了 SQL 语句的问题，防止了 SQL 注入。查询结果将为空。 用 ？ 代替就能防止 SQL 注入的原理参考这篇博客 https://www.cnblogs.com/greatfish/p/6067849.html 先看下面用占位符来查询的一句话 12345String sql = &quot;select * from administrator where adminname=?&quot;;psm = con.prepareStatement(sql);String s_name =&quot;zhangsan&#x27; or &#x27;1&#x27;=&#x27;1&quot;;psm.setString(1, s_name); 假设数据库表中并没有zhangsan这个用户名， 用plsql运行sql语句，可以查出来所有的用户名，但是在Java中并没有查出任何数据，这是为什么呢？ 首先，setString()的源码中只有方法名字，并没有任何过程性处理， 那么答案肯定出现在Java到数据库这个过程中，也就是mysql和oracle驱动包中，在mysql驱动包中，PreparedStatement继承并实现了jdk中的setString方法， 也就是原因在于数据库厂商帮你解决了这个问题，下面就看看这个方法的具体实现： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889public void setString(int parameterIndex, String x) throws SQLException &#123; // if the passed string is null, then set this column to null if (x == null) &#123; setNull(parameterIndex, Types.CHAR); &#125; else &#123; StringBuffer buf = new StringBuffer((int) (x.length() * 1.1)); buf.append(&#x27;\\&#x27;&#x27;); int stringLength = x.length(); // // Note: buf.append(char) is _faster_ than // appending in blocks, because the block // append requires a System.arraycopy().... // go figure... // for (int i = 0; i &lt; stringLength; ++i) &#123; char c = x.charAt(i); switch (c) &#123; case 0: /* Must be escaped for &#x27;mysql&#x27; */ buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;0&#x27;); break; case &#x27;\\n&#x27;: /* Must be escaped for logs */ buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;n&#x27;); break; case &#x27;\\r&#x27;: buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;r&#x27;); break; case &#x27;\\\\&#x27;: buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;\\\\&#x27;); break; case &#x27;\\&#x27;&#x27;: buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;\\&#x27;&#x27;); break; case &#x27;&quot;&#x27;: /* Better safe than sorry */ if (this.usingAnsiMode) &#123; buf.append(&#x27;\\\\&#x27;); &#125; buf.append(&#x27;&quot;&#x27;); break; case &#x27;\\032&#x27;: /* This gives problems on Win32 */ buf.append(&#x27;\\\\&#x27;); buf.append(&#x27;Z&#x27;); break; default: buf.append(c); &#125; &#125; buf.append(&#x27;\\&#x27;&#x27;); String parameterAsString = buf.toString(); byte[] parameterAsBytes = null; if (!this.isLoadDataQuery) &#123; parameterAsBytes = StringUtils.getBytes(parameterAsString, this.charConverter, this.charEncoding, this.connection .getServerCharacterEncoding(), this.connection .parserKnowsUnicode()); &#125; else &#123; // Send with platform character encoding parameterAsBytes = parameterAsString.getBytes(); &#125; setInternal(parameterIndex, parameterAsBytes); &#125;&#125; 所以转义后的sql为’zhangsan&#39; or &#39;1&#39;&#x3D;&#39;1’;这个时候是查不出来的。","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"},{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"},{"name":"sql注入","slug":"sql注入","permalink":"https://anarckk.github.io/myvolantis/tags/sql%E6%B3%A8%E5%85%A5/"}]},{"title":"windows内核设计微软中文文档","slug":"底层硬核/windows内核设计微软中文文档","date":"2019-12-06T08:47:06.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/06/底层硬核/windows内核设计微软中文文档/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/06/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/windows%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E5%BE%AE%E8%BD%AF%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/","excerpt":"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/kernel/","text":"https://docs.microsoft.com/zh-cn/windows-hardware/drivers/kernel/","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"windows内核编程","slug":"windows内核编程","permalink":"https://anarckk.github.io/myvolantis/tags/windows%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B/"}]},{"title":"指定cmd窗口或tomcat运行窗口的名称","slug":"2019-12/06-指定cmd窗口或tomcat运行窗口的名称","date":"2019-12-06T06:06:24.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/06/2019-12/06-指定cmd窗口或tomcat运行窗口的名称/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/06/2019-12/06-%E6%8C%87%E5%AE%9Acmd%E7%AA%97%E5%8F%A3%E6%88%96tomcat%E8%BF%90%E8%A1%8C%E7%AA%97%E5%8F%A3%E7%9A%84%E5%90%8D%E7%A7%B0/","excerpt":"指定cmd窗口运行时名称 1)直接执行命令：title 窗口名称 2)bat文件中直接加上命令：title 窗口名称 例子： script12title test_ v1java -jar -Dfile.encoding=utf-8 test-1.0.1.jar","text":"指定cmd窗口运行时名称 1)直接执行命令：title 窗口名称 2)bat文件中直接加上命令：title 窗口名称 例子： script12title test_ v1java -jar -Dfile.encoding=utf-8 test-1.0.1.jar 指定tomcat运行窗口的名称 到tomcat的bin文件夹下找到文件 catalina.bat,并打开编辑。 找到下面这一段（我的文件在264行）,找到石灰色标记的[Tomcat]改为你想修改成的名称就可以了。 script123456789:doStartshiftif &quot;%TITLE%&quot; == &quot;&quot; set TITLE=Tomcat-CSset _EXECJAVA=start &quot;%TITLE%&quot; %_RUNJAVA%if not &quot;&quot;%1&quot;&quot; == &quot;&quot;-security&quot;&quot; goto execCmdshiftecho Using Security Managerset &quot;SECURITY_POLICY_FILE=%CATALINA_BASE%\\conf\\catalina.policy&quot;goto execCmd","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"windows server 2008R2","slug":"windows-server-2008R2","permalink":"https://anarckk.github.io/myvolantis/tags/windows-server-2008R2/"},{"name":"服务器运维","slug":"服务器运维","permalink":"https://anarckk.github.io/myvolantis/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"}]},{"title":"iis服务器","slug":"2019-12/06-iis服务器","date":"2019-12-06T05:18:45.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/06/2019-12/06-iis服务器/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/06/2019-12/06-iis%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"iis 的 default web site 默认的本地网站路径 %SystemDrive%\\inetpub\\wwwroot","text":"iis 的 default web site 默认的本地网站路径 %SystemDrive%\\inetpub\\wwwroot","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"iis","slug":"iis","permalink":"https://anarckk.github.io/myvolantis/tags/iis/"}]},{"title":"window自带记事本的傻逼行为","slug":"底层硬核/window自带记事本的傻逼行为","date":"2019-12-05T13:33:24.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/底层硬核/window自带记事本的傻逼行为/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/window%E8%87%AA%E5%B8%A6%E8%AE%B0%E4%BA%8B%E6%9C%AC%E7%9A%84%E5%82%BB%E9%80%BC%E8%A1%8C%E4%B8%BA/","excerpt":"在windows平台下，使用系统的记事本以UTF-8编码格式存储了一个文本文件，但是由于Microsoft开发记事本的团队使用了一个非常怪异的行为来保存UTF-8编码的文件，它们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，所以我们就会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“？”，明明正确的程序一编译就报出语法错误，等等。 下面为一段测试程序，由记事本编辑的文本文件导致文件开头前三个字符乱码。","text":"在windows平台下，使用系统的记事本以UTF-8编码格式存储了一个文本文件，但是由于Microsoft开发记事本的团队使用了一个非常怪异的行为来保存UTF-8编码的文件，它们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，所以我们就会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“？”，明明正确的程序一编译就报出语法错误，等等。 下面为一段测试程序，由记事本编辑的文本文件导致文件开头前三个字符乱码。 1234567891011121314151617181920212223242526272829#include &lt;stdio.h&gt;#define MAX_LEN 100int main()&#123; char strLine[MAX_LEN]; int i = 0; memset(strLine,0x0,MAX_LEN); FILE * fp; fp = fopen(&quot;eng_query.txt&quot;,&quot;r&quot;); if(NULL == fp) &#123; printf(&quot;open file fail.\\n&quot;); return -1; &#125; while(fgets(strLine,MAX_LEN,fp)) &#123; printf(&quot;str = %s&quot;,strLine);//将每行字符串打印出来 for(i=0; i&lt;strlen(strLine); i++)//将每各字符串中的字符以十六进制格式打印出来 &#123; printf(&quot;%x &quot;,strLine[i]); &#125; printf(&quot;\\n\\n&quot;); &#125; fclose(fp); return 0;&#125; 输入文件： 12345678910tsinghua pressmp18evaluating method for the double imagejiaoyuxvshibalancing mechanismhthramplificationbionic optimization algorithma r ltcb 输出文件 1234567891011121314151617181920212223242526272829303132str = 锘縯singhua pressffffffef ffffffbb ffffffbf 74 73 69 6e 67 68 75 61 20 70 72 65 73 astr = mp186d 70 31 38 astr = evaluating method for the double image 76 61 6c 75 61 74 69 6e 67 20 6d 65 74 68 6f 64 20 66 6f 20 74 68 65 20 64 6f 75 62 6c 65 20 69 6d 61 67 65 astr = jiaoyuxvshi6a 69 61 6f 79 75 78 76 73 68 69 astr = balancing mechanism 61 6c 61 6e 63 69 6e 67 20 6d 65 63 68 61 6e 69 73 6d astr = hthr 74 68 72 astr = amplification 6d 70 6c 69 66 69 63 61 74 69 6f 6e astr = bionic optimization algorithm 69 6f 6e 69 63 20 6f 70 74 69 6d 69 7a 61 74 69 6f 6e 20 6c 67 6f 72 69 74 68 6d astr = a r l 20 72 20 6c astr = tcb 63 62 a 我们可以发现文件开头三个字符乱码，每个汉字占用两个字符，因此第4个字符本来为‘t’，也只能乱码显示出来。 因此，可以使用Notepad++代替记事本。需要将Notepad++的默认编码设置为UTF-8 without BOM即可； UTF-8 without BOM 就是正常的utf-8编码了。UTF-8 with BOM 应该就是微软自带记事本的傻逼编码了 来源https://www.cnblogs.com/fnlingnzb-learner/p/5832396.html","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"c语言","slug":"c语言","permalink":"https://anarckk.github.io/myvolantis/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"window记事本","slug":"window记事本","permalink":"https://anarckk.github.io/myvolantis/tags/window%E8%AE%B0%E4%BA%8B%E6%9C%AC/"}]},{"title":"oa项目集成mybatis-plus中遇到的Error querying database.和NullPointerException报错处理","slug":"2019-12/05-oa项目集成mybatis-plus中遇到的Error-querying-database-报错处理","date":"2019-12-05T08:35:51.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/2019-12/05-oa项目集成mybatis-plus中遇到的Error-querying-database-报错处理/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/2019-12/05-oa%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90mybatis-plus%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84Error-querying-database-%E6%8A%A5%E9%94%99%E5%A4%84%E7%90%86/","excerpt":"一切得先从我的操作说起。在集成mybatis-plus过程中，我将 pagehelper-spring-boot-starter 拆成两个依赖包 1234567891011121314151617&lt;!-- 分页插件 --&gt;&lt;!-- &lt;dependency&gt;--&gt;&lt;!-- &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;--&gt;&lt;!-- &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;--&gt;&lt;!-- &lt;version&gt;1.2.5&lt;/version&gt;--&gt;&lt;!-- &lt;/dependency&gt;--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.4&lt;/version&gt;&lt;/dependency&gt;&lt;!-- pagehelper 依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;","text":"一切得先从我的操作说起。在集成mybatis-plus过程中，我将 pagehelper-spring-boot-starter 拆成两个依赖包 1234567891011121314151617&lt;!-- 分页插件 --&gt;&lt;!-- &lt;dependency&gt;--&gt;&lt;!-- &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;--&gt;&lt;!-- &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;--&gt;&lt;!-- &lt;version&gt;1.2.5&lt;/version&gt;--&gt;&lt;!-- &lt;/dependency&gt;--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper&lt;/artifactId&gt; &lt;version&gt;5.1.4&lt;/version&gt;&lt;/dependency&gt;&lt;!-- pagehelper 依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.jsqlparser&lt;/groupId&gt; &lt;artifactId&gt;jsqlparser&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt; 然后在MP分页配置文件中加入mybatis拦截器,在里面注册了ConfigurationCustomizer1234567891011121314151617181920212223242526272829303132333435363738394041package com.thok.myoa.config;import com.baomidou.mybatisplus.autoconfigure.ConfigurationCustomizer;import com.baomidou.mybatisplus.core.MybatisConfiguration;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;import org.mybatis.spring.annotation.MapperScan;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.transaction.annotation.EnableTransactionManagement;/** * Created by fh on 2019/12/4 */@EnableTransactionManagement@Configuration@MapperScan(&quot;com.thok.myoa.**.mapper&quot;)public class MPPaginationConfig &#123; @Bean public PaginationInterceptor paginationInterceptor() &#123; PaginationInterceptor paginationInterceptor = new PaginationInterceptor(); // 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求 默认false // paginationInterceptor.setOverflow(false); // 设置最大单页限制数量，默认 500 条，-1 不受限制 // paginationInterceptor.setLimit(500); return paginationInterceptor; &#125; /** * pagehelper 拦截器 * @return */ @Bean public ConfigurationCustomizer mybatisConfigurationCustomizer() &#123; return new ConfigurationCustomizer() &#123; @Override public void customize(MybatisConfiguration configuration) &#123; configuration.addInterceptor(new com.github.pagehelper.PageInterceptor()); &#125; &#125;; &#125;&#125; 再之后我还遇到了swagger版本不对，一直报错的情况，修好swagger报错之后，在swagger里随便访问了一个借口，然后就报错了… 完整的报错信息123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: java.lang.NullPointerException### Cause: java.lang.NullPointerException at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:78) at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440) at com.sun.proxy.$Proxy89.selectOne(Unknown Source) at org.mybatis.spring.SqlSessionTemplate.selectOne(SqlSessionTemplate.java:159) at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:89) at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:61) at com.sun.proxy.$Proxy92.selectByPrimaryKey(Unknown Source) at com.thok.myoa.service.impl.UserServiceImpl.getUser(UserServiceImpl.java:56) at com.thok.myoa.controller.UserController.getUser(UserController.java:37) at com.thok.myoa.controller.UserController$$FastClassBySpringCGLIB$$9df6857a.invoke(&lt;generated&gt;) at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:747) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:52) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:185) at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) at com.thok.myoa.controller.UserController$$EnhancerBySpringCGLIB$$9077b8c4.getUser(&lt;generated&gt;) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:209) at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:102) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:877) at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:783) at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:991) at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:925) at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:974) at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:877) at javax.servlet.http.HttpServlet.service(HttpServlet.java:661) at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:851) at javax.servlet.http.HttpServlet.service(HttpServlet.java:742) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at com.thok.myoa.config.RequestBodyReadFilter.doFilter(RequestBodyReadFilter.java:19) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:496) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:342) at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:803) at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:790) at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1459) at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) at java.lang.Thread.run(Thread.java:748)Caused by: org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: java.lang.NullPointerException### Cause: java.lang.NullPointerException at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:30) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:149) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:76) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426) ... 80 moreCaused by: java.lang.NullPointerException at com.github.pagehelper.PageInterceptor.intercept(PageInterceptor.java:147) at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) at com.sun.proxy.$Proxy146.query(Unknown Source) at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ... 87 more 遇到这个究极报错之后我决定慢慢debug，报错信息也不清楚，到底是sql语句不行还是，mybatis-plus做的mapper代理出错了。Error querying database. 再从这个方法进去 这个方法是mybatis-plus的判断，误导我了，让我以为是mybatis-plus把操作转换成它自己的getOne api了，我还想mp这么变态。 再走下去，就进入了mybatis拦截器 再走下去就走到了，没错，pagehelper拦截器！ 就是这个dialect是null，所以报了空指针异常。dialect我之前做hibernate集成sqlite的时候遇到了，是方言的意思。我猜就是pageHelper不知道自己现在在什么环境的数据中的原因。 解决方案说起来，其实好简单，pageHelper配置的时候把参数填好就行 123456789101112131415161718192021222324252627/** * pagehelper 拦截器 * * @return */@Beanpublic ConfigurationCustomizer mybatisConfigurationCustomizer() &#123; return new ConfigurationCustomizer() &#123; @Override public void customize(MybatisConfiguration configuration) &#123; PageInterceptor pageInterceptor = new PageInterceptor(); Properties properties = new Properties(); /* pagehelper.helper-dialect=mysql pagehelper.params=count=countSql pagehelper.reasonable=true pagehelper.support-methods-arguments=true */ properties.setProperty(&quot;helper-dialect&quot;, &quot;mysql&quot;); properties.setProperty(&quot;params=count&quot;, &quot;countSql&quot;); properties.setProperty(&quot;reasonable&quot;, &quot;true&quot;); properties.setProperty(&quot;support-methods-arguments&quot;, &quot;true&quot;); pageInterceptor.setProperties(properties); configuration.addInterceptor(pageInterceptor); &#125; &#125;;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis-plus/"},{"name":"pagehelper","slug":"pagehelper","permalink":"https://anarckk.github.io/myvolantis/tags/pagehelper/"}]},{"title":"关于@ConfigurationProperties注解的理解","slug":"2019-12/05-关于-ConfigurationProperties注解的理解","date":"2019-12-05T05:14:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/2019-12/05-关于-ConfigurationProperties注解的理解/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/2019-12/05-%E5%85%B3%E4%BA%8E-ConfigurationProperties%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"定义一个config类 123456789101112@Component@ConfigurationProperties(prefix = &quot;app-config&quot;)@Datapublic class AppConfig &#123; public static final String USER_HEAD_IMAGE_PATTERN = &quot;/user/header/&quot;; @NotNull private String userHeaderImg; @NotNull private String filePath; @NotNull private String imgUrl;&#125; 这样的意思是，它里面的所有字段都可以在application.properties里进行配置,数据会被注入到配置对象中，在全局中都可以使用 123app-config.imgUrl=/home/project/website/user/header/app-config.userHeaderImg=file:/home/project/website/user/header/app-config.filePath=http://192.168.1.102:8096\\","text":"定义一个config类 123456789101112@Component@ConfigurationProperties(prefix = &quot;app-config&quot;)@Datapublic class AppConfig &#123; public static final String USER_HEAD_IMAGE_PATTERN = &quot;/user/header/&quot;; @NotNull private String userHeaderImg; @NotNull private String filePath; @NotNull private String imgUrl;&#125; 这样的意思是，它里面的所有字段都可以在application.properties里进行配置,数据会被注入到配置对象中，在全局中都可以使用 123app-config.imgUrl=/home/project/website/user/header/app-config.userHeaderImg=file:/home/project/website/user/header/app-config.filePath=http://192.168.1.102:8096\\","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"解决Mybatis-plus和pagehelper依赖冲突","slug":"2019-12/05-解决Mybatis-plus和pagehelper依赖冲突","date":"2019-12-05T03:21:18.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/2019-12/05-解决Mybatis-plus和pagehelper依赖冲突/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/2019-12/05-%E8%A7%A3%E5%86%B3Mybatis-plus%E5%92%8Cpagehelper%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/","excerpt":"我的一直报 ClassNotFoundException: org.mybatis.logging.LoggerFactory，我判断肯定是mp和pagehelper冲突了，但是pagehelper已经在工程中广泛的使用了，是不可能注释掉的。找打了一篇合适的博客，照着做解决了。 主要解决方法是,把pagehelper-starter springboot启动器拆成底层的两个依赖。但是这样的话，配置就要重新配过了。 123456789101112&lt;!-- pagehelper--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 然后手动添加拦截器，拦截com.github.pagehelper 123456789101112131415161718192021222324252627282930313233package com.xh.sdk.springcloud.config; import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration; import com.baomidou.mybatisplus.autoconfigure.ConfigurationCustomizer;import com.baomidou.mybatisplus.core.MybatisConfiguration;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor; @Configurationpublic class MyBatisPlusConfig &#123; /* * 分页插件，自动识别数据库类型 * 多租户，请参考官网【插件扩展】 */ @Bean public PaginationInterceptor paginationInterceptor() &#123; return new PaginationInterceptor(); &#125; @Bean ConfigurationCustomizer mybatisConfigurationCustomizer() &#123; return new ConfigurationCustomizer() &#123; @Override public void customize(MybatisConfiguration configuration) &#123; configuration.addInterceptor(new com.github.pagehelper.PageInterceptor()); &#125; &#125;; &#125; &#125; 参考链接解决mybatis plus 3.x 和pagehelper无法共用、包冲突问题解决Mybatis-plus和pagehelper依赖冲突","text":"我的一直报 ClassNotFoundException: org.mybatis.logging.LoggerFactory，我判断肯定是mp和pagehelper冲突了，但是pagehelper已经在工程中广泛的使用了，是不可能注释掉的。找打了一篇合适的博客，照着做解决了。 主要解决方法是,把pagehelper-starter springboot启动器拆成底层的两个依赖。但是这样的话，配置就要重新配过了。 123456789101112&lt;!-- pagehelper--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 然后手动添加拦截器，拦截com.github.pagehelper 123456789101112131415161718192021222324252627282930313233package com.xh.sdk.springcloud.config; import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration; import com.baomidou.mybatisplus.autoconfigure.ConfigurationCustomizer;import com.baomidou.mybatisplus.core.MybatisConfiguration;import com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor; @Configurationpublic class MyBatisPlusConfig &#123; /* * 分页插件，自动识别数据库类型 * 多租户，请参考官网【插件扩展】 */ @Bean public PaginationInterceptor paginationInterceptor() &#123; return new PaginationInterceptor(); &#125; @Bean ConfigurationCustomizer mybatisConfigurationCustomizer() &#123; return new ConfigurationCustomizer() &#123; @Override public void customize(MybatisConfiguration configuration) &#123; configuration.addInterceptor(new com.github.pagehelper.PageInterceptor()); &#125; &#125;; &#125; &#125; 参考链接解决mybatis plus 3.x 和pagehelper无法共用、包冲突问题解决Mybatis-plus和pagehelper依赖冲突","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis-plus/"},{"name":"pagehelper","slug":"pagehelper","permalink":"https://anarckk.github.io/myvolantis/tags/pagehelper/"}]},{"title":"SpringBoot中Swagger2多包扫描问题","slug":"2019-12/05-SpringBoot中Swagger2多包扫描问题","date":"2019-12-05T03:20:13.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/2019-12/05-SpringBoot中Swagger2多包扫描问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/2019-12/05-SpringBoot%E4%B8%ADSwagger2%E5%A4%9A%E5%8C%85%E6%89%AB%E6%8F%8F%E9%97%AE%E9%A2%98/","excerpt":"按注解扫描包就可以做到多包扫描了 12345678910@Beanpublic Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() //为当前包路径 .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build();&#125;","text":"按注解扫描包就可以做到多包扫描了 12345678910@Beanpublic Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() //为当前包路径 .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build();&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"swagger2","slug":"swagger2","permalink":"https://anarckk.github.io/myvolantis/tags/swagger2/"}]},{"title":"数据库连接配置","slug":"2019-12/05-数据库连接配置","date":"2019-12-05T00:38:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/05/2019-12/05-数据库连接配置/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/05/2019-12/05-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE/","excerpt":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Properties file with JDBC-related settings.########### HSQLDB ############jdbc.driverClassName=org.hsqldb.jdbcDriver#jdbc.url=jdbc:hsqldb:hsql://localhost:9001/bookstore#jdbc.username=sa#jdbc.password=############ MySQL 5 ############jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=GBKjdbc.username=rootjdbc.password=root############### PostgreSQL ################jdbc.driverClassName=org.postgresql.Driver#jdbc.url=jdbc:postgresql://localhost/bookstore#jdbc.username=#jdbc.password=########### Oracle ############jdbc.driverClassName=oracle.jdbc.driver.OracleDriver#jdbc.url=jdbc:oracle:thin:@192.168.1.250:1521:devdb#jdbc.username=HFOSPSP#jdbc.password=HFOSPSP############################## MS SQL Server 2000 (JTDS) ###############################jdbc.driverClassName=net.sourceforge.jtds.jdbc.Driver#jdbc.url=jdbc:jtds:sqlserver://localhost:1433/bookstore#jdbc.username=#jdbc.password=################################### MS SQL Server 2000 (Microsoft) ####################################jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver#jdbc.url=jdbc:sqlserver://192.168.1.130:1433;database=ahos;user=sa;password=ahtec&quot;;#jdbc.username=sa#jdbc.password=ahtec######### ODBC ##########jdbc.driverClassName=sun.jdbc.odbc.JdbcOdbcDriver#jdbc.url=jdbc:odbc:bookstore#jdbc.username=#jdbc.password= 参考来源数据库几种常见的driverClassName和url","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Properties file with JDBC-related settings.########### HSQLDB ############jdbc.driverClassName=org.hsqldb.jdbcDriver#jdbc.url=jdbc:hsqldb:hsql://localhost:9001/bookstore#jdbc.username=sa#jdbc.password=############ MySQL 5 ############jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=GBKjdbc.username=rootjdbc.password=root############### PostgreSQL ################jdbc.driverClassName=org.postgresql.Driver#jdbc.url=jdbc:postgresql://localhost/bookstore#jdbc.username=#jdbc.password=########### Oracle ############jdbc.driverClassName=oracle.jdbc.driver.OracleDriver#jdbc.url=jdbc:oracle:thin:@192.168.1.250:1521:devdb#jdbc.username=HFOSPSP#jdbc.password=HFOSPSP############################## MS SQL Server 2000 (JTDS) ###############################jdbc.driverClassName=net.sourceforge.jtds.jdbc.Driver#jdbc.url=jdbc:jtds:sqlserver://localhost:1433/bookstore#jdbc.username=#jdbc.password=################################### MS SQL Server 2000 (Microsoft) ####################################jdbc.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver#jdbc.url=jdbc:sqlserver://192.168.1.130:1433;database=ahos;user=sa;password=ahtec&quot;;#jdbc.username=sa#jdbc.password=ahtec######### ODBC ##########jdbc.driverClassName=sun.jdbc.odbc.JdbcOdbcDriver#jdbc.url=jdbc:odbc:bookstore#jdbc.username=#jdbc.password= 参考来源数据库几种常见的driverClassName和url","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"使用图片服务器https://sm.ms","slug":"2019-12/04-使用图片服务器https-sm-ms","date":"2019-12-04T15:52:06.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-使用图片服务器https-sm-ms/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8https-sm-ms/","excerpt":"竟然还有图片服务器，真是，世界之大，无奇不有。 https://sm.ms 是一个免费的图片服务器，上传图片即可返回图片的网络url，这样就省的自己维护和搭建专门的图片服务器了。 当让你也可以你也可以自己搭建文件服务器，上传多种文件。 网址是https://sm.ms api是https://sm.ms/doc/ 参考来源https://blog.csdn.net/weixin_41870396/article/details/95640565","text":"竟然还有图片服务器，真是，世界之大，无奇不有。 https://sm.ms 是一个免费的图片服务器，上传图片即可返回图片的网络url，这样就省的自己维护和搭建专门的图片服务器了。 当让你也可以你也可以自己搭建文件服务器，上传多种文件。 网址是https://sm.ms api是https://sm.ms/doc/ 参考来源https://blog.csdn.net/weixin_41870396/article/details/95640565","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"有哪些读书学不来，却很重要的素质？","slug":"2019-12/04-有哪些读书学不来，却很重要的素质？","date":"2019-12-04T13:50:16.000Z","updated":"2023-06-20T08:13:07.944Z","comments":true,"path":"2019/12/04/2019-12/04-有哪些读书学不来，却很重要的素质？/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-%E6%9C%89%E5%93%AA%E4%BA%9B%E8%AF%BB%E4%B9%A6%E5%AD%A6%E4%B8%8D%E6%9D%A5%EF%BC%8C%E5%8D%B4%E5%BE%88%E9%87%8D%E8%A6%81%E7%9A%84%E7%B4%A0%E8%B4%A8%EF%BC%9F/","excerpt":"来自知乎：肥肥猫 - 有哪些读书学不来，却很重要的素质？ 书上找不到，也很少有人讨论的个人素质，我认为有以下三种： 人际交往中的期望值管理能力 阈值自控意识 应对主观时空扭曲的能力","text":"来自知乎：肥肥猫 - 有哪些读书学不来，却很重要的素质？ 书上找不到，也很少有人讨论的个人素质，我认为有以下三种： 人际交往中的期望值管理能力 阈值自控意识 应对主观时空扭曲的能力 1. 先说第一个，期望值管理能力。影视剧中往往有这样的观感：一个地痞或者土匪，平日无恶不作。到了最后一集，哎，这货突然抗日了，例如《大宅门》里的三爷。这时候观众对其好感度会突然爆棚，甚至超过许多没有爆点的正面角色，前几十集的劣迹简直一笔勾销。这就是期望值在前期被编剧压低之后的福利。 先记住一个公式： （图片来源：使用Google Image 中已获得CC分享协议授权的图片搜索结果） 我们刚进入一个团队时，如果一开始就大招尽出，会导致周围人和领导对你的期望值不断升高。最后总会有一次你满足不了对方的要求，这时候对你的负面评价也会随之而起，甚至会低过一直表现平平的同仁。有人将其总结为“不胜任陷阱”，因为在一个上升通道中，只要达到了上层的期望，就会被继续提拔，直到提拔到一个你不能胜任的岗位，让所有人失望，这个升迁过程才会结束。 这一点在情场上也依然适用，你会发现浪子回头会获得相当的赞美，许多女人甚至可以不计较你之前是个多么烂的人。但老实巴交的“好好男人”一旦被抓到一次不老实就立刻被打入“渣男”的行列再也不得翻身。娱乐圈这样的例子去年今年都有，不用我再赘述。 这就需要我们对别人对我们的期望值进行有效管理。比较常见的手段是憋大招，有一些在对方期待之外的东西不到关键时刻不能随便拿出来用。但周围人也不是傻瓜，次数多了，别人都会倾向于相信你藏着一手，例如学生时代那些永远叫嚷着这次考砸了的第一名们，信誉早已破产，其他人对其期望值仍然在持续上升，这时候承受的压力可想而知。要真正做到有效控制周围人对你的期望值，需要做到真正无迹可寻，并在所有非必要的时刻压抑自己的表现欲与虚荣心。我认为这是进入职场的第一课。 2. 阈值自控意识阈值又叫临界值，指释放一个行为反应所需要的最小刺激强度。 我大概六七年在网上发过一篇文章，可能很多人以前都看过了，这里引用其中一段： “A片害了无数正常的男青年。没有A片的岁月里，男孩子满脑邪念充盈。可是在这个网络色情泛滥的当今，他们居然对生活中的女人没了想法，这不能不成为信息时代人类异化的经典案例。何以至此？阈值使然。也就是不断的持续刺激，抬高了男人们欲望的触发点。上个世纪初女人旗袍坐下时偶尔可一瞥的白花花大腿就可以触发老夫子们的欲念；可是100年后，看着满屏的器官进出，很多人居然会叹上一句：没意思。这就是时代的变迁，使得阈值不断上升的最好例证。 举个极端的例子，释迦牟尼本是个迦毗罗卫国的王子，很早就过着锦衣玉食的生活。其父为其修筑春、夏、冬三幢宫殿。但他活的很厌世。其父为其选来印度最妖艳美丽的女子来取悦他。但是美酒美女对他的边际效用已经小到忽略，食欲肉欲的一切无法使他获得更高的满足，只有离开世俗创造佛教去了。他一出生就享受物质的极大满足，导致他的阈值高到普通人难以想象的程度，最后凡是物质都无法使他快活。中国的例子是贾宝玉，从小活在女人堆里，最后也做和尚去了。反而自小出家的人却未必能忘俗。所以施耐庵会有和尚最淫一说，潘巧云与裴如海那一段有很精妙的点评。盖因自幼出家的人，从未享受过世俗的快感，所以阈值很低，一点就着。能大彻大悟的慧根人士，往往反而是富家子弟，也就不奇怪了。 女人亦然。泛滥的韩剧将正常的女生活生生逼成大龄剩女，归根到底也是阈值作怪。本来少女看见年轻男子怀春，是老天爷安排的正常心理活动。现在这个自然的程序被突然打断，横插10部韩剧，部部男一号多金英俊完美，还有若干男二男三争抢。电视机前的女人们于是看傻了，爱情阈值被活生生地抬到天上，身边的男人自然再也看不上。” 当你深刻理解了阈值对个人幸福与快乐的影响后，你就知道这个概念不仅用在性和爱情上，更可以推广到人生幸福的方方面面。了解边际效用递减的规律，并学会一定程度的禁欲和自控，是防止阈值升高的不二法门，这绝对是需要在人生早期就要着力培养和锻炼的素质与意识，尤其对于男性。 顺便提下。频繁观看色情片造成的过度刺激，会抑制大脑内对性刺激做出神经反应的奖赏机制，与药物成瘾相似，这种神经抑制会促使强迫的色情成瘾行为，并对正常的性意愿和性欲造成影响。可惜，对于有些人，这些话来的有点晚了：） 3. 应对时空扭曲的应对能力这个概念有点玄。这里说的时空扭曲，指的是主观的时间流逝感觉随着年龄开始加速，而且一发不可收拾。相信大部分人都有这样的感觉，时间过得越来越快快了。小学时是一个月一个月过，大学一学期一学期过，工作后就变成了一年一年过，越往上过的越快，问问你的父母，他们会告诉你十年一眨眼就没了，他们讨论着十几年二十年前的陈年旧事，好像就发生在昨天。 我很早就开始研究抗衡这种时空扭曲的方法。 我在网上找了一些解释，有一个说法比较有趣： “五岁的时候人的记忆有五年，这时候过一年，到六岁时，记忆增加了五分之一。六岁到七岁，记忆增加了六分之一。七岁到八岁记忆就只增加了七分之一。以此类推，到了二十岁的时候，过多一年，记忆便只增加二十分之一。这一年的时光虽然没变，但是参照物变了。所以大家就感觉时间过得快了。可能等你六十岁的的时候，过一年记忆只增加六十分之一，那时时间就过得更快了。” 这个说法有一定的道理，如果你仔细回忆一下，会发现童年的课间十分钟休息足够你从楼上跑下去玩儿点什么；但现在你坐在公司电脑前，才喝了杯热饮，吧东西摊开准备干活，啥都没干呢一个小时就没了。小时候两个月的暑假特别漫长，现在的一个月不就是四个星期，一眨眼就没了。 如果用记忆增量理论来解释，那就说明我们在成年后的工作和生活都是在简单重复，所以大脑中的“总数据”并没有像儿时那样处在迅猛增长的阶段，大脑处理今天的24小时，只需要动用几年前就已经存好的索引，驾轻就熟，总信息量几乎没有增加，你主观上感受到的“新东西”当然就少，而体验“新东西”恰恰是放慢主观时间的命门。 套用知乎上“舒适区”的说法，要解决时空扭曲的问题，我们必须走出“熟悉区”，熟悉区是时空黑洞，会不断加速消耗，吞噬你的时间。如果你走出办公室，去陌生的国度一个月，就会发现这一个月并没有像办公室里那样，星期三过完就差不多能指望星期天了，而是觉得比在办公室两个星期都要多，这便是对抗时空扭曲的一个例子。并不是只有旅游才能有这样的效果，你如果在自己身上多试验，会发现能找到很多适用于你个人的手段，但前提是你要有“摆脱熟悉区”的意识。 这是我认为人的一生所需要掌握的最重要能力之一，掌握了对抗时空扭曲的本领，你就能延长主观生命。","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"个人提升","slug":"个人提升","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%B8%AA%E4%BA%BA%E6%8F%90%E5%8D%87/"}]},{"title":"SpringBoot启动Tomcat报错LibraryNotFoundError，Can't load library:tcnative-1.dll","slug":"2019-12/04-SpringBoot启动Tomcat报错LibraryNotFoundError，Can-t-load-library-tcnative-1-dll","date":"2019-12-04T12:52:29.000Z","updated":"2023-06-20T07:48:09.035Z","comments":true,"path":"2019/12/04/2019-12/04-SpringBoot启动Tomcat报错LibraryNotFoundError，Can-t-load-library-tcnative-1-dll/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-SpringBoot%E5%90%AF%E5%8A%A8Tomcat%E6%8A%A5%E9%94%99LibraryNotFoundError%EF%BC%8CCan-t-load-library-tcnative-1-dll/","excerpt":"","text":"环境：Windows10-64位，SpringBoot是2.1.1，内嵌Tomcat 9.0.13， 把日志级别设为Debug后，从控制台看到启动时tomcat报无法找到JNI动态链接库的错误，完整的异常栈信息如下： 12345678910111213141516171819202122232425262728293031323334org.apache.tomcat.jni.LibraryNotFoundError: Can&#x27;t load library: D:\\anarckk\\projects\\x-springboot-sqlite\\bin\\tcnative-1.dll, Can&#x27;t load library: D:\\anarckk\\projects\\x-springboot-sqlite\\bin\\libtcnative-1.dll, no tcnative-1 in java.library.path: [C:\\Program Files\\Java\\jdk-11.0.2\\bin, C:\\WINDOWS\\Sun\\Java\\bin, C:\\WINDOWS\\system32, C:\\WINDOWS, C:\\Python27\\, C:\\Python27\\Scripts, C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common, C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath, C:\\WINDOWS\\system32, C:\\WINDOWS, C:\\WINDOWS\\System32\\Wbem, C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\, C:\\WINDOWS\\System32\\OpenSSH\\, C:\\Program Files\\Java\\jdk1.8.0_231\\bin, D:\\anarckk\\X\\NVM_HOME\\nvm, D:\\anarckk\\X\\NVM_HOME\\nodejs, D:\\anarckk\\X\\android-sdk-windows\\tools\\, D:\\anarckk\\X\\apache-maven-3.5.3\\bin\\, C:\\Program Files\\TortoiseSVN\\bin, C:\\Program Files\\Git\\cmd, C:\\Program Files\\TortoiseGit\\bin, C:\\sqlite, D:\\anarckk\\X\\env\\, D:\\anarckk\\X\\cwrsync_5.7.2_x86_free\\bin, C:\\Users\\zzanar\\AppData\\Local\\Microsoft\\WindowsApps, ., .], no libtcnative-1 in java.library.path: [C:\\Program Files\\Java\\jdk-11.0.2\\bin, C:\\WINDOWS\\Sun\\Java\\bin, C:\\WINDOWS\\system32, C:\\WINDOWS, C:\\Python27\\, C:\\Python27\\Scripts, C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common, C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath, C:\\WINDOWS\\system32, C:\\WINDOWS, C:\\WINDOWS\\System32\\Wbem, C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\, C:\\WINDOWS\\System32\\OpenSSH\\, C:\\Program Files\\Java\\jdk1.8.0_231\\bin, D:\\anarckk\\X\\NVM_HOME\\nvm, D:\\anarckk\\X\\NVM_HOME\\nodejs, D:\\anarckk\\X\\android-sdk-windows\\tools\\, D:\\anarckk\\X\\apache-maven-3.5.3\\bin\\, C:\\Program Files\\TortoiseSVN\\bin, C:\\Program Files\\Git\\cmd, C:\\Program Files\\TortoiseGit\\bin, C:\\sqlite, D:\\anarckk\\X\\env\\, D:\\anarckk\\X\\cwrsync_5.7.2_x86_free\\bin, C:\\Users\\zzanar\\AppData\\Local\\Microsoft\\WindowsApps, ., .]at org.apache.tomcat.jni.Library.&lt;init&gt;(Library.java:102) ~[tomcat-embed-core-9.0.27.jar:9.0.27]at org.apache.tomcat.jni.Library.initialize(Library.java:206) ~[tomcat-embed-core-9.0.27.jar:9.0.27]at org.apache.catalina.core.AprLifecycleListener.init(AprLifecycleListener.java:198) ~[tomcat-embed-core-9.0.27.jar:9.0.27]at org.apache.catalina.core.AprLifecycleListener.isAprAvailable(AprLifecycleListener.java:107) ~[tomcat-embed-core-9.0.27.jar:9.0.27]at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getDefaultLifecycleListeners(TomcatServletWebServerFactory.java:168) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.&lt;init&gt;(TomcatServletWebServerFactory.java:119) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryConfiguration$EmbeddedTomcat.tomcatServletWebServerFactory(ServletWebServerFactoryConfiguration.java:75) ~[spring-boot-autoconfigure-2.2.1.RELEASE.jar:2.2.1.RELEASE]at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:207) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getWebServerFactory(ServletWebServerApplicationContext.java:210) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:179) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:153) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:544) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]at com.ifkal.demo.XSpringbootSqliteApplication.main(XSpringbootSqliteApplication.java:12) ~[classes/:na] 这是因为Tomcat中的connector为了提高性能，采用了加载与操作系统绑定（非跨平台）的本地库的方式，比如Windows系统中就是.dll动态链接库。上述异常中找不到的两个.dll库文件，默认会去Tomcat的bin目录下去找，但是由于SpringBoot的Tomcat是嵌入式的，没有这两个.dll，所以只好自己去官网下载，到如下官方地址下载，并放到C:\\Windows\\System32\\目录下：(动态链接库的名字叫 tcnative-1.dll，把它放到工程的&#x2F;bin目录下，也能解决) 链接1： http://archive.apache.org/dist/tomcat/tomcat-connectors/native/1.2.14/binaries/ 链接1支持32位操作系统，不适合我，最后我去下面这个网址找到了64位的1.1.9版本的链接库 链接2： http://archive.apache.org/dist/tomcat/tomcat-connectors/native/1.1.9/binaries/win64/amd64/ 参考链接SpringBoot启动Tomcat报错LibraryNotFoundError，Can’t load library:tcnative-1.dll","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"问题解决","slug":"问题解决","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"}]},{"title":"idea自定义代码片段","slug":"2019-12/04-idea自定义代码片段","date":"2019-12-04T08:11:42.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-idea自定义代码片段/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-idea%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/","excerpt":"网上到处都是，就留一篇博客就行了 https://blog.csdn.net/caijunfen/article/details/81867043","text":"网上到处都是，就留一篇博客就行了 https://blog.csdn.net/caijunfen/article/details/81867043","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"}]},{"title":"JAVA对象转Map","slug":"2019-12/04-JAVA对象转Map","date":"2019-12-04T08:07:04.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-JAVA对象转Map/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-JAVA%E5%AF%B9%E8%B1%A1%E8%BD%ACMap/","excerpt":"在网上找到了一个写法直接将对象转map，只是能用不出错。效率上应该是挺糟糕的。 1234567public static Map&lt;String, Object&gt; toMap(Object args) &#123; return Arrays.stream(BeanUtils.getPropertyDescriptors(args.getClass())) .filter(pd -&gt; !&quot;class&quot;.equals(pd.getName())) .collect(HashMap::new, (map, pd) -&gt; map.put(pd.getName(), ReflectionUtils.invokeMethod(pd.getReadMethod(), args)), HashMap::putAll);&#125;","text":"在网上找到了一个写法直接将对象转map，只是能用不出错。效率上应该是挺糟糕的。 1234567public static Map&lt;String, Object&gt; toMap(Object args) &#123; return Arrays.stream(BeanUtils.getPropertyDescriptors(args.getClass())) .filter(pd -&gt; !&quot;class&quot;.equals(pd.getName())) .collect(HashMap::new, (map, pd) -&gt; map.put(pd.getName(), ReflectionUtils.invokeMethod(pd.getReadMethod(), args)), HashMap::putAll);&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"},{"name":"代码片段","slug":"代码片段","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"}]},{"title":"SSH/SFTP突然变得很慢","slug":"2019-12/04-SSH-SFTP突然变得很慢","date":"2019-12-04T06:27:04.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-SSH-SFTP突然变得很慢/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-SSH-SFTP%E7%AA%81%E7%84%B6%E5%8F%98%E5%BE%97%E5%BE%88%E6%85%A2/","excerpt":"","text":"SSH is slow to make a connection su vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config add UseDNS no service sshd restarthttp://www.cyberciti.biz/faq/howto-restart-ssh/http://superuser.com/questions/359344/ssh-is-slow-to-make-a-connection 来源https://blog.csdn.net/lantianjialiang/article/details/9195663 参考来源https://www.cnblogs.com/wjoyxt/p/3790537.html 2019-12-4 15:02:03：还没解决掉… 还是不要解决好了….感觉不太重要，确实是公司网速太慢","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"sftp","slug":"sftp","permalink":"https://anarckk.github.io/myvolantis/tags/sftp/"}]},{"title":"springboot集成mybatis-plus","slug":"2019-12/04-springboot集成mybatis-plus","date":"2019-12-04T05:55:56.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-springboot集成mybatis-plus/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-springboot%E9%9B%86%E6%88%90mybatis-plus/","excerpt":"从原理出发，很多问题都很好解决。注意这3个文件的配置，一般都能配好 Application.java 1@MapperScan(&quot;com.ifkal.demo.**.mapper&quot;) // 要配置的是mapper interface所在的包 application.yml 123mybatis-plus: type-aliases-package: com.ifkal.demo.**.entity mapper-locations: classpath:com/ifkal/demo/**/mapper/xml/*.xml","text":"从原理出发，很多问题都很好解决。注意这3个文件的配置，一般都能配好 Application.java 1@MapperScan(&quot;com.ifkal.demo.**.mapper&quot;) // 要配置的是mapper interface所在的包 application.yml 123mybatis-plus: type-aliases-package: com.ifkal.demo.**.entity mapper-locations: classpath:com/ifkal/demo/**/mapper/xml/*.xml pom.xml 12345678910111213141516171819202122&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;$&#123;basedir&#125;/src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.yml&lt;/include&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;$&#123;basedir&#125;/src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.yml&lt;/include&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis-plus/"}]},{"title":"docker安装frpc并对nginx容器进行代理","slug":"2019-12/04-docker安装frpc并对nginx容器进行代理","date":"2019-12-04T01:01:12.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/04/2019-12/04-docker安装frpc并对nginx容器进行代理/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/04/2019-12/04-docker%E5%AE%89%E8%A3%85frpc%E5%B9%B6%E5%AF%B9nginx%E5%AE%B9%E5%99%A8%E8%BF%9B%E8%A1%8C%E4%BB%A3%E7%90%86/","excerpt":"从原理上讲，使用的是docker网桥在容器间进行数据转发。 安装好frpc之后，代理一个端口，并在配置的local_ip里填写另一个容器的ip地址 1234type = tcp local_ip = 172.17.0.3local_port = 80remote_port = 32171 然后启动frpc，映射一个外网端口 script1docker run -d --name frpc -v /data/frp/frpc.ini:/frp/frpc.ini -p 32171:32171 frpc:0.30.0 从原理上，不需要实际对被代理的172.17.0.3:80做端口外网映射。因为frpc使用的是docker网桥，将访问frpc的外网流量反向代理过去。","text":"从原理上讲，使用的是docker网桥在容器间进行数据转发。 安装好frpc之后，代理一个端口，并在配置的local_ip里填写另一个容器的ip地址 1234type = tcp local_ip = 172.17.0.3local_port = 80remote_port = 32171 然后启动frpc，映射一个外网端口 script1docker run -d --name frpc -v /data/frp/frpc.ini:/frp/frpc.ini -p 32171:32171 frpc:0.30.0 从原理上，不需要实际对被代理的172.17.0.3:80做端口外网映射。因为frpc使用的是docker网桥，将访问frpc的外网流量反向代理过去。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"},{"name":"frpc","slug":"frpc","permalink":"https://anarckk.github.io/myvolantis/tags/frpc/"}]},{"title":"mybatis-plus代码生成器配置","slug":"2019-12/03-mybatis-plus代码生成器配置","date":"2019-12-03T14:00:00.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/03/2019-12/03-mybatis-plus代码生成器配置/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/03/2019-12/03-mybatis-plus%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%E9%85%8D%E7%BD%AE/","excerpt":"官网文档代码生成器 代码生成器配置 文档理解代码生成器的名字叫 AutoGenerator 代码生成器配置分为以下几项 GlobalConfig 全局配置 DataSourceConfig 数据源配置 PackageConfig 包配置 InjectionConfig 自定义配置(可以猜是不是模板引擎对应的配置了) TemplateConfig 配置模板 StrategyConfig 策略配置 注意的事项 DataSourceConfig 必须配置数据库类型","text":"官网文档代码生成器 代码生成器配置 文档理解代码生成器的名字叫 AutoGenerator 代码生成器配置分为以下几项 GlobalConfig 全局配置 DataSourceConfig 数据源配置 PackageConfig 包配置 InjectionConfig 自定义配置(可以猜是不是模板引擎对应的配置了) TemplateConfig 配置模板 StrategyConfig 策略配置 注意的事项 DataSourceConfig 必须配置数据库类型 我配好的代码生成器配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475package com.ifkal.demo.generate;import com.baomidou.mybatisplus.annotation.DbType;import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;import com.baomidou.mybatisplus.core.toolkit.StringUtils;import com.baomidou.mybatisplus.generator.AutoGenerator;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;import com.baomidou.mybatisplus.generator.config.GlobalConfig;import com.baomidou.mybatisplus.generator.config.PackageConfig;import com.baomidou.mybatisplus.generator.config.StrategyConfig;import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;import com.baomidou.mybatisplus.generator.engine.VelocityTemplateEngine;import java.util.Scanner;/** * Created by fh on 2019/12/3 */public class CodeGenerator &#123; /** * &lt;p&gt; * 读取控制台内容 * &lt;/p&gt; */ public static String scanner(String tip) &#123; Scanner scanner = new Scanner(System.in); System.out.println(&quot;请输入&quot; + tip + &quot;：&quot;); if (scanner.hasNext()) &#123; String ipt = scanner.next(); if (StringUtils.isNotEmpty(ipt)) &#123; return ipt; &#125; &#125; throw new MybatisPlusException(&quot;请输入正确的&quot; + tip + &quot;！&quot;); &#125; public static void main(String[] args) &#123; // 代码生成器 AutoGenerator mpg = new AutoGenerator(); String projectPath = System.getProperty(&quot;user.dir&quot;); // 全局配置 GlobalConfig gc = new GlobalConfig() .setOutputDir(projectPath + &quot;/src/main/java&quot;) .setAuthor(&quot;ifkal&quot;) .setOpen(false); mpg.setGlobalConfig(gc); // 数据源配置 DataSourceConfig dsc = new DataSourceConfig() .setUrl(&quot;jdbc:sqlite:&quot; + projectPath + &quot;/identifier.sqlite&quot;) .setDbType(DbType.SQLITE) .setDriverName(&quot;org.sqlite.JDBC&quot;); mpg.setDataSource(dsc); // 包配置 PackageConfig pc = new PackageConfig() .setModuleName(scanner(&quot;模块名&quot;)) .setParent(&quot;com.ifkal.demo&quot;); mpg.setPackageInfo(pc); // 策略配置 StrategyConfig strategy = new StrategyConfig() .setNaming(NamingStrategy.underline_to_camel) .setColumnNaming(NamingStrategy.underline_to_camel) .setEntityLombokModel(true) .setRestControllerStyle(true) .setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;)) .setControllerMappingHyphenStyle(true) .setTablePrefix(pc.getModuleName() + &quot;_&quot;); mpg.setStrategy(strategy); mpg.setTemplateEngine(new VelocityTemplateEngine()); mpg.execute(); &#125;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis-plus/"}]},{"title":"maven镜像地址","slug":"2019-12/03-maven镜像地址","date":"2019-12-03T13:01:03.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/03/2019-12/03-maven镜像地址/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/03/2019-12/03-maven%E9%95%9C%E5%83%8F%E5%9C%B0%E5%9D%80/","excerpt":"也不全是国内地址，速度比较快的地址吧12345678910111213141516171819&lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;!--阿里云镜像--&gt;&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;mirror&gt; &lt;id&gt;JBossJBPM&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;JBossJBPM Repository&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/releases/&lt;/url&gt; &lt;/mirror&gt;","text":"也不全是国内地址，速度比较快的地址吧12345678910111213141516171819&lt;mirror&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt; &lt;/mirror&gt; &lt;!--阿里云镜像--&gt;&lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;/mirror&gt;&lt;mirror&gt; &lt;id&gt;JBossJBPM&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;JBossJBPM Repository&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/releases/&lt;/url&gt; &lt;/mirror&gt; 1234567&lt;!--默认的中央仓库--&gt;&lt;mirror&gt; &lt;id&gt;mirrorId&lt;/id&gt; &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;&lt;/mirror&gt; 把地址配置到 settings.xml 里1234567891011121314151617181920212223242526&lt;profile&gt; &lt;id&gt;fast-repositories&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;repo2&lt;/id&gt; &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt; &lt;url&gt;http://repo2.maven.org/maven2/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;repository&gt; &lt;id&gt;JBossJBPM&lt;/id&gt; &lt;name&gt;JBossJBPM Repository&lt;/name&gt; &lt;url&gt;https://repository.jboss.org/nexus/content/repositories/releases/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt;&lt;/profile&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"maven","slug":"maven","permalink":"https://anarckk.github.io/myvolantis/tags/maven/"}]},{"title":"docker容器网络通信原理分析","slug":"底层硬核/docker容器网络通信原理分析","date":"2019-12-03T01:48:45.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/03/底层硬核/docker容器网络通信原理分析/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/03/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/docker%E5%AE%B9%E5%99%A8%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/","excerpt":"概述自从docker容器出现以来，容器的网络通信就一直是大家关注的焦点，也是生产环境的迫切需求。而容器的网络通信又可以分为两大方面：单主机容器上的相互通信和跨主机的容器相互通信。而本文将分别针对这两方面，对容器的通信原理进行简单的分析，帮助大家更好地使用docker。 docker单主机容器通信基于对net namespace的控制，docker可以为在容器创建隔离的网络环境，在隔离的网络环境下，容器具有完全独立的网络栈，与宿主机隔离，也可以使容器共享主机或者其他容器的网络命名空间，基本可以满足开发者在各种场景下的需要。按docker官方的说法，docker容器的网络有五种模式： bridge：docker默认的网络模式，为容器创建独立的网络命名空间，容器具有独立的网卡等所有单独的网络栈，是最常用的使用方式。 host：直接使用容器宿主机的网络命名空间。 none：为容器创建独立网络命名空间，但不为它做任何网络配置，容器中只有lo，用户可以在此基础上，对容器网络做任意定制。 其他容器：与host模式类似，只是容器将与指定的容器共享网络命名空间。 用户自定义：docker 1.9版本以后新增的特性，允许容器使用第三方的网络实现或者创建单独的bridge网络，提供网络隔离能力。","text":"概述自从docker容器出现以来，容器的网络通信就一直是大家关注的焦点，也是生产环境的迫切需求。而容器的网络通信又可以分为两大方面：单主机容器上的相互通信和跨主机的容器相互通信。而本文将分别针对这两方面，对容器的通信原理进行简单的分析，帮助大家更好地使用docker。 docker单主机容器通信基于对net namespace的控制，docker可以为在容器创建隔离的网络环境，在隔离的网络环境下，容器具有完全独立的网络栈，与宿主机隔离，也可以使容器共享主机或者其他容器的网络命名空间，基本可以满足开发者在各种场景下的需要。按docker官方的说法，docker容器的网络有五种模式： bridge：docker默认的网络模式，为容器创建独立的网络命名空间，容器具有独立的网卡等所有单独的网络栈，是最常用的使用方式。 host：直接使用容器宿主机的网络命名空间。 none：为容器创建独立网络命名空间，但不为它做任何网络配置，容器中只有lo，用户可以在此基础上，对容器网络做任意定制。 其他容器：与host模式类似，只是容器将与指定的容器共享网络命名空间。 用户自定义：docker 1.9版本以后新增的特性，允许容器使用第三方的网络实现或者创建单独的bridge网络，提供网络隔离能力。 这些网络模式在相互网络通信方面的对比如下所示： 模式 是否支持多主机 南北向通信机制 东西向通信机制 bridge(默认) 否 宿主机端口绑定 通过Linux bridge host 是 按宿主机网络通信 按宿主机网络通信 none 否 无法通信 只能用link通信 其他容器 否 宿主机端口绑定 通过link通信 用户自定义 按网络实现而定 按网络实现而定 按网络实现而定 南北向通信指容器与宿主机外界的访问机制，东西向流量指同一宿主机上与其他容器相互访问的机制。 host模式由于容器和宿主机共享同一个网络命名空间，换言之，容器的IP地址即为宿主机的IP地址。所以容器可以和宿主机一样，使用宿主机的任意网卡，实现和外界的通信。其网络模型可以参照下图： 采用host模式的容器，可以直接使用宿主机的IP地址与外界进行通信，若宿主机具有公有IP，那么容器也拥有这个公有IP。同时容器内服务的端口也可以使用宿主机的端口，无需额外进行NAT转换，而且由于容器通信时，不再需要通过linuxbridge等方式转发或者数据包的拆封，性能上有很大优势。当然，这种模式有优势，也就有劣势，主要包括以下几个方面： 最明显的就是容器不再拥有隔离、独立的网络栈。容器会与宿主机竞争网络栈的使用，并且容器的崩溃就可能导致宿主机崩溃，在生产环境中，这种问题可能是不被允许的。 容器内部将不再拥有所有的端口资源，因为一些端口已经被宿主机服务、bridge模式的容器端口绑定等其他服务占用掉了。 bridge模式bridge模式是docker默认的，也是开发者最常使用的网络模式。在这种模式下，docker为容器创建独立的网络栈，保证容器内的进程使用独立的网络环境，实现容器之间、容器与宿主机之间的网络栈隔离。同时，通过宿主机上的docker0网桥，容器可以与宿主机乃至外界进行网络通信。其网络模型可以参考下图： 从该网络模型可以看出，容器从原理上是可以与宿主机乃至外界的其他机器通信的。同一宿主机上，容器之间都是连接到docker0这个网桥上的，它可以作为虚拟交换机使容器可以相互通信。然而，由于宿主机的IP地址与容器veth pair的 IP地址均不在同一个网段，故仅仅依靠veth pair和namespace的技术，还不足以使宿主机以外的网络主动发现容器的存在。为了使外界可以访问容器中的进程，docker采用了端口绑定的方式，也就是通过iptables的NAT，将宿主机上的端口流量转发到容器内的端口上。 举一个简单的例子，使用下面的命令创建容器，并将宿主机的3306端口绑定到容器的3306端口： docker run -tid –name db -p 3306:3306 MySQL 在宿主机上，可以通过iptables -t nat -L -n，查到一条DNAT规则： DNAT tcp — 0.0.0.0&#x2F;0 0.0.0.0&#x2F;0 tcp dpt:3306 to:172.17.0.5:3306 上面的172.17.0.5即为bridge模式下，创建的容器IP。 很明显，bridge模式的容器与外界通信时，必定会占用宿主机上的端口，从而与宿主机竞争端口资源，对宿主机端口的管理会是一个比较大的问题。同时，由于容器与外界通信是基于三层上iptables NAT，性能和效率上的损耗是可以预见的。 none模式在这种模式下，容器有独立的网络栈，但不包含任何网络配置，只具有lo这个loopback网卡用于进程通信。也就是说，none模式为容器做了最少的网络设置，但是俗话说得好“少即是多”，在没有网络配置的情况下，通过第三方工具或者手工的方式，开发这任意定制容器的网络，提供了最高的灵活性。 其他容器模式其他网络模式是docker中一种较为特别的网络的模式。在这个模式下的容器，会使用其他容器的网络命名空间，其网络隔离性会处于bridge桥接模式与host模式之间。当容器共享其他容器的网络命名空间，则在这两个容器之间不存在网络隔离，而她们又与宿主机以及除此之外其他的容器存在网络隔离。其网络模型可以参考下图： 在这种模式下的容器可以通过localhost来同一网络命名空间下的其他容器，传输效率较高。而且这种模式还节约了一定数量的网络资源，但它并没有改变容器与外界通信的方式。在一些特殊的场景中非常有用，例如，kubernetes的pod，kubernetes为pod创建一个基础设施容器，同一pod下的其他容器都以其他容器模式共享这个基础设施容器的网络命名空间，相互之间以localhost访问，构成一个统一的整体。 用户定义网络模式在用户定义网络模式下，开发者可以使用任何docker支持的第三方网络driver来定制容器的网络。并且，docker 1.9以上的版本默认自带了bridge和overlay两种类型的自定义网络driver。可以用于集成calico、weave、openvswitch等第三方厂商的网络实现。 除了docker自带的bridge driver，其他的几种driver都可以实现容器的跨主机通信。而基于bdrige driver的网络，docker会自动为其创建iptables规则，保证与其他网络之间、与docker0之间的网络隔离。例如，使用下面的命令创建一个基于bridge driver的自定义网络： docker network create bri1 则docker会自动生成如下的iptables规则，保证不同网络上的容器无法互相通信。 -A DOCKER-ISOLATION -i br-8dba6df70456 -o docker0 -j DROP-A DOCKER-ISOLATION -i docker0 -o br-8dba6df70456 -j DROP 除此之外，bridge driver的所有行为都和默认的bridge模式完全一致。而overlay及其他driver，则可以实现容器的跨主机通信。 docker跨主机容器通信早期大家的跨主机通信方案主要有以下几种： 容器使用host模式：容器直接使用宿主机的网络，这样天生就可以支持跨主机通信。虽然可以解决跨主机通信问题，但这种方式应用场景很有限，容易出现端口冲突，也无法做到隔离网络环境，一个容器崩溃很可能引起整个宿主机的崩溃。 端口绑定：通过绑定容器端口到宿主机端口，跨主机通信时，使用主机IP+端口的方式访问容器中的服务。显而易见，这种方式仅能支持网络栈的四层及以上的应用，并且容器与宿主机紧耦合，很难灵活的处理，可扩展性不佳。 docker外定制容器网络：在容器通过docker创建完成后，然后再通过修改容器的网络命名空间来定义容器网络。典型的就是很久以前的pipework，容器以none模式创建，pipework通过进入容器的网络命名空间为容器重新配置网络，这样容器网络可以是静态IP、vxlan网络等各种方式，非常灵活，容器启动的一段时间内会没有IP，明显无法在大规模场景下使用，只能在实验室中测试使用。 第三方SDN定义容器网络：使用Open vSwitch或Flannel等第三方SDN工具，为容器构建可以跨主机通信的网络环境。这些方案一般要求各个主机上的docker0网桥的cidr不同，以避免出现IP冲突的问题，限制了容器在宿主机上的可获取IP范围。并且在容器需要对集群外提供服务时，需要比较复杂的配置，对部署实施人员的网络技能要求比较高。 上面这些方案有各种各样的缺陷，同时也因为跨主机通信的迫切需求，docker 1.9版本时，官方提出了基于vxlan的overlay网络实现，原生支持容器的跨主机通信。同时，还支持通过libnetwork的plugin机制扩展各种第三方实现，从而以不同的方式实现跨主机通信。就目前社区比较流行的方案来说，跨主机通信的基本实现方案有以下几种： 基于隧道的overlay网络：按隧道类型来说，不同的公司或者组织有不同的实现方案。docker原生的overlay网络就是基于vxlan隧道实现的。ovn则需要通过geneve或者stt隧道来实现的。flannel最新版本也开始默认基于vxlan实现overlay网络。 基于包封装的overlay网络：基于UDP封装等数据包包装方式，在docker集群上实现跨主机网络。典型实现方案有weave、flannel的早期版本。 基于三层实现SDN网络：基于三层协议和路由，直接在三层上实现跨主机网络，并且通过iptables实现网络的安全隔离。典型的方案为Project Calico。同时对不支持三层路由的环境，Project Calico还提供了基于IPIP封装的跨主机网络实现。 下面，本从网络通信模型的角度，对这些方案的通信原理做一个简单的比较，从中可以窥见各种方案在性能上的本质差别。 docker容器的CNM模型首先，科普下docker容器的CNM网络模型，calico、weave等第三方实现都是基于CNM模型与docker集成的。CNM网络模型的结构如下图所示： 在上面的图中： Sandbox代表容器的网络命名空间，包含了容器的完整网络栈，不同的容器之间可以完全隔离。在宿主机上，就表现为独立的网络命名空间。 Endpoint代表容器接入网络的端点，可以形象地认为一个Endpoint对容器来说，就是一张物理网卡。 Network代表一组可以直接相互通信的Endpoint集合，可以基于LinuxBridge或者VLAN实现。在宿主机上，每个网络都是一个独立的网络命名空间，宿主机上同一网络的的容器，都通过veth pair链接到这个网络命名空间上。 docker原生overlay的网络通信模型docker官方文档的示例中，overlay网络是在swarm集群中配置的，但实际上，overlay网络可以独立于swarm集群实现，只需要满足以下前提条件即可。 有consul或者etcd，zookeeper的集群key-value存储服务； 组成集群的所有主机的主机名不允许重复，因为docker守护进程与consul通信时，以主机名相互区分； 所有主机都可以访问集群key-value的服务端口，按具体类型需要打开进行配置。例如docker daemon启动时增加参数–cluster-store&#x3D;etcd:&#x2F;&#x2F;:4001 – -cluster-advertise&#x3D;eth0:2376 overlay网络依赖宿主机三层网络的组播实现，需要在所有宿主机的防火墙上打开下列端口 协议 端口 说明 udp 4789 容器之间流量的vxlan端口 tcp&#x2F;udp 7946 docker守护进程的控制端口 宿主机内核版本10以上（1.9版本时，要求3.16以上） 满足以上条件后，就可以通过docker network命令来创建跨主机的overlay网络了，例如： docker network create -d overlay overlaynet 在集群的不同主机上，使用overlaynet这个网络创建容器，形成如下图所示的网络拓扑： 由于容器和overlay的网络的网络命名空间文件不再操作系统默认的&#x2F;var&#x2F;run&#x2F;netns下，只能手动通过软连接的方式查看。 script1ln -s /var/run/docker/netns /var/run/netns 这样就可以通过ip netns查看到容器和网络的网络命名空间了。 容器的网络命名空间名称可以通过 script1docker inspect -f &#x27;&#123;&#123;.NetworkSettings.SandboxKey&#125;&#125;&#x27; &lt;容器ID&gt; 方式查看到。网络的网络命名空间则是通过docker network ls查看到的网络短ID。 有时候网络的网络命名空间名称前面会带上1-、2-等序号，有时候不带。但不影响网络的通信和操作。 从这个通信过程中来看，跨主机通信过程中的步骤如下： 容器的网络命名空间与overlay网络的网络命名空间通过一对veth pair连接起来，当容器对外通信时，veth pair起到网线的作用，将流量发送到overlay网络的网络命名空间中。 容器的veth pair对端eth2与vxlan设备通过br0这个Linux bridge桥接在一起，br0在同一宿主机上起到虚拟机交换机的作用，如果目标地址在同一宿主机上，则直接通信，如果不再则通过设置在vxlan1这个vxlan设备进行跨主机通信。 vxlan1设备上会在创建时，由docker daemon为其分配vxlan隧道ID，起到网络隔离的作用。 docker主机集群通过key&#x2F;value存储共享数据，在7946端口上，相互之间通过gossip协议学习各个宿主机上运行了哪些容器。守护进程根据这些数据来在vxlan1设备上生成静态MAC转发表。 根据静态MAC转发表的设置，通过UDP端口4789，将流量转发到对端宿主机的网卡上。 根据流量包中的vxlan隧道ID，将流量转发到对端宿主机的overlay网络的网络命名空间中。 对端宿主机的overlay网络的网络命名空间中br0网桥，起到虚拟交换机的作用，将流量根据MAC地址转发到对应容器内部。 虽然上面的网络通信模型可以实现容器的跨主机通信，但还是有一些缺陷，造成实际使用上的不便，例如： 由于vxlan网络与宿主机网络默认不再同一网络环境下，为了解决宿主机与容器的通信问题，docker为overlay网络中的容器额外增加了网卡eth1作为宿主机与容器通信的通道。这样在使用容器服务时，就必须根据访问性质的不同，选择不同的网卡地址，造成使用上的不便。 容器对外暴露服务仍然只能使用端口绑定的方式，外界无法简单地直接使用容器IP访问容器服务。 从上面的通信过程中来看，原生的overlay网络通信必须依赖docker守护进程及key&#x2F;value存储来实现网络通信，约束较多，容器在启动后的一段时间内可能无法跨主机通信，这对一些比较敏感的应用来说是不可靠的。 weave网络通信模型weave通过在docker集群的每个主机上启动虚拟的路由器，将主机作为路由器，形成互联互通的网络拓扑，在此基础上，实现容器的跨主机通信。其主机网络拓扑参见下图： 如上图所示，在每一个部署Docker的主机（可能是物理机也可能是虚拟机）上都部署有一个W（即weave router，它本身也可以以一个容器的形式部署）。weave网络是由这些weave routers组成的对等端点（peer）构成，并且可以通过weave命令行定制网络拓扑。 每个部署了weave router的主机之间都会建立TCP和UDP两个连接，保证weave router之间控制面流量和数据面流量的通过。控制面由weave routers之间建立的TCP连接构成，通过它进行握手和拓扑关系信息的交换通信。控制面的通信可以被配置为加密通信。而数据面由weave routers之间建立的UDP连接构成，这些连接大部分都会加密。这些连接都是全双工的，并且可以穿越防火墙。 当容器通过weave进行跨主机通信时，其网络通信模型可以参考下图： 从上面的网络模型图中可以看出，对每一个weave网络中的容器，weave都会创建一个网桥，并且在网桥和每个容器之间创建一个veth pair，一端作为容器网卡加入到容器的网络命名空间中，并为容器网卡配置ip和相应的掩码，一端连接在网桥上，最终通过宿主机上weave router将流量转发到对端主机上。其基本过程如下： 容器流量通过veth pair到达宿主机上weave router网桥上。 weave router在混杂模式下使用pcap在网桥上截获网络数据包，并排除由内核直接通过网桥转发的数据流量，例如本子网内部、本地容器之间的数据以及宿主机和本地容器之间的流量。捕获的包通过UDP转发到所其他主机的weave router端。 在接收端，weave router通过pcap将包注入到网桥上的接口，通过网桥的上的veth pair，将流量分发到容器的网卡上。 weave默认基于UDP承载容器之间的数据包，并且可以完全自定义整个集群的网络拓扑，但从性能和使用角度来看，还是有比较大的缺陷的： weave自定义容器数据包的封包解包方式，不够通用，传输效率比较低，性能上的损失也比较大。 集群配置比较负载，需要通过weave命令行来手工构建网络拓扑，在大规模集群的情况下，加重了管理员的负担。 calico网络通信模型calico是纯三层的SDN 实现，它基于BPG 协议和Linux自身的路由转发机制，不依赖特殊硬件，容器通信也不依赖iptables NAT或Tunnel 等技术。能够方便的部署在物理服务器、虚拟机（如 OpenStack）或者容器环境下。同时calico自带的基于iptables的ACL管理组件非常灵活，能够满足比较复杂的安全隔离需求。 在主机网络拓扑的组织上，calico的理念与weave类似，都是在主机上启动虚拟机路由器，将每个主机作为路由器使用，组成互联互通的网络拓扑。当安装了calico的主机组成集群后，其拓扑如下图所示： 每个主机上都部署了calico&#x2F;node作为虚拟路由器，并且可以通过calico将宿主机组织成任意的拓扑集群。当集群中的容器需要与外界通信时，就可以通过BGP协议将网关物理路由器加入到集群中，使外界可以直接访问容器IP，而不需要做任何NAT之类的复杂操作。 当容器通过calico进行跨主机通信时，其网络通信模型如下图所示： 从上图可以看出，当容器创建时，calico为容器生成veth pair，一端作为容器网卡加入到容器的网络命名空间，并设置IP和掩码，一端直接暴露在宿主机上，并通过设置路由规则，将容器IP暴露到宿主机的通信路由上。于此同时，calico为每个主机分配了一段子网作为容器可分配的IP范围，这样就可以根据子网的CIDR为每个主机生成比较固定的路由规则。 当容器需要跨主机通信时，主要经过下面的简单步骤： 容器流量通过veth pair到达宿主机的网络命名空间上。 根据容器要访问的IP所在的子网CIDR和主机上的路由规则，找到下一跳要到达的宿主机IP。 流量到达下一跳的宿主机后，根据当前宿主机上的路由规则，直接到达对端容器的veth pair插在宿主机的一端，最终进入容器。 从上面的通信过程来看，跨主机通信时，整个通信路径完全没有使用NAT或者UDP封装，性能上的损耗确实比较低。但正式由于calico的通信机制是完全基于三层的，这种机制也带来了一些缺陷，例如： calico目前只支持TCP、UDP、ICMP、ICMPv6协议，如果使用其他四层协议（例如NetBIOS协议），建议使用weave、原生overlay等其他overlay网络实现。 基于三层实现通信，在二层上没有任何加密包装，因此只能在私有的可靠网络上使用。 流量隔离基于iptables实现，并且从etcd中获取需要生成的隔离规则，有一些性能上的隐患。 来源转自 https://www.cnblogs.com/ilinuxer/p/6680205.html","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"sqlyog执行sql查询1064报错","slug":"2019-12/03-sqlyog执行sql查询报错","date":"2019-12-03T01:06:09.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/03/2019-12/03-sqlyog执行sql查询报错/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/03/2019-12/03-sqlyog%E6%89%A7%E8%A1%8Csql%E6%9F%A5%E8%AF%A2%E6%8A%A5%E9%94%99/","excerpt":"MySQL8.0.16版本在SQLYog8.14内执行查询均报错1064的解决","text":"MySQL8.0.16版本在SQLYog8.14内执行查询均报错1064的解决","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"docker运行java后端脚本","slug":"2019-12/03-docker运行java后端脚本","date":"2019-12-03T00:50:53.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/03/2019-12/03-docker运行java后端脚本/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/03/2019-12/03-docker%E8%BF%90%E8%A1%8Cjava%E5%90%8E%E7%AB%AF%E8%84%9A%E6%9C%AC/","excerpt":"script1234567891011echo &quot;执行容器启动&quot;;docker stop java-web;if [ $? -ne 0 ]; then echo &quot;未发现需要删除的容器&quot;;else docker rm java-web;fidocker run -it -d -m 700m --memory-reservation 350m --restart=always --name=java-web -v /home/ppp:/home/ppp --privileged=true --net=host -p xxxx:xxxx centosjdk:v1 java -jar -Duser.timezone=GMT+08 /home/ppp/project-0.0.1.jar;if [ $? -ne 0 ]; then echo &quot;启动server服务器失败&quot;;fi","text":"script1234567891011echo &quot;执行容器启动&quot;;docker stop java-web;if [ $? -ne 0 ]; then echo &quot;未发现需要删除的容器&quot;;else docker rm java-web;fidocker run -it -d -m 700m --memory-reservation 350m --restart=always --name=java-web -v /home/ppp:/home/ppp --privileged=true --net=host -p xxxx:xxxx centosjdk:v1 java -jar -Duser.timezone=GMT+08 /home/ppp/project-0.0.1.jar;if [ $? -ne 0 ]; then echo &quot;启动server服务器失败&quot;;fi","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"},{"name":"代码片段","slug":"代码片段","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"}]},{"title":"新建frpc的dockerfile","slug":"2019-12/02-新建frpc的dockerfile","date":"2019-12-02T15:17:55.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/02/2019-12/02-新建frpc的dockerfile/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/02/2019-12/02-%E6%96%B0%E5%BB%BAfrpc%E7%9A%84dockerfile/","excerpt":"使用方法参考： 菜鸟教程-Docker Dockerfile oldiy&#x2F;frpc dockerfile 文件内容 script12345678910111213141516171819FROM alpine:3.8WORKDIR /ARG FRP_VERSION=0.26.0RUN set -x &amp;&amp; \\ wget --no-check-certificate https://github.com/fatedier/frp/releases/download/v$&#123;FRP_VERSION&#125;/frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \\ tar xzf frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \\ cd frp_$&#123;FRP_VERSION&#125;_linux_amd64 &amp;&amp; \\ mkdir /frp &amp;&amp; \\ mv frpc /frpc &amp;&amp; \\ mv frpc.ini /frp/frpc.ini &amp;&amp; \\ cd .. &amp;&amp; \\ rm -rf *.tar.gz &amp;&amp; \\ rm -rf frp_$&#123;FRP_VERSION&#125;_linux_amd64VOLUME /frpCMD /frpc -c /frp/frpc.ini 新建文件 &#x2F;dockerfile&#x2F;Dockerfile ,把上面的内容放进去，然后在这个目录内执行 script1docker build --build-arg FRP_VERSION=0.30.0 -t frpc:0.30.0 . 执行镜像 推荐启动命令 script1docker run -d --restart always -v /volume1/docker/frpc/conf/frpc.ini:/frp/frpc.ini oldiy/fprc:版本号 script1docker run -d --name frpc -v /data/frp/frpc.ini:/frp/frpc.ini -p 80:80 -p 32317:32317 frpc:0.30.0","text":"使用方法参考： 菜鸟教程-Docker Dockerfile oldiy&#x2F;frpc dockerfile 文件内容 script12345678910111213141516171819FROM alpine:3.8WORKDIR /ARG FRP_VERSION=0.26.0RUN set -x &amp;&amp; \\ wget --no-check-certificate https://github.com/fatedier/frp/releases/download/v$&#123;FRP_VERSION&#125;/frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \\ tar xzf frp_$&#123;FRP_VERSION&#125;_linux_amd64.tar.gz &amp;&amp; \\ cd frp_$&#123;FRP_VERSION&#125;_linux_amd64 &amp;&amp; \\ mkdir /frp &amp;&amp; \\ mv frpc /frpc &amp;&amp; \\ mv frpc.ini /frp/frpc.ini &amp;&amp; \\ cd .. &amp;&amp; \\ rm -rf *.tar.gz &amp;&amp; \\ rm -rf frp_$&#123;FRP_VERSION&#125;_linux_amd64VOLUME /frpCMD /frpc -c /frp/frpc.ini 新建文件 &#x2F;dockerfile&#x2F;Dockerfile ,把上面的内容放进去，然后在这个目录内执行 script1docker build --build-arg FRP_VERSION=0.30.0 -t frpc:0.30.0 . 执行镜像 推荐启动命令 script1docker run -d --restart always -v /volume1/docker/frpc/conf/frpc.ini:/frp/frpc.ini oldiy/fprc:版本号 script1docker run -d --name frpc -v /data/frp/frpc.ini:/frp/frpc.ini -p 80:80 -p 32317:32317 frpc:0.30.0","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"删除数据库中最新一条记录","slug":"2019-12/02-删除数据库中最新一条记录","date":"2019-12-02T07:13:04.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/02/2019-12/02-删除数据库中最新一条记录/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/02/2019-12/02-%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9C%80%E6%96%B0%E4%B8%80%E6%9D%A1%E8%AE%B0%E5%BD%95/","excerpt":"查询数据库中最新的一条记录 1SELECT id FROM affair ORDER BY create_time DESC LIMIT 0,1; 删除这条最新的记录 1DELETE a FROM affair a,(SELECT id FROM affair b ORDER BY b.create_time DESC LIMIT 0,1) b WHERE a.id = b.id; DELETE a 指的是后面 affair a，子select查询结果重命名为b了。","text":"查询数据库中最新的一条记录 1SELECT id FROM affair ORDER BY create_time DESC LIMIT 0,1; 删除这条最新的记录 1DELETE a FROM affair a,(SELECT id FROM affair b ORDER BY b.create_time DESC LIMIT 0,1) b WHERE a.id = b.id; DELETE a 指的是后面 affair a，子select查询结果重命名为b了。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"解决Idea的SSH工具中文乱码问题","slug":"2019-12/02-解决Idea的SSH工具中文乱码问题","date":"2019-12-02T03:40:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/02/2019-12/02-解决Idea的SSH工具中文乱码问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/02/2019-12/02-%E8%A7%A3%E5%86%B3Idea%E7%9A%84SSH%E5%B7%A5%E5%85%B7%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/","excerpt":"修改设置，File&gt;Settings&gt;Tools&gt;SSH Terminal&gt; Default encoding设为utf-8即可 这是对本工程生效的，想对未来新打开的工程生效就修改Other Settings&gt;&gt;settings for new project","text":"修改设置，File&gt;Settings&gt;Tools&gt;SSH Terminal&gt; Default encoding设为utf-8即可 这是对本工程生效的，想对未来新打开的工程生效就修改Other Settings&gt;&gt;settings for new project","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"},{"name":"编码问题","slug":"编码问题","permalink":"https://anarckk.github.io/myvolantis/tags/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"}]},{"title":"vsftp上传文件权限问题","slug":"2019-12/01-vsftp上传文件权限问题","date":"2019-12-01T12:10:21.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-vsftp上传文件权限问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-vsftp%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/","excerpt":"file_open_mode上传档案的权限，与chmod 所使用的数值相同。如果希望上传的文件可以执行，设此值为0777。 local_umask&#x3D;022 这是指定本地用户上传后的文件权限设置 umask是unix操作系统的概念，umask决定目录和文件被创建时得到的初始权限umask &#x3D; 022 时，新建的目录 权限是755，文件的权限是 644umask &#x3D; 077 时，新建的目录 权限是700，文件的权限时 600vsftpd的local_umask和anon_umask借鉴了它默认情况下vsftp上传之后文件的权限是600，目录权限是700想要修改上传之后文件的权限，有两种情况如果使用vsftp的是本地用户则要修改配置文件中的 local_umask 的值如果使用vsftp的是虚拟用户则要修改配置文件中的 anon_umask 的值","text":"file_open_mode上传档案的权限，与chmod 所使用的数值相同。如果希望上传的文件可以执行，设此值为0777。 local_umask&#x3D;022 这是指定本地用户上传后的文件权限设置 umask是unix操作系统的概念，umask决定目录和文件被创建时得到的初始权限umask &#x3D; 022 时，新建的目录 权限是755，文件的权限是 644umask &#x3D; 077 时，新建的目录 权限是700，文件的权限时 600vsftpd的local_umask和anon_umask借鉴了它默认情况下vsftp上传之后文件的权限是600，目录权限是700想要修改上传之后文件的权限，有两种情况如果使用vsftp的是本地用户则要修改配置文件中的 local_umask 的值如果使用vsftp的是虚拟用户则要修改配置文件中的 anon_umask 的值 参考链接来源","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"}]},{"title":"linux下mv以及cp命令","slug":"2019-12/01-linux下mv以及cp命令","date":"2019-12-01T11:48:58.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-linux下mv以及cp命令/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-linux%E4%B8%8Bmv%E4%BB%A5%E5%8F%8Acp%E5%91%BD%E4%BB%A4/","excerpt":"cp命令cp是拷贝copy的意思，其作用也就是拷贝 拷贝文件夹script12cp -r /home/packageA/* /home/cp/packageB/cp -r /home/packageA/. /home/cp/packageB/ 将一个文件夹复制到另一个文件夹下script1cp -r /home/packageA /home/packageB","text":"cp命令cp是拷贝copy的意思，其作用也就是拷贝 拷贝文件夹script12cp -r /home/packageA/* /home/cp/packageB/cp -r /home/packageA/. /home/cp/packageB/ 将一个文件夹复制到另一个文件夹下script1cp -r /home/packageA /home/packageB mv命令move的简写，意思是移动 移动一个文件夹到另一个文件夹下面将 &#x2F;home&#x2F;packageA 移动到 &#x2F;home&#x2F;packageB 底下 script12mv /home/packageA /home/packageB/mv /home/packageA /home/packageB 如果是移动文件夹下的所有文件的话就可以文件夹后面跟上 &#x2F;* script1mv /home/packageA/* /home/packageB/","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"}]},{"title":"Docker容器的重启策略及docker run的--restart选项详解","slug":"2019-12/01-Docker容器的重启策略及docker-run的-restart选项详解","date":"2019-12-01T10:54:57.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-Docker容器的重启策略及docker-run的-restart选项详解/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-Docker%E5%AE%B9%E5%99%A8%E7%9A%84%E9%87%8D%E5%90%AF%E7%AD%96%E7%95%A5%E5%8F%8Adocker-run%E7%9A%84-restart%E9%80%89%E9%A1%B9%E8%AF%A6%E8%A7%A3/","excerpt":"run的–restart选项Docker容器的重启策略Docker容器的重启策略是面向生产环境的一个启动策略，在开发过程中可以忽略该策略。 Docker容器的重启都是由Docker守护进程完成的，因此与守护进程息息相关。 Docker容器的重启策略如下： 12345no，默认策略，在容器退出时不重启容器on-failure，在容器非正常退出时（退出状态非0），才会重启容器on-failure:3，在容器非正常退出时重启容器，最多重启3次always，在容器退出时总是重启容器unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器","text":"run的–restart选项Docker容器的重启策略Docker容器的重启策略是面向生产环境的一个启动策略，在开发过程中可以忽略该策略。 Docker容器的重启都是由Docker守护进程完成的，因此与守护进程息息相关。 Docker容器的重启策略如下： 12345no，默认策略，在容器退出时不重启容器on-failure，在容器非正常退出时（退出状态非0），才会重启容器on-failure:3，在容器非正常退出时重启容器，最多重启3次always，在容器退出时总是重启容器unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器 Docker容器的退出状态码docker run的退出状态码如下： 1234560，表示正常退出非0，表示异常退出（退出状态码采用chroot标准）125，Docker守护进程本身的错误126，容器启动后，要执行的默认命令无法调用127，容器启动后，要执行的默认命令不存在其他命令状态码，容器启动后正常执行命令，退出命令时该命令的返回状态码作为容器的退出状态码 docker run的–restart选项通过–restart选项，可以设置容器的重启策略，以决定在容器退出时Docker守护进程是否重启刚刚退出的容器。 –restart选项通常只用于detached模式的容器。 –restart选项不能与–rm选项同时使用。显然，–restart选项适用于detached模式的容器，而–rm选项适用于foreground模式的容器。 在docker ps查看容器时，对于使用了–restart选项的容器，其可能的状态只有Up或Restarting两种状态。 示例： script12docker run -d --restart=always ba-208docker run -d --restart=on-failure:10 ba-208 补充： 查看容器重启次数 script1docker inspect -f &quot;&#123;&#123; .RestartCount &#125;&#125;&quot; ba-208 查看容器最后一次的启动时间 script1docker inspect -f &quot;&#123;&#123; .State.StartedAt &#125;&#125;&quot; ba-208 参考链接：https://docs.docker.com/engine/reference/run/ 来源Docker容器的重启策略及docker run的–restart选项详解","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"docker安装vsftpd","slug":"2019-12/01-docker安装vsftpd","date":"2019-12-01T10:39:15.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-docker安装vsftpd/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-docker%E5%AE%89%E8%A3%85vsftpd/","excerpt":"安装vsftpd首先，搜索可用的镜像,然后安装script12docker search vsftpd #寻找vsftpd的镜像docker pull fauria/vsftpd #把镜像pull到本地","text":"安装vsftpd首先，搜索可用的镜像,然后安装script12docker search vsftpd #寻找vsftpd的镜像docker pull fauria/vsftpd #把镜像pull到本地 创建vsftpd的containerscript123456789docker run -d -p 21:21 -p 20:20 -p 21100-21110:21100-21110 -v /Ftpfile:/home/vsftpd -e FTP_USER=myuser -e FTP_PASS=mypass -e PASV_ADDRESS=192.168.120.88 -e PASV_MIN_PORT=21100 -e PASV_MAX_PORT=21110 --name vsftpd --restart=always fauria/vsftpd#-p进行端口绑定映射# -v进行文件目录的映射 FTP_UESR 和FTP_PASS如果设定了会在container里面的 #/etc/vsftpd/virtual_users.txt #PASV_MIN_PORT和PASV_MAX_PORT映射的是被动模式下端口使用范围 #PASV_ADDRESS指的的宿主机地址 修改、完善vsftpd的设置script123456789101112131415#1、我们先进入container里面 docker exec -i -t vsftpd bash #2、修改并生成虚拟用户模式下的用户db文件 vi /etc/vsftpd/virtual_users.txt #编辑配置文件写入用户跟密码 #假如我们添加了user用户 mkdir /home/vsftpd/user #建立新用户文件夹 /usr/bin/db_load -T -t hash -f /etc/vsftpd/virtual_users.txt /etc/vsftpd/virtual_users.db #把登录的验证信息写入数据库 重启container，验证结果script1docker restart vsftpd 参考来源Docker实例—搭建FTP服务器","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"在docker中安装nginx","slug":"2019-12/01-在docker中安装nginx","date":"2019-12-01T02:42:00.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-在docker中安装nginx/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-%E5%9C%A8docker%E4%B8%AD%E5%AE%89%E8%A3%85nginx/","excerpt":"查看可用的 Nginx 版本访问 Nginx 镜像库地址： https://hub.docker.com/_/nginx?tab=tags。可以通过 Sort by 查看其他版本的 Nginx，默认是最新版本 nginx:latest。 此外，我们还可以用 docker search nginx 命令来查看可用版本： script12345678$ docker search nginxNAME DESCRIPTION STARS OFFICIAL AUTOMATEDnginx Official build of Nginx. 3260 [OK] jwilder/nginx-proxy Automated Nginx reverse proxy for docker c... 674 [OK]richarvey/nginx-php-fpm Container running Nginx + PHP-FPM capable ... 207 [OK]million12/nginx-php Nginx + PHP-FPM 5.5, 5.6, 7.0 (NG), CentOS... 67 [OK]maxexcloo/nginx-php Docker framework container with Nginx and ... 57 [OK]... 取最新版的 Nginx 镜像script1docker pull nginx:latest","text":"查看可用的 Nginx 版本访问 Nginx 镜像库地址： https://hub.docker.com/_/nginx?tab=tags。可以通过 Sort by 查看其他版本的 Nginx，默认是最新版本 nginx:latest。 此外，我们还可以用 docker search nginx 命令来查看可用版本： script12345678$ docker search nginxNAME DESCRIPTION STARS OFFICIAL AUTOMATEDnginx Official build of Nginx. 3260 [OK] jwilder/nginx-proxy Automated Nginx reverse proxy for docker c... 674 [OK]richarvey/nginx-php-fpm Container running Nginx + PHP-FPM capable ... 207 [OK]million12/nginx-php Nginx + PHP-FPM 5.5, 5.6, 7.0 (NG), CentOS... 67 [OK]maxexcloo/nginx-php Docker framework container with Nginx and ... 57 [OK]... 取最新版的 Nginx 镜像script1docker pull nginx:latest 正式安装在宿主机中创建挂载目录我原来目录已经有了 &#x2F;data&#x2F;blog&#x2F;public &#x2F;data&#x2F;blog&#x2F;static加密上也有了 &#x2F;htpasswd&#x2F;passwd.db script1mkdir -p /data/blog/nginx/&#123;conf,log&#125; 将配置文件放到挂载目录12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576user www-data;worker_processes auto;pid /run/nginx.pid;events &#123; worker_connections 768; # multi_accept on;&#125;http &#123; ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable &quot;msie6&quot;; gzip_vary on; gzip_proxied any; gzip_comp_level 6; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## # include /etc/nginx/conf.d/*.conf; # include /etc/nginx/sites-enabled/*; server&#123; listen 80; server_name anarckk.best; #你的serverName location / &#123; root /usr/share/nginx/html; index index.html; &#125; location ^~ /static/ &#123; root /usr/share/nginx/; &#125; &#125;&#125; 启动容器script1docker run --name blog -d -p 4399:80 -v /data/blog/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/blog/nginx/log:/var/log/nginx -v /data/blog/public:/usr/share/nginx/html -v /data/blog/static:/usr/share/nginx/static -v /htpasswd/passwd.db:/usr/share/nginx/passwd.db nginx:latest 参考链接https://www.runoob.com/docker/docker-install-nginx.html https://www.cnblogs.com/javafucker/p/10033589.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"Docker 命令大全","slug":"2019-12/01-Docker-命令大全","date":"2019-12-01T02:31:56.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/12/01/2019-12/01-Docker-命令大全/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/12/01/2019-12/01-Docker-%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/","excerpt":"Docker 命令大全Docker Compose菜鸟教程-Docker ps 命令菜鸟教程-Docker rm 命令菜鸟教程-Docker run 命令 docker hub 容器生命周期管理ps 命令docker ps : 列出容器 script1docker ps [OPTIONS] OPTIONS说明： 12345678-a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。--format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。--no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。","text":"Docker 命令大全Docker Compose菜鸟教程-Docker ps 命令菜鸟教程-Docker rm 命令菜鸟教程-Docker run 命令 docker hub 容器生命周期管理ps 命令docker ps : 列出容器 script1docker ps [OPTIONS] OPTIONS说明： 12345678-a :显示所有的容器，包括未运行的。-f :根据条件过滤显示的内容。--format :指定返回值的模板文件。-l :显示最近创建的容器。-n :列出最近创建的n个容器。--no-trunc :不截断输出。-q :静默模式，只显示容器编号。-s :显示总的文件大小。 实例 列出所有在运行的容器信息。 script1234runoob@runoob:~$ docker psCONTAINER ID IMAGE COMMAND ... PORTS NAMES09b93464c2f7 nginx:latest &quot;nginx -g &#x27;daemon off&quot; ... 80/tcp, 443/tcp myrunoob96f7f14e99ab mysql:5.6 &quot;docker-entrypoint.sh&quot; ... 0.0.0.0:3306-&gt;3306/tcp mymysql 输出详情介绍： CONTAINER ID: 容器 ID。IMAGE: 使用的镜像。COMMAND: 启动容器时运行的命令。CREATED: 容器的创建时间。STATUS: 容器状态。 状态有7种：created（已创建）restarting（重启中）running（运行中）removing（迁移中）paused（暂停）exited（停止）dead（死亡） PORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。NAMES: 自动分配的容器名称。 列出最近创建的5个容器信息。 script1234567runoob@runoob:~$ docker ps -n 5CONTAINER ID IMAGE COMMAND CREATED 09b93464c2f7 nginx:latest &quot;nginx -g &#x27;daemon off&quot; 2 days ago ... b8573233d675 nginx:latest &quot;/bin/bash&quot; 2 days ago ... b1a0703e41e7 nginx:latest &quot;nginx -g &#x27;daemon off&quot; 2 days ago ... f46fb1dec520 5c6e1090e771 &quot;/bin/sh -c &#x27;set -x \\t&quot; 2 days ago ... a63b4a5597de 860c279d2fec &quot;bash&quot; 2 days ago ... 列出所有创建的容器ID。 script123456789101112runoob@runoob:~$ docker ps -a -q09b93464c2f7b8573233d675b1a0703e41e7f46fb1dec520a63b4a5597de6a4aa42e947bde7bb36e796843a432b73776664a8ab1a585ba52eb632bbd... 根据标签过滤 script123$ docker run -d --name=test-nginx --label color=blue nginx$ docker ps --filter &quot;label=color&quot;$ docker ps --filter &quot;label=color=blue&quot; 根据名称过滤 script1$ docker ps --filter&quot;name=test-nginx&quot; 根据状态过滤 script123$ docker ps -a --filter &#x27;exited=0&#x27;$ docker ps --filter status=running$ docker ps --filter status=paused 根据镜像过滤 script12345#镜像名称$ docker ps --filter ancestor=nginx#镜像ID$ docker ps --filter ancestor=d0e008c6cf02 根据启动顺序过滤 script12$ docker ps -f before=9c3527ed70ce$ docker ps -f since=6e63f6ff38b0 rm 命令docker rm ：删除一个或多个容器。 script1docker rm [OPTIONS] CONTAINER [CONTAINER...] OPTIONS说明： -f :通过 SIGKILL 信号强制删除一个运行中的容器。 -l :移除容器间的网络连接，而非容器本身。 -v :删除与容器关联的卷。 实例 强制删除容器 db01、db02： script1docker rm -f db01 db02 移除容器 nginx01 对容器 db01 的连接，连接名 db： script1docker rm -l db 删除容器 nginx01, 并删除容器挂载的数据卷： script1docker rm -v nginx01 删除所有已经停止的容器： script1docker rm $(docker ps -a -q) run 命令docker run ：创建一个新的容器并运行一个命令 script1docker run [OPTIONS] IMAGE [COMMAND] [ARG...] OPTIONS说明： 123456789101112131415161718-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；-d: 后台运行容器，并返回容器ID；-i: 以交互模式运行容器，通常与 -t 同时使用；-P: 随机端口映射，容器内部端口随机映射到主机的高端口-p: 指定端口映射，格式为：主机(宿主)端口:容器端口-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；--name=&quot;nginx-lb&quot;: 为容器指定一个名称；--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；-h &quot;mars&quot;: 指定容器的hostname；-e username=&quot;ritchie&quot;: 设置环境变量；--env-file=[]: 从指定文件读入环境变量；--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；-m :设置容器使用内存最大值；--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；--link=[]: 添加链接到另一个容器；--expose=[]: 开放一个端口或一组端口；--volume , -v: 绑定一个卷,格式为 宿主目录:容器目录 实例 使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。 script1docker run --name mynginx -d nginx:latest 使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。 script1docker run -P -d nginx:latest 使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 &#x2F;data 映射到容器的 &#x2F;data。 第一个&#x2F;data是宿主目录，第二个&#x2F;data是容器目录 script1docker run -p 80:80 -v /data:/data -d nginx:latest 绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。 script1$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash 使用镜像nginx:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。 script12runoob@runoob:~$ docker run -it nginx:latest /bin/bashroot@b8573233d675:/# start&#x2F;stop&#x2F;restart 命令docker start :启动一个或多个已经被停止的容器 docker stop :停止一个运行中的容器 docker restart :重启容器 script123docker start [OPTIONS] CONTAINER [CONTAINER...]docker stop [OPTIONS] CONTAINER [CONTAINER...]docker restart [OPTIONS] CONTAINER [CONTAINER...] 实例 启动已被停止的容器myrunoob script1docker start myrunoob 停止运行中的容器myrunoob script1docker stop myrunoob 重启容器myrunoob script1docker restart myrunoob exec 命令docker exec ：在运行的容器中执行命令 script1docker exec [OPTIONS] CONTAINER COMMAND [ARG...] OPTIONS说明： 123-d :分离模式: 在后台运行-i :即使没有附加也保持STDIN 打开-t :分配一个伪终端 实例 在容器 mynginx 中以交互模式执行容器内 &#x2F;root&#x2F;runoob.sh 脚本: script12runoob@runoob:~$ docker exec -it mynginx /bin/sh /root/runoob.shhttp://www.runoob.com/ 在容器 mynginx 中开启一个交互模式的终端: script12runoob@runoob:~$ docker exec -i -t mynginx /bin/bashroot@b1a0703e41e7:/# 也可以通过 docker ps -a 命令查看已经在运行的容器，然后使用容器 ID 进入容器。 查看已经在运行的容器 ID： script1234# docker ps -a ...9df70f9a0714 openjdk &quot;/usercode/script.sh…&quot; ... 第一列的 9df70f9a0714 就是容器 ID。 通过 exec 命令对指定的容器执行 bash: script1# docker exec -it 9df70f9a0714 /bin/bash 本地镜像管理rmi 命令docker rmi : 删除本地一个或多少镜像。 语法 script1docker rmi [OPTIONS] IMAGE [IMAGE...] OPTIONS说明： 12-f :强制删除--no-prune :不移除该镜像的过程镜像，默认移除 实例script1234root@runoob:~# docker rmi -f runoob/ubuntu:v4Untagged: runoob/ubuntu:v4Deleted: sha256:1c06aa18edee44230f93a90a7d88139235de12cd4c089d41eed8419b503072beDeleted: sha256:85feb446e89a28d58ee7d80ea5ce367eebb7cec70f0ec18aa4faa874cbd97c73","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"转载-Avada & Enfold & Betheme：最棒的三个外贸建站英文主题","slug":"2019-11/30-转载-Avada-Enfold-Betheme：最棒的三个外贸建站英文主题","date":"2019-11-30T08:17:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/30/2019-11/30-转载-Avada-Enfold-Betheme：最棒的三个外贸建站英文主题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/30/2019-11/30-%E8%BD%AC%E8%BD%BD-Avada-Enfold-Betheme%EF%BC%9A%E6%9C%80%E6%A3%92%E7%9A%84%E4%B8%89%E4%B8%AA%E5%A4%96%E8%B4%B8%E5%BB%BA%E7%AB%99%E8%8B%B1%E6%96%87%E4%B8%BB%E9%A2%98/","excerpt":"文章原始地址","text":"文章原始地址","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[]},{"title":"莫名其妙买下了一个域名","slug":"2019-11/30-莫名其妙买下了一个域名","date":"2019-11-30T07:37:03.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/30/2019-11/30-莫名其妙买下了一个域名/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/30/2019-11/30-%E8%8E%AB%E5%90%8D%E5%85%B6%E5%A6%99%E4%B9%B0%E4%B8%8B%E4%BA%86%E4%B8%80%E4%B8%AA%E5%9F%9F%E5%90%8D/","excerpt":"事情的经过是这样的，我从frp群里找到一个人的博客，http://olioli.xyz/ 上面第一篇是《免费顶级域名.best一年》 dynadot黑五活动 可以撸免费BEST域名一个&#x2F;一年 打开 http://1t.click/bqBU 直接搜索想要的Best域名 结账时候输入优惠码 BFREEBEST 即可免费 于是我就点进去了，进去之后是一个网站，名字叫dynadot，我在搜索栏里搜索了anarckk.best域名，然后下单，跟文章说的一样，输入了BFREEBEST，然后点击支付，然后注册账号，然后就买上了。。。 黑人问号","text":"事情的经过是这样的，我从frp群里找到一个人的博客，http://olioli.xyz/ 上面第一篇是《免费顶级域名.best一年》 dynadot黑五活动 可以撸免费BEST域名一个&#x2F;一年 打开 http://1t.click/bqBU 直接搜索想要的Best域名 结账时候输入优惠码 BFREEBEST 即可免费 于是我就点进去了，进去之后是一个网站，名字叫dynadot，我在搜索栏里搜索了anarckk.best域名，然后下单，跟文章说的一样，输入了BFREEBEST，然后点击支付，然后注册账号，然后就买上了。。。 黑人问号 然后在这里设置DNS 最后用这个网址进行ping测试，没毛病，五分钟左右，dns解析就生效了。 http://ping.chinaz.com/ 关于DNS配置有以下几种DNS记录类型： A 一个主机地址的意思 CNAME - 将域名指向另外一个域名 Forward AAAA ipv6地址，有形象生动的意味在 TXT - 文本长度限制512，通常做SPF记录（反垃圾邮件） Stealth Forward MX - 将域名指向邮件服务器地址 Email Forward 更多 NS - 将子域名指定其他DNS服务器解析SRV - 记录提供特定的服务的服务器CAA - CA证书颁发机构授权校验 CNAME百科 CNAME 被称为规范名字。这种记录允许您将多个名字映射到同一台计算机。 通常用于同时提供WWW和MAIL服务的计算机。例如，有一台计算机名为“r0WSPFSx58.”（A记录）。 它同时提供WWW和MAIL服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW和MAIL。 同样的方法可以用于当您拥有多个域名需要指向同一服务器IP，此时您就可以将一个域名做A记录指向服务器IP，然后将其他的域名做别名(即CNAME)到A记录的域名上；那么当您的服务器IP地址变更时，您就可以不必对一个一个域名做更改指向了，只需要更改A记录的那个域名到服务器新IP上，其他做别名（即CNAME）的那些域名的指向将自动更改到新的IP地址上（以上操作均需要在DNS处执行）。 生存时间TTLDNS的生存时间吧，那如果修改，得1个小时候之后，子服务器的dns缓存因为到期清理重新访问才能更新了。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[]},{"title":"Nginx 代理静态资源","slug":"2019-11/30-Nginx-代理静态资源","date":"2019-11-30T05:03:00.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/30/2019-11/30-Nginx-代理静态资源/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/30/2019-11/30-Nginx-%E4%BB%A3%E7%90%86%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/","excerpt":"1234# 静态资源发布location ^~ /web-resource/ &#123; root /data/;&#125; &#x2F;web-resource&#x2F;videos&#x2F;xxxx.mp4 会到 &#x2F;data&#x2F;web-resource&#x2F;videos&#x2F;xxxx.mp4 里去找是否有这个文件。也就是root地址会拼接上网络地址。","text":"1234# 静态资源发布location ^~ /web-resource/ &#123; root /data/;&#125; &#x2F;web-resource&#x2F;videos&#x2F;xxxx.mp4 会到 &#x2F;data&#x2F;web-resource&#x2F;videos&#x2F;xxxx.mp4 里去找是否有这个文件。也就是root地址会拼接上网络地址。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"}]},{"title":"Markdown表格合并单元格","slug":"2019-11/30-Markdown表格合并单元格","date":"2019-11-30T03:56:50.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/30/2019-11/30-Markdown表格合并单元格/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/30/2019-11/30-Markdown%E8%A1%A8%E6%A0%BC%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/","excerpt":"markdown 本身的表格不支持合并单元格，但是markdown支持html代码。所以，直接用table标签来做 跨行合并：rowspan 跨列合并：colspan","text":"markdown 本身的表格不支持合并单元格，但是markdown支持html代码。所以，直接用table标签来做 跨行合并：rowspan 跨列合并：colspan 列合并1234567891011121314151617181920&lt;table&gt; &lt;tr&gt; &lt;th&gt;属性&lt;/th&gt; &lt;th&gt;属性值&lt;/th&gt; &lt;th&gt;描述&lt;/th&gt; &lt;/tr &gt; &lt;tr &gt; &lt;td rowspan=&quot;3&quot;&gt;type&lt;/td&gt; &lt;td&gt;text&lt;/td&gt; &lt;td&gt;单行文本输入框&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;password&lt;/td&gt; &lt;td&gt;密码输入框&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;radio&lt;/td&gt; &lt;td&gt;单选按钮&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 属性 属性值 描述 type text 单行文本输入框 password 密码输入框 radio 单选按钮 行合并123456789101112131415&lt;table&gt; &lt;tr&gt; &lt;th colspan=&quot;3&quot;&gt;列1&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;列1&lt;/td&gt; &lt;td&gt;列2&lt;/td&gt; &lt;td&gt;列3&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;列1&lt;/td&gt; &lt;td&gt;列2&lt;/td&gt; &lt;td&gt;列3&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 列1 列1 列2 列3 列1 列2 列3","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://anarckk.github.io/myvolantis/tags/markdown/"}]},{"title":"长期建站和 windows 远程桌面慎用阿里云突发性能 t5 实例","slug":"2019-11/30-长期建站和-windows-远程桌面慎用阿里云突发性能-t5-实例","date":"2019-11-30T03:54:47.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/30/2019-11/30-长期建站和-windows-远程桌面慎用阿里云突发性能-t5-实例/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/30/2019-11/30-%E9%95%BF%E6%9C%9F%E5%BB%BA%E7%AB%99%E5%92%8C-windows-%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%85%8E%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E7%AA%81%E5%8F%91%E6%80%A7%E8%83%BD-t5-%E5%AE%9E%E4%BE%8B/","excerpt":"本文来自转载：查看来源 阿里云全民云计算目前包括入门级配置（突发性能 t5 实例）和性能均衡配置（共享型 n4 实例和计算网络增强型实例），其中入门级的最低配置和性能均衡的最低配置价格相差 100 元左右，对于云服务器来说这个差距是很大的，代表着性能方面也有这么大的差距。经过魏艾斯博客自己的试用和网友的实际使用体验，如果你打算长期建站或做项目老魏并不推荐大家购买使用阿里云全民云计算的入门级配置。","text":"本文来自转载：查看来源 阿里云全民云计算目前包括入门级配置（突发性能 t5 实例）和性能均衡配置（共享型 n4 实例和计算网络增强型实例），其中入门级的最低配置和性能均衡的最低配置价格相差 100 元左右，对于云服务器来说这个差距是很大的，代表着性能方面也有这么大的差距。经过魏艾斯博客自己的试用和网友的实际使用体验，如果你打算长期建站或做项目老魏并不推荐大家购买使用阿里云全民云计算的入门级配置。 朋友是做 ebay 和亚马逊电商的，初次接触云服务器的新手，因为不够了解性能及贪便宜买了一台阿里云全民云计算入门级配置服务器，在使用过程中打开一个 IE 浏览器， IE 浏览器多开两个网页就会出现卡顿了，严重时开四个网页会频发死机状况，经过一段时间的使用感觉无法忍受这种死机的情况，来问老魏到底是什么情况，还能不能继续使用。经过查找阿里云相关资料老魏搞清楚了其中的原因。 入门级最低配置 1 核 1G 40G 系统盘价格为 293 元&#x2F;年，性能均衡的最低配置 1 核 1G 40G 系统盘价格为 394 元&#x2F;年，硬件配置完全相同，但是 30%这么大的价格差距在于前者限制了 CPU 使用比率 10%~15%，突发性能型 t5 实例（入门级配置）是以基准 CPU 计算性能为基础，通过 CPU 实际使用率与基准 CPU 使用率差值的累计加权获取积分值。 入门级配置 10%-15%性能基线，更优价格。新老用户均可购买，限购 1 单，第 2 单起恢复原价；时长越长越优惠，新用户可买 3 台。 突发性能 t5 实例(10%性能基线) 突发性能 t5 实例(10%性能基线) 突发性能 t5 实例(15%性能基线) 1 核 1G 40G 系统盘 1 核 2G 40G 系统盘 2 核 4G 40G 系统盘 293 元/1 年 586 元/2 年 879 元/3 年 459 元/1 年 918 元/2 年 1377 元/3 年 798 元/1 年 1596 元/2 年 2394 元/3 年 点我购买 点我购买 点我购买 在线做 Ebay 和亚马逊需要在 windows 服务器中添加商品，回复 message 等操作，每天上班时间都要一直开着远程桌面和里面的 IE 浏览器网页工作，windows 系统开机后，系统本身都会占用至少 20%以上的 CPU 资源，这时候再打开 IE 浏览器同时多开几个窗口，CPU 占用率自然居高不下，新购的突发性能 t5 实例默认送一定 CPU 积分，初期一段时间 CPU 积分还有剩余可以正常用，很快等到 CPU 积分消耗光了， CPU 性能就会被限制到基准（不超过 10%~15%的 CPU 使用率）运行，自然会引起卡顿、严重时有死机等情况发生。 所以说 t5 实例适合平时不会持续高压力使用 CPU，但是偶尔需要提高计算性能完成工作负载的场景，例如轻量级的 Web 服务器、开发、测试环境以及中低性能数据库等。类似远程桌面操作 ebay 和亚马逊等情况就不适合使用这种类型的主机了。 也听另外一个朋友说购买了 2 核 4G 突发性能 t5 实例，使用的 CentOS 系统，一共绑定了 6 个企业网站， 其中一个是 avada 模板（最开始绑定 2 个 avada 模板网站，后来出现卡顿情况，就只留下一个），因为企业网站本身流量就不多，资源损耗也不大，还可以正常运行。 综上所述比较耗费 CPU 的生产环境老魏不建议使用这种入门级配置了，当服务器 CPU 积分消耗到零之后，系统会限制 CPU 使用率到最高 10%~15%，所以会发生上面那位朋友遇到的卡顿、死机的情况，这时候就严重影响业务正常开展了。那么为了保证生产环境和业务正常运行，应该选择哪个类型的云服务器呢？老魏推荐选择性能均衡配置，购买时搭配本博客专属阿里云千元代金券点我领取，百款产品抵 50 元起。或者推荐使用通用型 g5、计算型 c5 等高性能系列云服务器。 性能均衡配置 CPU 性能不限，更高性价比 共享型 xn4 实例 共享型 n4 实例 计算网络增强型实例 计算网络增强型实例 1 核 1G 40G 系统盘 1 核 2G 40G 系统盘 2 核 4G 40G 系统盘 4 核 8G 40G 系统盘 394 元/1 年 788 元/2 年 1182 元/3 年 653 元/1 年 1306 元/2 年 1959 元/3 年 1566 元/1 年 3132 元/2 年 4698 元/3 年 2991 元/1 年 5582 元/2 年 7975 元/3 年 点我购买 点我购买 点我购买 点我购买 性能均衡配置中的共享型 n4 实例和计算网络增强型实例完全可以满足常规生产环境需要，没有 CPU 使用率的限制，完全发挥出 CPU 的全部 100%正常性能。不会再出现卡顿、死机等情况。 在听完老魏的分析之后朋友也明白了这两种配置的区别不同，立即申请退款。阿里云是以使用时间按天计算退款费用的，这样还可以拿回一部分金额，重新购买均衡性能配置再用于生产环境。 记得全民云计算刚推出这两种配置的时候，老魏还写文章记录阿里云全民云计算变更为入门级和均衡性能配置 详细解析及如何选择，也许有很多朋友没看到或者看了也没明白在生产环境中有什么不同，希望有需要的朋友再重新看一下这篇文章，写的很清楚了。 解决了这个问题老魏把整个过程记录下来，平时也有网友和老魏抱怨阿里云服务器速度慢、卡顿等情况，后期咨询了几位朋友都是购买使用了阿里云全民云计算的入门级配置导致的（还不是因为贪便宜），希望能帮助你在如何选择阿里云全民云计算的不同配置中找到适合自己使用的那一款主机。","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"数据结构与算法学习目录","slug":"2019-11/29-数据结构与算法学习目录","date":"2019-11-29T08:13:04.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/29/2019-11/29-数据结构与算法学习目录/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/29/2019-11/29-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%9B%AE%E5%BD%95/","excerpt":"知乎参考回答 这里面有10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。","text":"知乎参考回答 这里面有10个数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树；10个算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法。掌握了这些基础的数据结构和算法，再学更加复杂的数据结构和算法，就会非常容易、非常快。","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[]},{"title":"springmvc接口怎么传Date","slug":"2019-11/29-springmvc怎么传Date","date":"2019-11-29T02:54:25.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/29/2019-11/29-springmvc怎么传Date/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/29/2019-11/29-springmvc%E6%80%8E%E4%B9%88%E4%BC%A0Date/","excerpt":"12345/* * 登记时间/创建时间 */@ApiModelProperty(name = &quot;createTime&quot;, value = &quot;登记时间&quot;, dataType = &quot;String&quot;, example = &quot;2019-11-11 13:29:18&quot;, required = false)private Date createTime;","text":"12345/* * 登记时间/创建时间 */@ApiModelProperty(name = &quot;createTime&quot;, value = &quot;登记时间&quot;, dataType = &quot;String&quot;, example = &quot;2019-11-11 13:29:18&quot;, required = false)private Date createTime;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://anarckk.github.io/myvolantis/tags/SpringMVC/"}]},{"title":"hexo引用本站文章和引入视频","slug":"2019-11/29-hexo引用本站文章和引入视频","date":"2019-11-29T02:23:37.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/29/2019-11/29-hexo引用本站文章和引入视频/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/29/2019-11/29-hexo%E5%BC%95%E7%94%A8%E6%9C%AC%E7%AB%99%E6%96%87%E7%AB%A0%E5%92%8C%E5%BC%95%E5%85%A5%E8%A7%86%E9%A2%91/","excerpt":"hexo文档介绍 12345&#123;% post_path 2019-11-28-细说shiro系列.md %&#125;&#123;% iframe /minecraft/19年11月-2019-11-02-minecraft服务器创世神worldedit插件/ 100% 200px %&#125; 垃圾，骗子，都不能用，搞个毛","text":"hexo文档介绍 12345&#123;% post_path 2019-11-28-细说shiro系列.md %&#125;&#123;% iframe /minecraft/19年11月-2019-11-02-minecraft服务器创世神worldedit插件/ 100% 200px %&#125; 垃圾，骗子，都不能用，搞个毛","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"material-x主题文档","slug":"2019-11/29-material-x主题文档","date":"2019-11-29T01:33:44.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/29/2019-11/29-material-x主题文档/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/29/2019-11/29-material-x%E4%B8%BB%E9%A2%98%E6%96%87%E6%A1%A3/","excerpt":"https://xaoxuu.com/wiki/material-x/","text":"https://xaoxuu.com/wiki/material-x/","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"pagehelper分页插件","slug":"2019-11/29-pagehelper分页插件","date":"2019-11-29T01:12:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/29/2019-11/29-pagehelper分页插件/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/29/2019-11/29-pagehelper%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6/","excerpt":"Github地址 pagehelper是github上开源的分页插件，可以做到无侵入，不用修改select语句的分页插件，它应该是通过调用mybatis钩子，在查询时自动修改查询语句，自动加上limit语句做到分页的。","text":"Github地址 pagehelper是github上开源的分页插件，可以做到无侵入，不用修改select语句的分页插件，它应该是通过调用mybatis钩子，在查询时自动修改查询语句，自动加上limit语句做到分页的。 导入依赖12345&lt;dependency&gt; &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt; &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.2.5&lt;/version&gt;&lt;/dependency&gt; 使用介绍12345678910111213141516171819import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;======@Overridepublic PageResult search(LetterSign letterSign, PageIndex pageIndex) &#123; if (pageIndex.getPageSize() == null) &#123; pageIndex.setPageSize(20); &#125; if (pageIndex.getPageNo() == null) &#123; pageIndex.setPageNo(1); &#125; PageHelper.startPage(pageIndex.getPageNo(), pageIndex.getPageSize()); List&lt;LetterSign&gt; list = letterSignMapper.searchSelective(letterSign); if (list.size() == 0) &#123; return PageResult.success(&quot;数据为空&quot;); &#125; PageInfo pageInfo = new PageInfo&lt;LetterSign&gt;(list); return PageUtils.getPageResult(pageInfo);&#125; PageHelper.startPage 这个api我看过，底层用的是LocalThread类，将数据暂存在线程上，然后在mybatis的钩子中，从线程里把pageNo、pageSize取出来，设计的还是很巧妙的。 PageInfo 就是对Page结果进行包装 github上的使用文档 2). PageHelper.startPage 静态方法调用除了 PageHelper.startPage 方法外，还提供了类似用法的 PageHelper.offsetPage 方法。 在你需要进行分页的 MyBatis 查询方法前调用 PageHelper.startPage 静态方法即可，紧跟在这个方法后的第一个MyBatis 查询方法会被进行分页。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"varchar定义长度","slug":"2019-11/28-varchar定义长度","date":"2019-11-28T09:29:12.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-varchar定义长度/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-varchar%E5%AE%9A%E4%B9%89%E9%95%BF%E5%BA%A6/","excerpt":"来源 MySQL的varchar定义长度到底是字节varchar存储规则：4.0版本以下，varchar(20)，指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节）5.0版本以上，varchar(20)，指的是20字符，无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放20个，最大大小是65532字节Mysql4中最大也不过是20个字节,但是Mysql5根据编码不同,存储大小也不同。","text":"来源 MySQL的varchar定义长度到底是字节varchar存储规则：4.0版本以下，varchar(20)，指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字节）5.0版本以上，varchar(20)，指的是20字符，无论存放的是数字、字母还是UTF8汉字（每个汉字3字节），都可以存放20个，最大大小是65532字节Mysql4中最大也不过是20个字节,但是Mysql5根据编码不同,存储大小也不同。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"学习companion","slug":"2019-11/28-学习companion","date":"2019-11-28T09:10:41.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-学习companion/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-%E5%AD%A6%E4%B9%A0companion/","excerpt":"companion n. 同伴 He is my companion “He is there, is he?”exclaimed my companion, rushing to the gap.","text":"companion n. 同伴 He is my companion “He is there, is he?”exclaimed my companion, rushing to the gap.","categories":[{"name":"英语","slug":"英语","permalink":"https://anarckk.github.io/myvolantis/categories/%E8%8B%B1%E8%AF%AD/"}],"tags":[]},{"title":"关于BeanUtils.copyProperties的辨析","slug":"2019-11/28-关于BeanUtils-copyProperties的辨析","date":"2019-11-28T08:53:37.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-关于BeanUtils-copyProperties的辨析/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-%E5%85%B3%E4%BA%8EBeanUtils-copyProperties%E7%9A%84%E8%BE%A8%E6%9E%90/","excerpt":"同事使用一个Util进行bean的拷贝,他用的时候是左边拷到右边，我用的时候是右边拷到左边，我TM才发现，原来是同名的BeanUtils，一个是springframework的，一个是apache的。真坑人。 123456import org.springframework.beans.BeanUtils;public static void copyProperties(Object source, Object target) throws BeansExceptionimport org.apache.commons.beanutils.BeanUtils;public static void copyProperties(Object dest, Object orig) throws IllegalAccessException, InvocationTargetException 后端的坑还是挺多的，慢慢趟吧。","text":"同事使用一个Util进行bean的拷贝,他用的时候是左边拷到右边，我用的时候是右边拷到左边，我TM才发现，原来是同名的BeanUtils，一个是springframework的，一个是apache的。真坑人。 123456import org.springframework.beans.BeanUtils;public static void copyProperties(Object source, Object target) throws BeansExceptionimport org.apache.commons.beanutils.BeanUtils;public static void copyProperties(Object dest, Object orig) throws IllegalAccessException, InvocationTargetException 后端的坑还是挺多的，慢慢趟吧。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"nginx之location的匹配规则","slug":"2019-11/28-nginx之location的匹配规则","date":"2019-11-28T06:45:22.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-nginx之location的匹配规则/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-nginx%E4%B9%8Blocation%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/","excerpt":"来源 一、语法规则1location [=|~|~*|^~] /uri/ &#123; … &#125; table th:first-of-type { width: 100px; } 符号 含义 &#x3D; 开头表示精确匹配 ^~ 开头表示 uri 以某个常规字符串开头，理解为匹配 url 路径即可。nginx 不对 url 做编码，因此请求为&#x2F;static&#x2F;20%&#x2F;aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格） ~ 开头表示区分大小写的正则匹配 ~* 开头表示不区分大小写的正则匹配 &#x2F; 通用匹配，任何请求都会匹配到 多个 location 配置的情况下匹配顺序为首先匹配 &#x3D;其次匹配 ^~其次是按文件中顺序的正则匹配最后是交给 &#x2F; 通用匹配当有匹配成功时候，停止匹配，按当前匹配规则处理请求","text":"来源 一、语法规则1location [=|~|~*|^~] /uri/ &#123; … &#125; table th:first-of-type { width: 100px; } 符号 含义 &#x3D; 开头表示精确匹配 ^~ 开头表示 uri 以某个常规字符串开头，理解为匹配 url 路径即可。nginx 不对 url 做编码，因此请求为&#x2F;static&#x2F;20%&#x2F;aa，可以被规则^~ &#x2F;static&#x2F; &#x2F;aa匹配到（注意是空格） ~ 开头表示区分大小写的正则匹配 ~* 开头表示不区分大小写的正则匹配 &#x2F; 通用匹配，任何请求都会匹配到 多个 location 配置的情况下匹配顺序为首先匹配 &#x3D;其次匹配 ^~其次是按文件中顺序的正则匹配最后是交给 &#x2F; 通用匹配当有匹配成功时候，停止匹配，按当前匹配规则处理请求 例子123456789101112131415161718location = / &#123; #规则A&#125;location = /login &#123; #规则B&#125;location ^~ /static/ &#123; #规则C&#125;location ~ \\.(gif|jpg|png|js|css)$ &#123; #规则D&#125;location ~* \\.png$ &#123; #规则E&#125;location / &#123; #规则F&#125; 那么产生的效果如下：访问根目录 &#x2F;， 比如 http://localhost/ 将匹配规则 A访问 http://localhost/login 将匹配规则 B，http://localhost/register 则匹配规则 F访问 http://localhost/static/a.html 将匹配规则 C访问 http://localhost/a.gif, http://localhost/b.jpg 将匹配规则 D和规则 E，但是规则 D 顺序优先，规则 E不起作用，而 http://localhost/static/c.png则优先匹配到规则 C访问 http://localhost/a.PNG 则匹配规则 E，而不会匹配规则 D，因为规则 E 不区分大小写访问 http://localhost/category/id/1111 则最终匹配到规则 F，因为以上规则都不匹配，这个时候应该是 nginx 转发请求给后端应用服务器，比如 FastCGI（PHP），tomcat（jsp），nginx 作为反向代理服务器存在","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"}]},{"title":"hexo Front-matter","slug":"2019-11/28-hexo-Front-matter","date":"2019-11-28T05:25:43.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-hexo-Front-matter/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-hexo-Front-matter/","excerpt":"Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量以下是预先定义的参数。 参数 描述 默认值 layout 布局 title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 keywords 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用） hexo文档material-x文档","text":"Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量以下是预先定义的参数。 参数 描述 默认值 layout 布局 title 标题 文章的文件名 date 建立日期 文件建立日期 updated 更新日期 文件更新日期 comments 开启文章的评论功能 true tags 标签（不适用于分页） categories 分类（不适用于分页） permalink 覆盖文章网址 keywords 仅用于 meta 标签和 Open Graph 的关键词（不推荐使用） hexo文档material-x文档","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"hexo首页隐藏部分文章","slug":"2019-11/28-hexo首页隐藏部分文章","date":"2019-11-28T05:18:25.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-hexo首页隐藏部分文章/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-hexo%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E9%83%A8%E5%88%86%E6%96%87%E7%AB%A0/","excerpt":"来源 做博客网站的时候，想搞一些花里胡哨的东西，例如某些福利、妹子图、日记，但是又不想放在首页，影响气质，怎么办呢？人真是复杂的动物啊。","text":"来源 做博客网站的时候，想搞一些花里胡哨的东西，例如某些福利、妹子图、日记，但是又不想放在首页，影响气质，怎么办呢？人真是复杂的动物啊。 hexo默认是会把所有文章按照时间顺序排列，分页展示。百度上查到一个黑科技，直接改模板引擎，增加一个显示隐藏的标记位，渲染的时候判断，如果为hide就隐藏。参考链接：http://itfriends.xyz/2018/06/12/Hexo-%E8%AE%BE%E7%BD%AE%E9%A6%96%E9%A1%B5%E9%9A%90%E8%97%8F%E6%8C%87%E5%AE%9A%E6%96%87%E7%AB%A0/#more 这种方式有一个bug：文章是隐藏了，但是分页计数仍然计算。假设首页十篇文章都设置隐藏，那首页就是空白的一页，而不会显示第二页的文章。这怎么能忍，果断放弃。 后来又在Hexo插件库找到一个产生首页的插件，自带过滤功能，hexo-generator-index2。 使用非常简单。 第一步，安装hexo-generator-index2在博客目录下打开终端，输入以下命令 12$ npm install hexo-generator-index2 --save$ npm uninstall hexo-generator-index --save 修改hexo的配置文件打开hexo博客根目录下的_config.yml添加以下内容，过滤分类或者标签为hide的文章 1234567891011# index2 generator是否包含官方的hexo-generator-index，默认true（包含）index2_include_index: true # defult is true# 配置index2 generator，可以是数组或对象index2_generator: per_page: 10 order_by: -date include: - category Web # 只包含Web分类下的文章 exclude: - tag Hexo # 不包含标签为Hexo的文章 参考文档","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"细说shiro系列","slug":"归档/shiro/28-细说shiro系列","date":"2019-11-28T02:24:01.000Z","updated":"2023-06-19T08:37:14.701Z","comments":true,"path":"2019/11/28/归档/shiro/28-细说shiro系列/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/%E5%BD%92%E6%A1%A3/shiro/28-%E7%BB%86%E8%AF%B4shiro%E7%B3%BB%E5%88%97/","excerpt":"细说shiro之一：shiro简介细说shiro之二：组件架构细说shiro之三：在独立应用中使用shiro细说shiro之四：在web应用中使用shiro细说shiro之五：在spring框架中集成shiro细说shiro之六：session管理细说shiro之七：缓存","text":"细说shiro之一：shiro简介细说shiro之二：组件架构细说shiro之三：在独立应用中使用shiro细说shiro之四：在web应用中使用shiro细说shiro之五：在spring框架中集成shiro细说shiro之六：session管理细说shiro之七：缓存","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"}]},{"title":"idea里对markdown隐藏代码引用的错误检查","slug":"2019-11/28-idea里对markdown隐藏代码引用的错误检查","date":"2019-11-28T00:57:25.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/28/2019-11/28-idea里对markdown隐藏代码引用的错误检查/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/28/2019-11/28-idea%E9%87%8C%E5%AF%B9markdown%E9%9A%90%E8%97%8F%E4%BB%A3%E7%A0%81%E5%BC%95%E7%94%A8%E7%9A%84%E9%94%99%E8%AF%AF%E6%A3%80%E6%9F%A5/","excerpt":"使用idea编辑markdown文件时，引用代码块，并标记为java代码的话，会对代码进行检查，然而，有时候只想摘录一部分代码，这样检查就会报错，说没有class结构。 现在关掉这个检查 在 Preference | Language and Framework | Markdown 里，有个 code fence errors 选项，把它关掉就好了","text":"使用idea编辑markdown文件时，引用代码块，并标记为java代码的话，会对代码进行检查，然而，有时候只想摘录一部分代码，这样检查就会报错，说没有class结构。 现在关掉这个检查 在 Preference | Language and Framework | Markdown 里，有个 code fence errors 选项，把它关掉就好了","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://anarckk.github.io/myvolantis/tags/markdown/"},{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"}]},{"title":"输入法中全角半角的区别","slug":"2019-11/27-输入法中全角半角的区别","date":"2019-11-27T13:00:06.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/27/2019-11/27-输入法中全角半角的区别/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/27/2019-11/27-%E8%BE%93%E5%85%A5%E6%B3%95%E4%B8%AD%E5%85%A8%E8%A7%92%E5%8D%8A%E8%A7%92%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"1.全角–指一个字符占用两个标准字符位置。 汉字字符和规定了全角的英文字符及国标GB2312-80中的图形符号和特殊字符都是全角字符。一般的系统命令是不用全角字符的,只是在作文字处理时才会使用全角字符。 2.半角–指一字符占用一个标准的字符位置。 通常的英文字母、数字键、符号键都是半角的,半角的显示内码都是一个字节。在系统内部,以上三种字符是作为基本代码处理的,所以用户输入命令和参数时一般都使用半角。","text":"1.全角–指一个字符占用两个标准字符位置。 汉字字符和规定了全角的英文字符及国标GB2312-80中的图形符号和特殊字符都是全角字符。一般的系统命令是不用全角字符的,只是在作文字处理时才会使用全角字符。 2.半角–指一字符占用一个标准的字符位置。 通常的英文字母、数字键、符号键都是半角的,半角的显示内码都是一个字节。在系统内部,以上三种字符是作为基本代码处理的,所以用户输入命令和参数时一般都使用半角。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"半角全角","slug":"半角全角","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%8D%8A%E8%A7%92%E5%85%A8%E8%A7%92/"}]},{"title":"nginx服务器添加密码访问","slug":"2019-11/27-nginx服务器添加密码访问","date":"2019-11-27T12:40:38.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/27/2019-11/27-nginx服务器添加密码访问/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/27/2019-11/27-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%B7%BB%E5%8A%A0%E5%AF%86%E7%A0%81%E8%AE%BF%E9%97%AE/","excerpt":"nginx域名配置文件修改： 123456location / &#123; root html; index index.html index.htm index index.jpg; auth_basic &#x27;Restricted&#x27;; # 认证名称，随意填写 auth_basic_user_file /htpasswd/passwd.db; # 认证的密码文件，需要生产。&#125;","text":"nginx域名配置文件修改： 123456location / &#123; root html; index index.html index.htm index index.jpg; auth_basic &#x27;Restricted&#x27;; # 认证名称，随意填写 auth_basic_user_file /htpasswd/passwd.db; # 认证的密码文件，需要生产。&#125; 如果没有安装apache，可以安装如下软件，就有htpasswd这个命令了 yum -y install httpd-tools 通过htpasswd命令生成用户名及对应密码数据库文件 htpasswd -c &#x2F;htpasswd&#x2F;passwd.db test 说明： test是用户名&#x2F;htpasswd&#x2F;passwd.db 是密码文件存放地址，htpasswd apache的生产密码的插件 此命令是使用Crypt算法生产一个加密文件passwd.db。格式如下： test:LePgj6Z4lSDzY 参考来源https://blog.csdn.net/diyiday/article/details/78423534","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"}]},{"title":"mysql的联合主键（组合主键）","slug":"2019-11/27-mysql的联合主键（组合主键）","date":"2019-11-27T05:36:51.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/27/2019-11/27-mysql的联合主键（组合主键）/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/27/2019-11/27-mysql%E7%9A%84%E8%81%94%E5%90%88%E4%B8%BB%E9%94%AE%EF%BC%88%E7%BB%84%E5%90%88%E4%B8%BB%E9%94%AE%EF%BC%89/","excerpt":"阅读原文请点击：http://click.aliyun.com/m/23921/摘要： mysql的联合主键：用2个字段(或者多个字段,后面具体都是用2个字段组合)来确定一条记录，说明，这2个字段都不是唯一的，2个字段可以分别重复，这么设置的好处，可以很直观的看到某个重复字段的记录条数。 mysql的联合主键：用2个字段(或者多个字段,后面具体都是用2个字段组合)来确定一条记录，说明，这2个字段都不是唯一的，2个字段可以分别重复，这么设置的好处，可以很直观的看到某个重复字段的记录条数。 在mysql当中我们经常认为主键只能设置一个，那如果我们想设置两个呢？如下图： 12345678910CREATE TABLE `test` ( `id` int(11) NOT NULL AUTO_INCREMENT, `date` varchar(25) DEFAULT NULL, `sess_id` varchar(255) DEFAULT NULL, `keyword` varchar(25) NOT NULL, `url_n` varchar(3) DEFAULT NULL, `s_n` varchar(3) DEFAULT NULL, `select_url` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`,`keyword`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8；","text":"阅读原文请点击：http://click.aliyun.com/m/23921/摘要： mysql的联合主键：用2个字段(或者多个字段,后面具体都是用2个字段组合)来确定一条记录，说明，这2个字段都不是唯一的，2个字段可以分别重复，这么设置的好处，可以很直观的看到某个重复字段的记录条数。 mysql的联合主键：用2个字段(或者多个字段,后面具体都是用2个字段组合)来确定一条记录，说明，这2个字段都不是唯一的，2个字段可以分别重复，这么设置的好处，可以很直观的看到某个重复字段的记录条数。 在mysql当中我们经常认为主键只能设置一个，那如果我们想设置两个呢？如下图： 12345678910CREATE TABLE `test` ( `id` int(11) NOT NULL AUTO_INCREMENT, `date` varchar(25) DEFAULT NULL, `sess_id` varchar(255) DEFAULT NULL, `keyword` varchar(25) NOT NULL, `url_n` varchar(3) DEFAULT NULL, `s_n` varchar(3) DEFAULT NULL, `select_url` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`,`keyword`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8； 那这样的话我们就创建了这个联合主键id和keyword 。但是需要注意的是引擎必须是Myisam。这个是联合主键的创建，那删除呢？ 删除也是非常简单只要： ALTER TABLE test DROP PRIMARY KEY ,ADD PRIMARY KEY (`id`); 如果你仅仅是删除联合主键会报错： ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"}]},{"title":"费曼技巧","slug":"底层硬核/费曼技巧","date":"2019-11-27T03:18:36.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/27/底层硬核/费曼技巧/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/27/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/%E8%B4%B9%E6%9B%BC%E6%8A%80%E5%B7%A7/","excerpt":"什么是费曼技巧？为什么费曼技巧被称为终极学习法？它有哪些例子，在以后的学习中可以怎么用这个技巧？ 费曼技巧是一种以教为学的学习方式。这个学习方法其实很简单，就是验证你是否真正掌握一个知识，看你能否用直白浅显的语言把复杂深奥的问题和知识讲清楚。 下面来说一说费曼技巧： 1、找到一张白纸 2、在白纸上将最重要的概念，流程写下来（在一本书中我们需要去选择） 3、想象将给一群人讲授这些概念，将如何去讲，如果有卡壳的地方，回归回去学习。 4、简化，用自己的语言去阐述这个概念，可以用类比、比喻、故事等方式去延伸。","text":"什么是费曼技巧？为什么费曼技巧被称为终极学习法？它有哪些例子，在以后的学习中可以怎么用这个技巧？ 费曼技巧是一种以教为学的学习方式。这个学习方法其实很简单，就是验证你是否真正掌握一个知识，看你能否用直白浅显的语言把复杂深奥的问题和知识讲清楚。 下面来说一说费曼技巧： 1、找到一张白纸 2、在白纸上将最重要的概念，流程写下来（在一本书中我们需要去选择） 3、想象将给一群人讲授这些概念，将如何去讲，如果有卡壳的地方，回归回去学习。 4、简化，用自己的语言去阐述这个概念，可以用类比、比喻、故事等方式去延伸。 所以费曼的思想是保持好奇心，回归本质，找出问题要害所在，把复杂问题简单化。费曼技巧在于强迫自己通过严密的知识推演，找出当前的知识缺陷。这种主动学习的方式才能调动好奇心和探究精神，将知识实现内化。 费曼有一本书叫发现的乐趣，书中写到两个费曼小时候的事情，很有启发性： 我们家有《大不列颠百科全书》，我还是小孩子的时候，父亲就常常让我坐在他腿上，给我读些《大不列颠百科全书》。比如说，我们读关于恐龙的部分，书上可能讲雷龙或其他什么龙，或者暴龙，书上会说：“这家伙有 25 英尺高，脑袋宽 6 英尺。”这时父亲就停下来，说：“我们来看看这句话什么意思。这句话的意思是：假如它站在我们家的前院里，它是那么高，高到足以把头从窗户伸进来。不过呢，它也可能遇到点麻烦，因为它的脑袋比窗户稍微宽了些，要是它伸进头来，会挤破窗户。 费曼说：凡是我们读到的东西，我们都尽量把它转化成某种现实，从这里我学到一个本领——凡我所读的内容，我总设法通过某种转换，弄明白它究竟什么意思，它到底在说什么。你看，我小时候就习惯了用转换的方法读《百科全书》。想到院子里有个那么大的动物，这真的让人很兴奋，也很有趣。当然，我不会害怕真的会有那么个大家伙进到我的窗子里来，我不会这么想。但是我会想，它们竟然莫名其妙地绝灭了，而且没有人知道其中的原因，这真的非常、非常有意思。 参考来源https://www.jianshu.com/p/575a3ca794e1","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[]},{"title":"我和minecraft","slug":"2019-11/26-我和minecraft","date":"2019-11-26T06:35:55.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/26/2019-11/26-我和minecraft/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/26/2019-11/26-%E6%88%91%E5%92%8Cminecraft/","excerpt":"作为我的世界老玩家了，我很喜欢在这个世界孤独的感觉，一个人砍树杀怪，种地圈羊，夕阳西下，看看落日余晖。理想的生活在这里实现。","text":"作为我的世界老玩家了，我很喜欢在这个世界孤独的感觉，一个人砍树杀怪，种地圈羊，夕阳西下，看看落日余晖。理想的生活在这里实现。","categories":[{"name":"personal","slug":"personal","permalink":"https://anarckk.github.io/myvolantis/categories/personal/"}],"tags":[]},{"title":"slf4j日志类名只显示第一个","slug":"2019-11/25-slf4j日志类名只显示第一个","date":"2019-11-25T07:33:29.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/25/2019-11/25-slf4j日志类名只显示第一个/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/25/2019-11/25-slf4j%E6%97%A5%E5%BF%97%E7%B1%BB%E5%90%8D%E5%8F%AA%E6%98%BE%E7%A4%BA%E7%AC%AC%E4%B8%80%E4%B8%AA/","excerpt":"","text":"123log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.EnhancedPatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%d yyyy-MM-dd HH:mm:ss %p [%-30.30c&#123;1.&#125;] %m%n 参考https://hacpai.com/article/1553913527664 很明显，下面这个还不够详细 https://blog.csdn.net/u012422446/article/details/51199724","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"slf4j","slug":"slf4j","permalink":"https://anarckk.github.io/myvolantis/tags/slf4j/"}]},{"title":"mybatis sql 片段","slug":"2019-11/25-mybatis-sql-片段","date":"2019-11-25T06:09:01.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/25/2019-11/25-mybatis-sql-片段/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/25/2019-11/25-mybatis-sql-%E7%89%87%E6%AE%B5/","excerpt":"","text":"这个元素可以被用来定义可重用的 SQL 代码段，这些 SQL 代码可以被包含在其他语句中。它可以（在加载的时候）被静态地设置参数。 在不同的包含语句中可以设置不同的值到参数占位符上。比如： 123456789&lt;sql id=&quot;Example_Where_Clause&quot;&gt; where 1=1 &lt;if test=&quot;userName != null&quot; &gt; AND user_name = #&#123;userName,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;passWord != null&quot; &gt; AND pass_word = #&#123;passWord,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;/sql&gt; 1&lt;sql id=&quot;userColumns&quot;&gt; $&#123;alias&#125;.id,$&#123;alias&#125;.username,$&#123;alias&#125;.password &lt;/sql&gt; 这个 SQL 片段可以被包含在其他语句中，例如： 1234567&lt;select id=&quot;selectUsers&quot; resultType=&quot;map&quot;&gt; select &lt;include refid=&quot;userColumns&quot;&gt;&lt;property name=&quot;alias&quot; value=&quot;t1&quot;/&gt;&lt;/include&gt;, &lt;include refid=&quot;userColumns&quot;&gt;&lt;property name=&quot;alias&quot; value=&quot;t2&quot;/&gt;&lt;/include&gt; from some_table t1 cross join some_table t2&lt;/select&gt; 属性值也可以被用在 include 元素的 refid 属性里或 include 元素的内部语句中，例如： 1234567891011121314151617&lt;sql id=&quot;sometable&quot;&gt; $&#123;prefix&#125;Table&lt;/sql&gt;&lt;sql id=&quot;someinclude&quot;&gt; from &lt;include refid=&quot;$&#123;include_target&#125;&quot;/&gt;&lt;/sql&gt;&lt;select id=&quot;select&quot; resultType=&quot;map&quot;&gt; select field1, field2, field3 &lt;include refid=&quot;someinclude&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;Some&quot;/&gt; &lt;property name=&quot;include_target&quot; value=&quot;sometable&quot;/&gt; &lt;/include&gt;&lt;/select&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"spring容器里多出来的url","slug":"2019-11/25-spring容器里多出来的url","date":"2019-11-25T01:33:49.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/25/2019-11/25-spring容器里多出来的url/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/25/2019-11/25-spring%E5%AE%B9%E5%99%A8%E9%87%8C%E5%A4%9A%E5%87%BA%E6%9D%A5%E7%9A%84url/","excerpt":"","text":"在 swagger 项目里，spring 容器里 requestMapping 会比工程多出来几个 api , 有点好奇，是不是所有的 swagger 工程都会多出来这么几个 api， 还有 &#x2F;error 是不是 spring 工程自带的一个报错接口 1String[] except = new String[]&#123;&quot;/error&quot;, &quot;/configuration/security&quot;, &quot;/swagger-resources&quot;, &quot;/configuration/ui&quot;, &quot;/v2/api-docs&quot;&#125;;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://anarckk.github.io/myvolantis/tags/SpringMVC/"}]},{"title":"java注解-接口增删改查权限校验","slug":"2019-11/25-java注解-接口增删改查权限校验","date":"2019-11-25T01:29:15.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/25/2019-11/25-java注解-接口增删改查权限校验/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/25/2019-11/25-java%E6%B3%A8%E8%A7%A3-%E6%8E%A5%E5%8F%A3%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/","excerpt":"","text":"123456789101112131415161718package com.thok.myoa.aop.annotation;import com.thok.myoa.constant.AccessType;import com.thok.myoa.constant.TransactionalConstant;import java.lang.annotation.*;/** * Created by fh on 2019/11/25 * 访问控制注解 */@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)@Documentedpublic @interface AccessControl &#123; AccessType accessType(); TransactionalConstant transactional() default TransactionalConstant.VACATE;&#125; 123456789package com.thok.myoa.constant;/** * Created by fh on 2019/11/25 * 访问类型 */public enum AccessType &#123; ADD, DEL, PUT, QUE&#125; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152package com.thok.myoa.listener;import com.thok.myoa.aop.annotation.AccessControl;import lombok.Getter;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationListener;import org.springframework.context.event.ContextRefreshedEvent;import org.springframework.stereotype.Component;import org.springframework.web.context.WebApplicationContext;import org.springframework.web.method.HandlerMethod;import org.springframework.web.servlet.mvc.method.RequestMappingInfo;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Set;/** * Created by fh on 2019/11/22 * 服务器启动监听 */@Componentpublic class OnStartListener implements ApplicationListener&lt;ContextRefreshedEvent&gt; &#123; private final Logger LOGGER = LoggerFactory.getLogger(OnStartListener.class); @Getter private List&lt;String&gt; urls = new ArrayList&lt;String&gt;(); @Autowired private WebApplicationContext applicationContext; @Override public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) &#123; LOGGER.info(&quot;监听器启动&quot;); RequestMappingHandlerMapping mapping = applicationContext.getBean(RequestMappingHandlerMapping.class); // 获取url与类和方法的对应信息 Map&lt;RequestMappingInfo, HandlerMethod&gt; map = mapping.getHandlerMethods(); for (Map.Entry&lt;RequestMappingInfo, HandlerMethod&gt; entry : map.entrySet()) &#123; RequestMappingInfo requestMappingInfo = entry.getKey(); HandlerMethod method = entry.getValue(); AccessControl accessControl = method.getMethod().getAnnotation(AccessControl.class); if (accessControl != null) &#123; Set&lt;String&gt; patterns = requestMappingInfo.getPatternsCondition().getPatterns(); for (String url : patterns) &#123; LOGGER.info(&quot;url: &quot; + url); &#125; LOGGER.info(accessControl.accessType() + &quot; , &quot; + accessControl.transactional()); &#125; &#125; &#125;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"Hexo 一篇文章多个 categories","slug":"2019-11/24-Hexo-一篇文章多个-categories","date":"2019-11-24T13:12:22.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/24/2019-11/24-Hexo-一篇文章多个-categories/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/24/2019-11/24-Hexo-%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%A4%9A%E4%B8%AA-categories/","excerpt":"","text":"前言 在很多情况下，我们希望在 Hexo 中写的一篇文章能够同时属于多个分类，例如我写一篇 《Servlet笔记》，我既想将它放在 Java 这个分类中，又想将它放入 Servlet 这个分类。 按照官方的解释，categories 这个选项有两种配置方法（其实有三种）。那我们就来讲讲这三种配置方法。 子分类下面的分类会将该分章放到 Java&#x2F;Servlet这个分类下。 123categories: - Java - Servlet 同样的作用我们也可以这样写。 1categories: [Java, Servlet] 上面两种方法最终效果一样，都是将文章放在了一个子分类的目录下，效果如图。 多个分类如果我们的要求是将文章同时分到多个不同的分类中呢，我们应该这样： 123categories: -[Java] -[Servlet] 这样，就可以将上面的文章分类到 Java 和 Servlet 这两个不同的目录中了。 扩展一下，如果我们将其分类到 Java&#x2F;Servlet 和 Programming 两个不同的目录下，我们应该如下写： 123categories: -[Java, Servlet] -[Programming] 来源https://www.jianshu.com/p/bff1b1845ac9","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"比较好看的chrome主题","slug":"2019-11/22-比较好看的chrome主题","date":"2019-11-22T09:22:46.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-比较好看的chrome主题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9C%8B%E7%9A%84chrome%E4%B8%BB%E9%A2%98/","excerpt":"","text":"Whisper Chitose Shirasawa The Witcher 3 chrome纯色","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"https://anarckk.github.io/myvolantis/tags/chrome/"}]},{"title":"winserver2008安装ftp服务","slug":"2019-11/22-winserver2008安装ftp服务","date":"2019-11-22T02:20:26.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-winserver2008安装ftp服务/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-winserver2008%E5%AE%89%E8%A3%85ftp%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"环境windows server 2008 安装开始-管理工具-服务器管理器-角色，在这里添加角色，Web服务器（IIS），一步步新建ftp网站 （难度不大，略） 关于 windows server 2008 上 ftp 是主动模式还是被动模式的问题在Windows Server上创建FTP server一般选择被动模式。微软有一篇挺不错的博客介绍了如何在Windows Server上用IIS搭建一个FTP server，里面讲的就是被动模式，可以参考一下。链接（来源） 大多数公司更倾向于被动模式。在这种模式下，客户端启动两个通道；因此，组织对客户端防火墙的更改很少或没有更改。连接是从客户端到服务器的，数据将是返回到客户端的流量。总体而言，组织可以允许其用户（客户端）连接到FTP服务器，而不会影响网络安全性。 这篇国内的文章也写的挺好的 ，注意如果出现访问权限错误的情况，需要客户端在IE高级设置里关闭”使用被动 FTP (用于防火墙和 DSL 调制解调器的兼容)","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"},{"name":"windows server 2008R2","slug":"windows-server-2008R2","permalink":"https://anarckk.github.io/myvolantis/tags/windows-server-2008R2/"}]},{"title":"docker给已存在的容器添加或修改端口映射","slug":"2019-11/22-docker给已存在的容器添加或修改端口映射","date":"2019-11-22T02:19:56.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-docker给已存在的容器添加或修改端口映射/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-docker%E7%BB%99%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E5%AE%B9%E5%99%A8%E6%B7%BB%E5%8A%A0%E6%88%96%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84/","excerpt":"一种是将原来的容器提交成镜像，然后利用新的建立的镜像重新建立一个带有端口映射的容器，不推荐这种办法 另一种就是改容器配置文件（也是我推荐的解决办法）：配置文件在 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;[hash_of_the_container]&#x2F;hostconfig.json 还有 config.v2.json 这俩文件hash_of_the_container 可以通过 docker inspect 容器名字 来查看 id 就是 容器的 hash 数值，在 hostconfig.json 里有 “PortBindings”:{} 这个配置项，可以改成 “PortBindings”:{“80&#x2F;tcp”:[{“HostIp”:””,”HostPort”:”8080”}]} 这里 80 是容器端口， 8080 是本地端口， 然后在 config.v2.json 里面添加一个配置项 “ExposedPorts”:{“80&#x2F;tcp”:{}} , 将这个配置项添加到 “Tty”: true, 前面，我不知道添加到别的地方会不会有影响，因为经过对比正常的端口映射配置项是在这个位置，这个就是将容器内部端口暴露出来，如果不加这一句端口映射不会成功的，最后重启 docker的守护进程 service docker restart这里有个问题就是重启后 用docker ps -a 是看不到端口映射的，但实际已经映射好了，我正常在新建一个带有端口映射容器的时候，重启 docker的守护进程，端口映射也不会显示出来，但是通过docker inspect 容器名 可以看到配置项已经修改成功了。————————————————版权声明：本文为CSDN博主「Hello_wshuo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/chouzhou9701/article/details/86725203","text":"一种是将原来的容器提交成镜像，然后利用新的建立的镜像重新建立一个带有端口映射的容器，不推荐这种办法 另一种就是改容器配置文件（也是我推荐的解决办法）：配置文件在 &#x2F;var&#x2F;lib&#x2F;docker&#x2F;containers&#x2F;[hash_of_the_container]&#x2F;hostconfig.json 还有 config.v2.json 这俩文件hash_of_the_container 可以通过 docker inspect 容器名字 来查看 id 就是 容器的 hash 数值，在 hostconfig.json 里有 “PortBindings”:{} 这个配置项，可以改成 “PortBindings”:{“80&#x2F;tcp”:[{“HostIp”:””,”HostPort”:”8080”}]} 这里 80 是容器端口， 8080 是本地端口， 然后在 config.v2.json 里面添加一个配置项 “ExposedPorts”:{“80&#x2F;tcp”:{}} , 将这个配置项添加到 “Tty”: true, 前面，我不知道添加到别的地方会不会有影响，因为经过对比正常的端口映射配置项是在这个位置，这个就是将容器内部端口暴露出来，如果不加这一句端口映射不会成功的，最后重启 docker的守护进程 service docker restart这里有个问题就是重启后 用docker ps -a 是看不到端口映射的，但实际已经映射好了，我正常在新建一个带有端口映射容器的时候，重启 docker的守护进程，端口映射也不会显示出来，但是通过docker inspect 容器名 可以看到配置项已经修改成功了。————————————————版权声明：本文为CSDN博主「Hello_wshuo」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/chouzhou9701/article/details/86725203","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"centos7 安装 iptables","slug":"2019-11/22-centos7安装iptables","date":"2019-11-22T02:19:19.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-centos7安装iptables/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-centos7%E5%AE%89%E8%A3%85iptables/","excerpt":"","text":"安装iptable iptable-service12345678#先检查是否安装了iptablesservice iptables status#安装iptablesyum install -y iptables#升级iptablesyum update iptables #安装iptables-servicesyum install iptables-services 安装iptables-services很重要，如果不装，那么就会无法使用 service iptables save 指令了禁用&#x2F;停止自带的firewalld服务 1234#停止firewalld服务systemctl stop firewalld#禁用firewalld服务systemctl mask firewalld","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://anarckk.github.io/myvolantis/tags/iptables/"},{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"}]},{"title":"centos7 安装 docker","slug":"2019-11/22-centos7 安装 docker","date":"2019-11-22T02:18:49.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-centos7 安装 docker/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-centos7%20%E5%AE%89%E8%A3%85%20docker/","excerpt":"安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 script1yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源 script1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 可以查看所有仓库中所有docker版本，并选择特定版本安装 script1yum list docker-ce --showduplicates | sort -r 安装Docker，命令：yum install docker-ce-版本号，我选的是17.12.1.ce，如下 script1234yum install docker-ce # 安装最新版yum install docker-ce-17.12.1.cesystemctl start dockersystemctl enable docker 装好了","text":"安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 script1yum install -y yum-utils device-mapper-persistent-data lvm2 设置yum源 script1yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 可以查看所有仓库中所有docker版本，并选择特定版本安装 script1yum list docker-ce --showduplicates | sort -r 安装Docker，命令：yum install docker-ce-版本号，我选的是17.12.1.ce，如下 script1234yum install docker-ce # 安装最新版yum install docker-ce-17.12.1.cesystemctl start dockersystemctl enable docker 装好了 参考https://www.cnblogs.com/qgc1995/p/9553572.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"}]},{"title":"Centos修改yum源为国内阿里源","slug":"2019-11/22-Centos修改yum源为国内阿里源","date":"2019-11-22T02:17:17.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/22/2019-11/22-Centos修改yum源为国内阿里源/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/22/2019-11/22-Centos%E4%BF%AE%E6%94%B9yum%E6%BA%90%E4%B8%BA%E5%9B%BD%E5%86%85%E9%98%BF%E9%87%8C%E6%BA%90/","excerpt":"","text":"以下为修改Centos6.5的yum源： 1.备份原镜像文件，便于后期恢复 [root@keepmydream ~]# mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup 2.下载新的CentOS-Base.repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F; Centos5地址： wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo Centos6地址： wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo Centos7地址： wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 3.清除缓存 yum clean all 4.生成缓存 yum makecache","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"},{"name":"yum","slug":"yum","permalink":"https://anarckk.github.io/myvolantis/tags/yum/"}]},{"title":"KiB、MiB与KB、MB的区别","slug":"底层硬核/KiB、MiB与KB、MB的区别","date":"2019-11-20T12:31:24.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/20/底层硬核/KiB、MiB与KB、MB的区别/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/20/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/KiB%E3%80%81MiB%E4%B8%8EKB%E3%80%81MB%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"今天新买了一台云服务器，看了下 top,显示1882892Kib，突然发现，自己不太懂Kib是什么单位，所以查找了一下资料 KiB、MiB、GiB、TiB等，由国际电工委员会（IEC）于2000年制定，为什么要指定这个规范呢？因为国际单位制中TB、GB、MB、KB是“1000进制”的数，为此国际电工协会（IEC）拟定了”KiB”、“MiB”、“GiB”的二进制单位，专用来标示“1024进位”的数据大小","text":"今天新买了一台云服务器，看了下 top,显示1882892Kib，突然发现，自己不太懂Kib是什么单位，所以查找了一下资料 KiB、MiB、GiB、TiB等，由国际电工委员会（IEC）于2000年制定，为什么要指定这个规范呢？因为国际单位制中TB、GB、MB、KB是“1000进制”的数，为此国际电工协会（IEC）拟定了”KiB”、“MiB”、“GiB”的二进制单位，专用来标示“1024进位”的数据大小","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[]},{"title":"比较中意的几个hexo主题","slug":"2019-11/17-比较中意的几个hexo主题","date":"2019-11-17T04:48:32.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/17/2019-11/17-比较中意的几个hexo主题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/17/2019-11/17-%E6%AF%94%E8%BE%83%E4%B8%AD%E6%84%8F%E7%9A%84%E5%87%A0%E4%B8%AAhexo%E4%B8%BB%E9%A2%98/","excerpt":"","text":"ariahttps://github.com/AlynxZhou/hexo-theme-aria 不好看 insidehttps://github.com/ikeq/hexo-theme-inside 中意，满意 预览 https://blog.oniuo.com/archives diasporahttps://github.com/Fechin/hexo-theme-diaspora.git no 不太好 indigohttps://github.com/yscoder/hexo-theme-indigo.git 没有分类，功能不够 butterflyhttps://github.com/jerryc127/hexo-theme-butterfly.git demo: https://demo.jerryc.me/ 花里胡哨，功能够用 material.githttps://github.com/viosey/hexo-theme-material.git 看不到demo material-x主题地址：https://github.com/xaoxuu/hexo-theme-material-x 最佳之选 Demo: https://mxclub.github.io/example/%E6%9B%B4%E8%87%AA%E7%94%B1%E7%9A%84%E5%B8%83%E5%B1%80/ 源码：https://github.com/xaoxuu/blog-example demo2: https://xaoxuu.com/blog/2016-05-22-its-better-to-be-a-titan/ 优选、对眼、代码长还是看不到 defaulthttps://github.com/niemingzhao/niemingzhao.github.io/tree/theme 不够宽，代码长看不到 hexo-theme-ylionhttps://github.com/GeekaholicLin/hexo-theme-ylion 很宽，代码很长不会看不到 life挺好的，但是没有文章内目录","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"[转]利用mybatis-generator自动生成代码","slug":"2019-11/14-转-利用mybatis-generator自动生成代码","date":"2019-11-14T15:13:32.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-转-利用mybatis-generator自动生成代码/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-%E8%BD%AC-%E5%88%A9%E7%94%A8mybatis-generator%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81/","excerpt":"","text":"1、mybatis-generator 概述MyBatis官方提供了逆向工程 mybatis-generator，可以针对数据库表自动生成MyBatis执行所需要的代码（如Mapper.java、Mapper.xml、POJO）。mybatis-generator 有三种用法：命令行、eclipse插件、maven插件。而maven插件的方式比较通用，本文也将概述maven插件的使用方式。 pom.xml中配置plugin（官方文档：Running MyBatis Generator With Maven） 12345678910111213141516171819202122232425262728293031&lt;build&gt; &lt;plugins&gt; &lt;!-- mybatis-generator --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;configuration&gt; &lt;!-- mybatis-generator的配置文件，根据情况调整位置 --&gt; &lt;configurationFile&gt;src/main/resources/generatorConfig.xml&lt;/configurationFile&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;Generate MyBatis Artifacts&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;generate&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 3、generatorConfig.xml配置文件 （官方文档：MyBatis GeneratorXML Configuration File Reference）稍微详细一点如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;!--JDBC驱动jar包的位置--&gt; &lt;classPathEntry location=&quot;C:/workspace/project/learning/mybatis/lib/mysql-connector-java-5.1.6.jar&quot;/&gt; &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;!--创建Java类时是否取消生成注释--&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;!--JDBC数据库连接--&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;root&quot; password=&quot;dev&quot;&gt; &lt;/jdbcConnection&gt; &lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类 targetPackage 指定生成的model生成所在的包名 targetProject 指定在该项目下所在的路径 --&gt; &lt;javaModelGenerator targetPackage=&quot;dulk.learn.mybatis.generator.pojo&quot; targetProject=&quot;./src/main/java&quot;&gt; &lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;!-- 是否对model添加构造函数 --&gt; &lt;property name=&quot;constructorBased&quot; value=&quot;true&quot;/&gt; &lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;!-- 建立的Model对象是否 不可改变 即生成的Model对象不会有 setter方法，只有构造方法 --&gt; &lt;property name=&quot;immutable&quot; value=&quot;false&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;!-- mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt; &lt;sqlMapGenerator targetPackage=&quot;generator&quot; targetProject=&quot;./src/main/resources&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;/sqlMapGenerator&gt; &lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件的代码 type=&quot;ANNOTATEDMAPPER&quot;,生成Java Model和基于注解的Mapper对象 type=&quot;MIXEDMAPPER&quot;,生成基于注解的Java Model和相应的Mapper对象 type=&quot;XMLMAPPER&quot;,生成SQLMap XML文件和独立的Mapper接口 --&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;dulk.learn.mybatis.generator.mapper&quot; targetProject=&quot;./src/main/java&quot;&gt; &lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt; &lt;/javaClientGenerator&gt; &lt;!--tables--&gt; &lt;table tableName=&quot;author&quot; domainObjectName=&quot;Author&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt; &lt;table tableName=&quot;book&quot; domainObjectName=&quot;Book&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 有些默认配置不必显性去配置，所以简化一下快速配置的话也可以这样：（注意：配置中文件的生成地址等根据个人实际情况进行调整，另外，若有其他配置想要调整请参考官方文档） 123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt; &lt;classPathEntry location=&quot;C:/workspace/project/learning/mybatis/lib/mysql-connector-java-5.1.6.jar&quot;/&gt; &lt;context id=&quot;default&quot; targetRuntime=&quot;MyBatis3&quot;&gt; &lt;commentGenerator&gt; &lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt; &lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt; &lt;/commentGenerator&gt; &lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://localhost:3306/test&quot; userId=&quot;root&quot; password=&quot;dev&quot;&gt; &lt;/jdbcConnection&gt; &lt;javaModelGenerator targetPackage=&quot;dulk.learn.mybatis.generator.pojo&quot; targetProject=&quot;./src/main/java&quot;&gt; &lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage=&quot;generator&quot; targetProject=&quot;./src/main/resources&quot;&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;dulk.learn.mybatis.generator.mapper&quot; targetProject=&quot;./src/main/java&quot;&gt; &lt;/javaClientGenerator&gt; &lt;table tableName=&quot;author&quot; domainObjectName=&quot;Author&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt; &lt;table tableName=&quot;book&quot; domainObjectName=&quot;Book&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 另，配置文件中诸如 javaModelGenerator &#x2F; sqlMapGenerator &#x2F; javaClientGenerator 等配置的顺序不要轻易改变，可能会导致插件执行时失败。 4、使用方式mvn mybatis-generator:generate如果是在IDEA环境中，直接鼠标点击执行即可： 目录结构如下： 注：建表时，字段名称建议用”_”分隔多个单词，比如:author_id…，这样生成的model，属性名称就会变成的驼峰命名，即：authorId 参考链接利用mybatis-generator自动生成代码 https://www.cnblogs.com/yjmyzz/p/mybatis-generator-tutorial.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"HashMap的四种遍历方式","slug":"2019-11/14-HashMap的四种遍历方式","date":"2019-11-14T15:12:34.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-HashMap的四种遍历方式/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-HashMap%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/","excerpt":"","text":"四种遍历方式12345678910111213141516171819202122232425262728293031323334353637public static void main(String[] args) &#123; Map&lt;String,String&gt; map=new HashMap&lt;String,String&gt;(); map.put(&quot;1&quot;, &quot;value1&quot;); map.put(&quot;2&quot;, &quot;value2&quot;); map.put(&quot;3&quot;, &quot;value3&quot;); map.put(&quot;4&quot;, &quot;value4&quot;); //第一种：普通使用，二次取值 System.out.println(&quot;\\n通过Map.keySet遍历key和value：&quot;); for(String key:map.keySet()) &#123; System.out.println(&quot;Key: &quot;+key+&quot; Value: &quot;+map.get(key)); &#125; //第二种 System.out.println(&quot;\\n通过Map.entrySet使用iterator遍历key和value: &quot;); Iterator map1it=map.entrySet().iterator(); while(map1it.hasNext()) &#123; Map.Entry&lt;String, String&gt; entry=(Entry&lt;String, String&gt;) map1it.next(); System.out.println(&quot;Key: &quot;+entry.getKey()+&quot; Value: &quot;+entry.getValue()); &#125; //第三种：推荐，尤其是容量大时 System.out.println(&quot;\\n通过Map.entrySet遍历key和value&quot;); for(Map.Entry&lt;String, String&gt; entry: map.entrySet()) &#123; System.out.println(&quot;Key: &quot;+ entry.getKey()+ &quot; Value: &quot;+entry.getValue()); &#125; //第四种 System.out.println(&quot;\\n通过Map.values()遍历所有的value，但不能遍历key&quot;); for(String v:map.values()) &#123; System.out.println(&quot;The value is &quot;+v); &#125;&#125; 输出结果 1234567891011121314151617181920212223通过Map.keySet遍历key和value：Key: 1 Value: value1Key: 2 Value: value2Key: 3 Value: value3Key: 4 Value: value4通过Map.entrySet使用iterator遍历key和value: Key: 1 Value: value1Key: 2 Value: value2Key: 3 Value: value3Key: 4 Value: value4通过Map.entrySet遍历key和valueKey: 1 Value: value1Key: 2 Value: value2Key: 3 Value: value3Key: 4 Value: value4通过Map.values()遍历所有的value，但不能遍历keyThe value is value1The value is value2The value is value3The value is value4","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"}]},{"title":"HTTP长连接、短连接","slug":"2019-11/14-HTTP长连接、短连接","date":"2019-11-14T15:11:47.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-HTTP长连接、短连接/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-HTTP%E9%95%BF%E8%BF%9E%E6%8E%A5%E3%80%81%E7%9F%AD%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"参考链接https://www.cnblogs.com/gotodsp/p/6366163.html 什么是长连接、短连接在HTTP&#x2F;1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。 而从HTTP&#x2F;1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码： Connection:keep-alive在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。 HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://anarckk.github.io/myvolantis/tags/HTTP/"}]},{"title":"mybatis_通用性比较好的增改查","slug":"2019-11/14-mybatis_通用性比较好的增改查","date":"2019-11-14T15:09:19.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-mybatis_通用性比较好的增改查/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-mybatis_%E9%80%9A%E7%94%A8%E6%80%A7%E6%AF%94%E8%BE%83%E5%A5%BD%E7%9A%84%E5%A2%9E%E6%94%B9%E6%9F%A5/","excerpt":"","text":"通用性比较好的增改查123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122&lt;select id=&quot;selectCarByPage&quot; parameterType=&quot;com.thok.myoa.entity.Car&quot; resultMap=&quot;BaseResultMap&quot;&gt; select &lt;include refid=&quot;Base_Column_List&quot;/&gt; from car where dr=0 &lt;if test=&quot;numbers != null&quot;&gt; AND numbers = #&#123;numbers,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;name != null&quot;&gt; AND name = #&#123;name,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;departments != null&quot;&gt; AND departments = #&#123;departments,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;seating != null&quot;&gt; AND seating = #&#123;seating,jdbcType=TINYINT&#125; &lt;/if&gt; &lt;if test=&quot;parking != null&quot;&gt; AND parking = #&#123;parking,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;registrar != null&quot;&gt; AND registrar = #&#123;registrar,jdbcType=VARCHAR&#125; &lt;/if&gt; &lt;if test=&quot;createTime != null&quot;&gt; AND create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125; &lt;/if&gt; &lt;if test=&quot;mark != null&quot;&gt; AND mark = #&#123;mark,jdbcType=VARCHAR&#125; &lt;/if&gt; limit #&#123;start,jdbcType=INTEGER&#125;,#&#123;pageSize,jdbcType=INTEGER&#125;&lt;/select&gt;&lt;insert id=&quot;insert&quot; parameterType=&quot;com.thok.myoa.entity.Car&quot;&gt; insert into car &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;id != null&quot;&gt; id, &lt;/if&gt; &lt;if test=&quot;numbers != null&quot;&gt; numbers, &lt;/if&gt; &lt;if test=&quot;departments != null&quot;&gt; departments, &lt;/if&gt; &lt;if test=&quot;seating != null&quot;&gt; seating, &lt;/if&gt; &lt;if test=&quot;parking != null&quot;&gt; parking, &lt;/if&gt; &lt;if test=&quot;registrar != null&quot;&gt; registrar, &lt;/if&gt; &lt;if test=&quot;createTime != null&quot;&gt; create_time, &lt;/if&gt; &lt;if test=&quot;mark != null&quot;&gt; mark, &lt;/if&gt; &lt;if test=&quot;dr != null&quot;&gt; dr, &lt;/if&gt; &lt;/trim&gt; &lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt; &lt;if test=&quot;id != null&quot;&gt; #&#123;id,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;numbers != null&quot;&gt; #&#123;numbers,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;departments != null&quot;&gt; #&#123;departments,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;seating != null&quot;&gt; #&#123;seating,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;parking != null&quot;&gt; #&#123;parking,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;registrar != null&quot;&gt; #&#123;registrar,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;createTime != null&quot;&gt; #&#123;create_time,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;if test=&quot;mark != null&quot;&gt; #&#123;mark,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;dr != null&quot;&gt; #&#123;dr,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;/trim&gt;&lt;/insert&gt;&lt;update id=&quot;update&quot; parameterType=&quot;com.thok.myoa.entity.Car&quot;&gt; update car &lt;set&gt; &lt;if test=&quot;numbers != null&quot;&gt; numbers = #&#123;numbers,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;departments != null&quot;&gt; departments = #&#123;departments,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;seating != null&quot;&gt; seating = #&#123;seating,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;if test=&quot;parking != null&quot;&gt; parking = #&#123;parking,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;registrar != null&quot;&gt; registrar = #&#123;registrar,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;createTime != null&quot;&gt; create_time = #&#123;createTime,jdbcType=TIMESTAMP&#125;, &lt;/if&gt; &lt;if test=&quot;mark != null&quot;&gt; mark = #&#123;mark,jdbcType=VARCHAR&#125;, &lt;/if&gt; &lt;if test=&quot;dr != null&quot;&gt; dr = #&#123;dr,jdbcType=TINYINT&#125;, &lt;/if&gt; &lt;/set&gt; where id = #&#123;id,jdbcType=VARCHAR&#125;&lt;/update&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"各类“服务器推”技术原理与实例（Polling/COMET/SSE/WebSocket）","slug":"底层硬核/各类“服务器推”技术原理与实例（Polling-COMET-SSE-WebSocket）","date":"2019-11-14T14:59:27.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/底层硬核/各类“服务器推”技术原理与实例（Polling-COMET-SSE-WebSocket）/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/%E5%90%84%E7%B1%BB%E2%80%9C%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A8%E2%80%9D%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E4%BE%8B%EF%BC%88Polling-COMET-SSE-WebSocket%EF%BC%89/","excerpt":"各类“服务器推”技术原理与实例（Polling&#x2F;COMET&#x2F;SSE&#x2F;WebSocket） 简单来讲主要是4中方法： 轮询、COMET、SSE (Server-Sent Events)、WebSocket 轮询简单易实现，问题是连接数量多会挤爆服务器 COMET 包含两种: 基于HTTP的长轮询（long-polling）、基于iframe的长连接流（stream）模式 SSE (Server-Sent Events) 是HTML5标准中的一部分。其实现原理类似于我们在上一节中提到的基于iframe的长连接模式。HTTP响应内容有一种特殊的content-type —— text&#x2F;event-stream，该响应头标识了响应内容为事件流，客户端不会关闭连接，而是等待服务端不断得发送响应结果。SSE规范比较简单，主要分为两个部分：浏览器中的EventSource对象，以及服务器端与浏览器端之间的通讯协议。 WebSocket与http协议一样都是基于TCP的。WebSocket其实不仅仅限于“服务器推”了，它是一个全双工的协议，适用于需要进行复杂双向数据通讯的场景。因此也有着更复杂的规范。","text":"各类“服务器推”技术原理与实例（Polling&#x2F;COMET&#x2F;SSE&#x2F;WebSocket） 简单来讲主要是4中方法： 轮询、COMET、SSE (Server-Sent Events)、WebSocket 轮询简单易实现，问题是连接数量多会挤爆服务器 COMET 包含两种: 基于HTTP的长轮询（long-polling）、基于iframe的长连接流（stream）模式 SSE (Server-Sent Events) 是HTML5标准中的一部分。其实现原理类似于我们在上一节中提到的基于iframe的长连接模式。HTTP响应内容有一种特殊的content-type —— text&#x2F;event-stream，该响应头标识了响应内容为事件流，客户端不会关闭连接，而是等待服务端不断得发送响应结果。SSE规范比较简单，主要分为两个部分：浏览器中的EventSource对象，以及服务器端与浏览器端之间的通讯协议。 WebSocket与http协议一样都是基于TCP的。WebSocket其实不仅仅限于“服务器推”了，它是一个全双工的协议，适用于需要进行复杂双向数据通讯的场景。因此也有着更复杂的规范。","categories":[{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"SpringBoot工程中过滤器设置总结","slug":"2019-11/14-SpringBoot工程中过滤器设置总结","date":"2019-11-14T13:15:11.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-SpringBoot工程中过滤器设置总结/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-SpringBoot%E5%B7%A5%E7%A8%8B%E4%B8%AD%E8%BF%87%E6%BB%A4%E5%99%A8%E8%AE%BE%E7%BD%AE%E6%80%BB%E7%BB%93/","excerpt":"","text":"思路在 springboot 里注册过滤器有两种思路，一种是在 configuration 里提供 FilterRegistrationBean 的 bean. 第二种是使用 @WebFilter 注解，并且注意使用 @ServletComponentScan 扫描包，两种方式注册过滤器。 第一种方法123456789101112131415161718public class LogCostFilter implements Filter &#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; long start = System.currentTimeMillis(); filterChain.doFilter(servletRequest,servletResponse); System.out.println(&quot;Execute cost=&quot;+(System.currentTimeMillis()-start)); &#125; @Override public void destroy() &#123; &#125;&#125; 1234567891011121314@Configurationpublic class FilterConfig &#123; @Bean public FilterRegistrationBean registFilter() &#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new LogCostFilter()); registration.addUrlPatterns(&quot;/*&quot;); registration.setName(&quot;LogCostFilter&quot;); registration.setOrder(1); return registration; &#125; &#125; 第二种方法12345678910111213141516171819@WebFilter(urlPatterns = &quot;/*&quot;, filterName = &quot;logFilter2&quot;)public class LogCostFilter2 implements Filter &#123; @Override public void init(FilterConfig filterConfig) throws ServletException &#123; &#125; @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException &#123; long start = System.currentTimeMillis(); filterChain.doFilter(servletRequest, servletResponse); System.out.println(&quot;LogFilter2 Execute cost=&quot; + (System.currentTimeMillis() - start)); &#125; @Override public void destroy() &#123; &#125;&#125; 这里直接用@WebFilter就可以进行配置，同样，可以设置url匹配模式，过滤器名称等。这里需要注意一点的是@WebFilter这个注解是Servlet3.0的规范，并不是Spring boot提供的。除了这个注解以外，我们还需在配置类中加另外一个注解：@ServletComponetScan，指定扫描的包。 12345678@SpringBootApplication@MapperScan(&quot;com.pandy.blog.dao&quot;)@ServletComponentScan(&quot;com.pandy.blog.filters&quot;)public class Application &#123; public static void main(String[] args) throws Exception &#123; SpringApplication.run(Application.class, args); &#125;&#125; 参考链接https://www.cnblogs.com/paddix/p/8365558.html","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"springboot简单操作记录","slug":"2019-11/14-springboot简单操作记录","date":"2019-11-14T13:07:37.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/14/2019-11/14-springboot简单操作记录/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/14/2019-11/14-springboot%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/","excerpt":"","text":"关于文档Spring Boot 参考指南提供了 html、pdf 和 epub 格式的文档。最新的副本可在 http://docs.spring.io/spring-boot/docs/current/reference 获取。 在这里查看历史版本 https://docs.spring.io/spring-boot/docs/ 2.x 中文文档https://docshome.gitbooks.io/springboot/content/ 快速入门 Spring CLI 示例这是一个非常简单的 web 应用程序，可以用于测试您的安装情况。创建一个名为 app.groovy 的文件： 123456789@RestControllerclass ThisWillActuallyRun &#123; @RequestMapping(&quot;/&quot;) String home() &#123; &quot;Hello World!&quot; &#125;&#125; 之后在 shell 中运行它： 1$ spring run app.groovy 注意 第一次运行应用的时候需要一些时间，因为需要下载依赖。后续运行将会更快。 在您喜欢的浏览器中打开 localhost:8080，您应该会看到以下输出： 1Hello World! 命令行工具mvn spring-boot:run 使用命令行启动一个 springboot 项目 mvn package","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"}]},{"title":"nvm-windows使用","slug":"2019-11/10-nvm-windows使用","date":"2019-11-10T04:25:32.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/10/2019-11/10-nvm-windows使用/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/10/2019-11/10-nvm-windows%E4%BD%BF%E7%94%A8/","excerpt":"","text":"参考根目录： D:\\anarckk\\X\\NVM_HOME 使用参考github:https://github.com/coreybutler/nvm-windows Usage NVM for Windows is a command line tool. Simply type nvm in the console for help. The basic commands are: nvm arch [32|64]: Show if node is running in 32 or 64 bit mode. Specify 32 or 64 to override the default architecture. nvm install &lt;version&gt; [arch]: The version can be a node.js version or &quot;latest&quot; for the latest stable version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set [arch] to &quot;all&quot; to install 32 AND 64 bit versions. nvm list [available]: List the node.js installations. Type available at the end to show a list of versions available for download. nvm on: Enable node.js version management. nvm off: Disable node.js version management (does not uninstall anything). nvm proxy [url]: Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to &quot;none&quot; to remove the proxy. nvm uninstall &lt;version&gt;: Uninstall a specific version. nvm use &lt;version&gt; [arch]: Switch to use the specified version. Optionally specify 32/64bit architecture. nvm use &lt;arch&gt; will continue using the selected version, but switch to 32/64 bit mode based on the value supplied to &lt;arch&gt;. For information about using use in a specific directory (or using .nvmrc), please refer to issue #16. nvm root &lt;path&gt;: Set the directory where nvm should store different versions of node.js. If &lt;path&gt; is not set, the current root will be displayed. nvm version: Displays the current running version of NVM for Windows. nvm node_mirror &lt;node_mirror_url&gt;: Set the node mirror.People in China can use https://npm.taobao.org/mirrors/node/ nvm npm_mirror &lt;npm_mirror_url&gt;: Set the npm mirror.People in China can use https://npm.taobao.org/mirrors/npm/ 需要的环境变量NVM_HOME D:\\anarckk\\X\\NVM_HOME\\nvm NVM_SYMLINK D:\\anarckk\\X\\NVM_HOME\\nodejs D:\\anarckk\\X\\NVM_HOME\\nvm\\settings.txtroot: D:\\anarckk\\X\\NVM_HOME\\nvm arch: 64 proxy: none originalpath: . originalversion: node_mirror: npm_mirror:","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nvm","slug":"nvm","permalink":"https://anarckk.github.io/myvolantis/tags/nvm/"}]},{"title":"国际标准纸张尺寸","slug":"2019-11/10-国际标准纸张尺寸","date":"2019-11-10T04:00:00.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/10/2019-11/10-国际标准纸张尺寸/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/10/2019-11/10-%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E7%BA%B8%E5%BC%A0%E5%B0%BA%E5%AF%B8/","excerpt":"","text":"A 型纸张 B 型纸张","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[]},{"title":"Intellij IDEA同步代码至远程FTP服务器","slug":"2019-11/10-Intellij IDEA同步代码至远程FTP服务器","date":"2019-11-09T19:00:19.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/10/2019-11/10-Intellij IDEA同步代码至远程FTP服务器/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/10/2019-11/10-Intellij%20IDEA%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81%E8%87%B3%E8%BF%9C%E7%A8%8BFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"配置tools -&gt;deployment -&gt;configuration,添加一个配置在这个配置里，增加一项 ftp 服务器地址的配置，你懂得。Mapping 选项，deploy path设置成 “ &#x2F; ” 即可 tools-&gt;deployment-&gt;browse remote host打开远程小窗口 同步打开需要修改的代码，修改后右键–&gt;deployment-&gt;upload&#x2F;download&#x2F;syn","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"}]},{"title":"解决vsftpd登录、上传、下载网络速度慢的问题","slug":"2019-11/10-解决vsftpd登录、上传、下载网络速度慢的问题","date":"2019-11-09T18:17:20.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/10/2019-11/10-解决vsftpd登录、上传、下载网络速度慢的问题/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/10/2019-11/10-%E8%A7%A3%E5%86%B3vsftpd%E7%99%BB%E5%BD%95%E3%80%81%E4%B8%8A%E4%BC%A0%E3%80%81%E4%B8%8B%E8%BD%BD%E7%BD%91%E7%BB%9C%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"解决清空 &#x2F;etc&#x2F;resolv.conf 原因该文件是DNS域名解析的配置文件，它的格式很简单，每行以一个关键字开头，后接配置参数。resolv.conf的关键字主要有四个，分别是： nameserver #定义DNS服务器的IP地址domain #定义本地域名search #定义域名的搜索列表sortlist #对返回的域名进行排序 我清空之前的文件内容： # Generated by NetworkManagersearch localdomainnameserver 192.168.216.2 把它清空成 # Generated by NetworkManager 问题就解决了，再次看文件，内容还是空的。说明，这是个误导文件，程序发现这个误导文件中没有内容，会继续正确的走。但是如果有内容，就会被它误导。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"}]},{"title":"Spring中获取request的几种方法，及其线程安全性","slug":"2019-11/09-Spring中获取request的几种方法，及其线程安全性","date":"2019-11-09T14:43:16.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-Spring中获取request的几种方法，及其线程安全性/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-Spring%E4%B8%AD%E8%8E%B7%E5%8F%96request%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%8C%E5%8F%8A%E5%85%B6%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E6%80%A7/","excerpt":"","text":"来源Spring中获取request的几种方法，及其线程安全性分析 概述在哪里使用1)在Spring的Bean中使用request对象：既包括Controller、Service、Repository等MVC的Bean，也包括了Component等普通的Spring Bean。为了方便说明，后文中Spring中的Bean一律简称为Bean。 2)在非Bean中使用request对象：如普通的Java对象的方法中使用，或在类的静态方法中使用。 此外，本文讨论是围绕代表请求的request对象展开的，但所用方法同样适用于response对象、InputStream&#x2F;Reader、OutputStream&#x2F; Writer等；其中InputStream&#x2F;Reader可以读取请求中的数据，OutputStream&#x2F; Writer可以向响应写入数据。 最后，获取request对象的方法与Spring及MVC的版本也有关系；本文基于Spring4进行讨论，且所做的实验都是使用4.1.1版本。 研究手段客户端测试代码 123456789101112131415161718192021public class Test &#123; public static void main(String[] args) throws Exception &#123; String prefix = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;) + &quot;::&quot;; for (int i = 0; i &lt; 1000; i++) &#123; final String value = prefix + i; new Thread() &#123; @Override public void run() &#123; try &#123; CloseableHttpClient httpClient = HttpClients.createDefault(); HttpGet httpGet = new HttpGet(&quot;http://localhost:8080/test?key=&quot; + value); httpClient.execute(httpGet); httpClient.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125;.start(); &#125; &#125;&#125; 服务器中Controller代码如下（暂时省略了获取request对象的代码） 123456789101112131415161718192021222324@Controllerpublic class TestController &#123; // 存储已有参数，用于判断参数是否重复，从而判断线程是否安全 public static Set&lt;String&gt; set = new ConcurrentSkipListSet&lt;&gt;(); @RequestMapping(&quot;/test&quot;) public void test() throws InterruptedException &#123; // …………………………通过某种方式获得了request对象……………………………… // 判断线程安全 String value = request.getParameter(&quot;key&quot;); if (set.contains(value)) &#123; System.out.println(value + &quot;\\t重复出现，request并发不安全！&quot;); &#125; else &#123; System.out.println(value); set.add(value); &#125; // 模拟程序执行了一段时间 Thread.sleep(1000); &#125;&#125; 补充：上述代码原使用HashSet来判断value是否重复，经网友批评指正，使用线程不安全的集合类验证线程安全性是欠妥的，现已改为ConcurrentSkipListSet。 Controller中加参数12345678@Controllerpublic class TestController &#123; @RequestMapping(&quot;/test&quot;) public void test(HttpServletRequest request) throws InterruptedException &#123; // 模拟程序执行了一段时间 Thread.sleep(1000); &#125;&#125; 该方法实现的原理是，在Controller方法开始处理请求时，Spring会将request对象赋值到方法参数中。除了request对象，可以通过这种方法获取的参数还有很多，具体可以参见：https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-methods Controller中获取request对象后，如果要在其他方法中（如service方法、工具类方法等）使用request对象，需要在调用这些方法时将request对象作为参数传入。 线程安全性测试结果：线程安全 分析：此时request对象是方法参数，相当于局部变量，毫无疑问是线程安全的。 优缺点这种方法的主要缺点是request对象写起来冗余太多，主要体现在两点： 1)如果多个controller方法中都需要request对象，那么在每个方法中都需要添加一遍request参数 2)request对象的获取只能从controller开始，如果使用request对象的地方在函数调用层级比较深的地方，那么整个调用链上的所有方法都需要添加request参数 实际上，在整个请求处理的过程中，request对象是贯穿始终的；也就是说，除了定时器等特殊情况，request对象相当于线程内部的一个全局变量。而该方法，相当于将这个全局变量，传来传去。 自动注入123456789101112@Controllerpublic class TestController&#123; @Autowired private HttpServletRequest request; //自动注入request @RequestMapping(&quot;/test&quot;) public void test() throws InterruptedException&#123; //模拟程序执行了一段时间 Thread.sleep(1000); &#125;&#125; 测试结果：线程安全 分析：在Spring中，Controller的scope是singleton(单例)，也就是说在整个web系统中，只有一个TestController；但是其中注入的request却是线程安全的，原因在于： 使用这种方式，当Bean（本例的TestController）初始化时，Spring并没有注入一个request对象，而是注入了一个代理（proxy）；当Bean中需要使用request对象时，通过该代理获取request对象。 下面通过具体的代码对这一实现进行说明。 在上述代码中加入断点，查看request对象的属性，如下图所示： 在图中可以看出，request实际上是一个代理：代理的实现参见AutowireUtils的内部类ObjectFactoryDelegatingInvocationHandler： 1234567891011121314151617181920/** * Reflective InvocationHandler for lazy access to the current target object. */@SuppressWarnings(&quot;serial&quot;)private static class ObjectFactoryDelegatingInvocationHandler implements InvocationHandler, Serializable &#123; private final ObjectFactory&lt;?&gt; objectFactory; public ObjectFactoryDelegatingInvocationHandler(ObjectFactory&lt;?&gt; objectFactory) &#123; this.objectFactory = objectFactory; &#125; @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; // ……省略无关代码 try &#123; return method.invoke(this.objectFactory.getObject(), args); // 代理实现核心代码 &#125; catch (InvocationTargetException ex) &#123; throw ex.getTargetException(); &#125; &#125;&#125; 手动调用123456789@Controllerpublic class TestController &#123; @RequestMapping(&quot;/test&quot;) public void test() throws InterruptedException &#123; HttpServletRequest request = ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest(); // 模拟程序执行了一段时间 Thread.sleep(1000); &#125;&#125; 测试结果：线程安全 分析：该方法与方法2（自动注入）类似，只不过方法2中通过自动注入实现，本方法通过手动方法调用实现。因此本方法也是线程安全的。 优点：可以在非Bean中直接获取。缺点：如果使用的地方较多，代码非常繁琐；因此可以与其他方法配合使用。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"nodepad++快捷键","slug":"2019-11/09-nodepad-快捷键","date":"2019-11-09T14:40:13.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-nodepad-快捷键/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-nodepad-%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"需要的快捷键| 快捷键 | 效果 ||: —– |: —– || ctrl + l | 删除一行 || ctrl + d | 复制当前行|| ctrl + h | 打开Find &#x2F; Replace 对话框|| ctrl + t | 上一行与本行交换 || f11 | 全屏 || ctrl + u | 变为小写 || Ctrl-Shift-U | 变为大写 || ctrl + q | 块注释&#x2F;消除注释 |","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nodepad++","slug":"nodepad","permalink":"https://anarckk.github.io/myvolantis/tags/nodepad/"}]},{"title":"mybatis查找表","slug":"2019-11/09-mybatis查找表","date":"2019-11-09T14:39:19.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-mybatis查找表/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-mybatis%E6%9F%A5%E6%89%BE%E8%A1%A8/","excerpt":"","text":"查找表简单查询 123&lt;select id=&quot;selectPerson&quot; parameterType=&quot;int&quot; resultType=&quot;hashmap&quot;&gt; SELECT * FROM PERSON WHERE ID = #&#123;id&#125;&lt;/select&gt; 这个语句被称作 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。#{id}这就告诉 MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样： 1234// 近似的 JDBC 代码，非 MyBatis 代码...String selectPerson = &quot;SELECT * FROM PERSON WHERE ID=?&quot;;PreparedStatement ps = conn.prepareStatement(selectPerson);ps.setInt(1,id); 这就是 MyBatis 节省你时间的地方","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"java8-Map迭代","slug":"2019-11/09-java8-Map迭代","date":"2019-11-09T14:37:01.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-java8-Map迭代/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-java8-Map%E8%BF%AD%E4%BB%A3/","excerpt":"","text":"12345678910111213// 创建一个MapMap&lt;String, Object&gt; infoMap = new HashMap&lt;&gt;();infoMap.put(&quot;name&quot;, &quot;Zebe&quot;);infoMap.put(&quot;site&quot;, &quot;www.zebe.me&quot;);infoMap.put(&quot;email&quot;, &quot;zebe@vip.qq.com&quot;);// 传统的Map迭代方式for (Map.Entry&lt;String, Object&gt; entry : infoMap.entrySet()) &#123; System.out.println(entry.getKey() + &quot;：&quot; + entry.getValue());&#125;// JDK8的迭代方式infoMap.forEach((key, value) -&gt; &#123; System.out.println(key + &quot;：&quot; + value);&#125;); 看起来更屌的 12345678910111213public static String createToken(Map&lt;String, String&gt; claims) throws Exception &#123; try &#123; Algorithm algorithm = Algorithm.HMAC256(SECRET); JWTCreator.Builder builder = JWT.create() .withIssuer(ISSUER) //设置过期时间为2小时 .withExpiresAt(DateUtils.addHours(new Date(), 2)); claims.forEach(builder::withClaim); return builder.sign(algorithm); &#125; catch (IllegalArgumentException e) &#123; throw new Exception(&quot;生成token失败&quot;); &#125;&#125; 当然，java.util.Map 的 forEach 接收一个函数式接口 1234567891011121314151617181920212223242526272829default void forEach(BiConsumer&lt;? super K, ? super V&gt; action) &#123; Objects.requireNonNull(action); for (Map.Entry&lt;K, V&gt; entry : entrySet()) &#123; K k; V v; try &#123; k = entry.getKey(); v = entry.getValue(); &#125; catch(IllegalStateException ise) &#123; // this usually means the entry is no longer in the map. throw new ConcurrentModificationException(ise); &#125; action.accept(k, v); &#125;&#125;@FunctionalInterfacepublic interface BiConsumer&lt;T, U&gt; &#123; void accept(T t, U u); default BiConsumer&lt;T, U&gt; andThen(BiConsumer&lt;? super T, ? super U&gt; after) &#123; Objects.requireNonNull(after); return (l, r) -&gt; &#123; accept(l, r); after.accept(l, r); &#125;; &#125;&#125; BiConsumer 是一个函数式接口，它要求函数接收 2 个参数，看起来下面这个符合接口要求。 1public Builder withClaim(String name, String value) 参考Java8 - Map更优雅的迭代方式：forEach java8新特性-foreach&amp;lambda","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"java8Map","slug":"java8Map","permalink":"https://anarckk.github.io/myvolantis/tags/java8Map/"}]},{"title":"iptables的dport和sport理解","slug":"2019-11/09-iptables的dport和sport理解","date":"2019-11-09T14:35:35.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-iptables的dport和sport理解/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-iptables%E7%9A%84dport%E5%92%8Csport%E7%90%86%E8%A7%A3/","excerpt":"","text":"iptables里面的dport和sport 首先先来翻译一下dport和sport的意思： dport：目的端口 sport：来源端口 INPUT1-A INPUT -p tcp --dport 80 -j ACCEPT 注意里面的INPUT参数，这个代表你的这条数据包的进行的 “进入” 操作！ 那么你的这条数据包可以这么描述： 1.这是一条从外部进入内部本地服务器的数据。 2.数据包的目的（dport）地址是80，就是要访问我本地的80端口。 3.允许以上的数据行为通过。. 总和：允许外部数据访问我的本地服务器80端口。 1/sbin/iptables -A INPUT -p tcp --sport 80 -j ACCEPT 1.这是一条从外部进入内部本地服务器的数据。 2.数据包的来源端口是（sport）80，就是对方的数据包是80端口发送过来的。 3.允许以上数据行为。 总结：允许外部的来自80端口的数据访问我的本地服务器。 OUTPUT1-A OUTPUT -p tcp --dport 80 -j ACCEPT 1.这是一条从内部出去的数据。 2.出去的目的（dport）端口是80。 3.允许以上数据行为。 output行为总结：dport只外部，sport指本地。 参考链接iptables里面的dport和sport","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://anarckk.github.io/myvolantis/tags/iptables/"}]},{"title":"alibaba.fastjson的使用","slug":"2019-11/09-alibaba-fastjson的使用","date":"2019-11-09T14:20:30.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-alibaba-fastjson的使用/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-alibaba-fastjson%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"依赖包12345&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt; 字符串转对象正常转对象123// body &#123; &quot;pageNo&quot;: &quot;1&quot;, &quot;pageSize&quot;: &quot;20&quot;, &quot;token&quot;: &quot;1231&quot;&#125;// token is String &quot;1231&quot;String token = ((JSONObject) JSON.parse(body)).getString(&quot;token&quot;); JSONObject 还有很多 api ，getInteger、getArray 之类的。 异常情况下会发生什么1Object obj = JSON.parse(&quot;&quot;); // obj is null. 1Object obj = JSON.parse(&quot;333&quot;); // obj is Integer 333 1Object obj = JSON.parse(&quot;wtf&quot;); // throw com.alibaba.fastjson.JSONException","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"}]},{"title":"IDEA新建文件自动注释","slug":"2019-11/09-IDEA新建文件自动注释","date":"2019-11-09T14:13:11.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/09/2019-11/09-IDEA新建文件自动注释/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/09/2019-11/09-IDEA%E6%96%B0%E5%BB%BA%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E9%87%8A/","excerpt":"","text":"设置File &gt;&gt; Settings &gt;&gt; Editor &gt;&gt;Code Style &gt;&gt; File and Code Templates&gt;&gt;Includes &gt;&gt; File Header 123/** * Created by chenfuhong on $&#123;DATE&#125; */","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"}]},{"title":"linux显示当前所在工作目录的全路径","slug":"2019-11/07-linux显示当前所在工作目录的全路径","date":"2019-11-07T14:19:30.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/07/2019-11/07-linux显示当前所在工作目录的全路径/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/07/2019-11/07-linux%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%89%80%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95%E7%9A%84%E5%85%A8%E8%B7%AF%E5%BE%84/","excerpt":"","text":"script1pwd","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"}]},{"title":"centos7 下安装 ftp","slug":"2019-11/07-centos7 下安装 ftp","date":"2019-11-07T14:09:01.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/07/2019-11/07-centos7 下安装 ftp/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/07/2019-11/07-centos7%20%E4%B8%8B%E5%AE%89%E8%A3%85%20ftp/","excerpt":"","text":"关于本篇首先，ftp有三种登录方式，匿名登录，本地用户登录，虚拟账户登录。其中本地用户登录和虚拟账户登录不能同时用。虚拟账户登录的安全性会更高。本地用户登录可以允许ftp访问到&#x2F;home&#x2F;用户 文件的上层。这样会更不安全些。本文使用的匿名账户登录的方式，今天按照本文操作了，是可用的。当然还有很多配置项目没明白，但是基本配置基本都知道大概是干嘛的。如果不是很了解 vsftpd.conf 的配置项目，得先百度。或者以后我转载一篇博客来。 –2019年11月9日21:52:14 安装script1yum install -y vsftpd 然后直接就可以使用管理命令 script12systemctl enable vsftpd.service... 配置FTP123456789101112131415161718192021222324252627282930313233343536373839404142434445#打开配置文件vim /etc/vsftpd/vsftpd.conf#显示行号:set number#修改配置 12 行anonymous_enable=NO#修改配置 33 行anon_mkdir_write_enable=YES#修改配置48行chown_uploads=YES#修改配置72行async_abor_enable=YES#修改配置82行ascii_upload_enable=YES#修改配置83行ascii_download_enable=YES#修改配置86行ftpd_banner=Welcome to blah FTP service.#修改配置100行chroot_local_user=YES#添加下列内容到vsftpd.conf末尾use_localtime=YESlisten_port=21idle_session_timeout=300guest_enable=YESguest_username=vsftpd# 用户配置文件目录user_config_dir=/etc/vsftpd/vconfdata_connection_timeout=1virtual_use_local_privs=YESpasv_min_port=40000pasv_max_port=40010accept_timeout=5connect_timeout=1allow_writeable_chroot=YES 建立用户文件script123456#创建编辑用户文件vim /etc/vsftpd/virtusers#第一行为用户名，第二行为密码。不能使用root作为用户名 leo12345 生成用户数据文件script12345db_load -T -t hash -f /etc/vsftpd/virtusers /etc/vsftpd/virtusers.db# 设定PAM验证文件，并指定对虚拟用户数据库文件进行读取chmod 600 /etc/vsftpd/virtusers.db 修改 &#x2F;etc&#x2F;pam.d&#x2F;vsftpd 文件script12345678910# 修改前先备份 cp /etc/pam.d/vsftpd /etc/pam.d/vsftpd.bakvi /etc/pam.d/vsftpd#先将配置文件中原有的 auth 及 account 的所有配置行均注释掉auth sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers account sufficient /lib64/security/pam_userdb.so db=/etc/vsftpd/virtusers # 如果系统为32位，上面改为lib 新建系统用户vsftpd，用户目录为&#x2F;home&#x2F;vsftpdscript123#用户登录终端设为/bin/false(即：使之不能登录系统)useradd vsftpd -d /home/vsftpd -s /bin/falsechown -R vsftpd:vsftpd /home/vsftpd 建立虚拟用户个人配置文件script123456789101112131415161718mkdir /etc/vsftpd/vconfcd /etc/vsftpd/vconf#这里建立虚拟用户leo配置文件touch leo#编辑leo用户配置文件，内容如下，其他用户类似vi leolocal_root=/home/vsftpd/leo/write_enable=YESanon_world_readable_only=NOanon_upload_enable=YESanon_mkdir_write_enable=YESanon_other_write_enable=YES#建立leo用户根目录mkdir -p /home/vsftpd/leo/ 防火墙设置script1234567891011vi /etc/sysconfig/iptables#编辑iptables文件，添加如下内容，开启21端口-A INPUT -m state --state NEW -m tcp -p tcp --dport 21 -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 40000:40010 -j ACCEPT# firewall 的设置方式：firewall-cmd --zone=public --add-service=ftp --permanentfirewall-cmd --zone=public --add-port=21/tcp --permanentfirewall-cmd --zone=public --add-port=40000-40010/tcp --permanent 关闭 SELINUX对于关闭这个东西，他是这么说的 这个时候，使用ftp的工具连接时，我们发现是可以连接的。传输文件的时候，会发现文件上传和下载都会出现，500、503 、200等问题。这个时候，可以进行以下操作： script1234567891011#打开SELINUX配置文件vim /etc/selinux/config#修改配置参数#注释 SELINUX=enforcing#增加 SELINUX=disabled#修改完成后，需要重启！ 但是，我没这么做，一样可以用了。一些问题关于权限问题&#x2F;home&#x2F;vsftpd 的权限是 755 底下的权限也是 755，如果要让 nginx 服务访问到文件，必须得有执行权限。 ftp 协议的默认端口是 21 端口可能还有个控制端接口20吧，不太清楚。 参考链接CentOS7 FTP安装与配置","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"},{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"}]},{"title":"linux新建和删除用户","slug":"2019-11/07-linux新建和删除用户","date":"2019-11-07T14:08:00.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/07/2019-11/07-linux新建和删除用户/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/07/2019-11/07-linux%E6%96%B0%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7/","excerpt":"","text":"新建和删除用户12345adduser hexous //添加一个新用户，名字叫 hexouspasswd hexous //设置用户密码gpasswd -a hexous wheel //给予sudo权限, 当权限不够时，可以用sudolid -g hexous //查询所有带sudo权限的用户userdel -r hexous //删除用户和相应的目录 更进一步，这下面的我没有尝试过，但感觉很有意思。参考CentOS7 新建用户与SSH登陆设置 123PermitRootLogin no //阻止root用户登陆 AllowUsers sirius //允许制定用户使用SSH登陆PasswordAuthentication no //阻止用户密码SSH登陆 !!! 如果设置no，证书还没配置对，你就登陆不上了 看起来挺骚的script123#用户登录终端设为/bin/false(即：使之不能登录系统)useradd vsftpd -d /home/vsftpd -s /bin/falsechown -R vsftpd:vsftpd /home/vsftpd","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"}]},{"title":"linux文件权限","slug":"2019-11/07-linux文件权限","date":"2019-11-07T13:31:25.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/07/2019-11/07-linux文件权限/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/07/2019-11/07-linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/","excerpt":"","text":"基本知识每一个文件都拥有多种类型的权限。用户（user）是文件的所有者，通常拥有所有的访问权。用户组（group）是多个用户的集合（由系统管理员指定），可能拥有文件的部分访问权。其他用户（others）是除文件所有者或用户组成员之外的任何人。 script12ls -l# 输出： -rw-r--r--. 1 root root 9 11月 7 21:28 fuckyou.txt 第一列表明了文件类型 1234567- 普通文件d 目录c 字符设备b 块设备l 符号链接s 套接字p 管道 接下来的9个字符可以划分为三组，每组3个字符（ — — — ）。对应着（ 用户权限 用户组权限 其他用户权限） 有三种常见的字符 r(read)、w(write)、x(execute) 用户中有一个 setuid（S）的特殊权限，具有的是这样的： -rwS——,它表示其他用户执行本文件就像所有者执行本文件一样。 沾滞位目录有个叫沾滞位的特殊权限，出现在其他用户权限组中的执行权限位置（x）位置。它使用 t 或 T 来表示。如果目录设置了沾滞位，只有创建该目录的用户才能删除目录中的文件，就算用户组和其他用户也有写的权限，仍无能为力。 如果没有设置执行权限，但设置了沾滞位，就是用 T；如果同时设置了执行权限和沾滞位，就是用 t。例如： 1------rwt, ------rwT 修改文件权限直接指定对应身份的访问权限script1chmod u=rwx, g=rw, o=r filename 可以用 + 为用户、用户组和其他用户添加权限，用 - 取消权限script1chmod o+x filename 给所有权限类别（u\\g\\o)添加可执行权限script1chmod a+x filename 其中 a 表示 all script1chmod a-x filename 用数字r &#x3D; 4w &#x3D; 2x &#x3D; 1 rw- &#x3D; 4 + 2 &#x3D; 6r-x &#x3D; 4 + 1 &#x3D; 5 script123chmod 764 filename# 相当于chmod rwxrw-r-- 更改所有权可以使用 chown 命令更改文件或目录的所有权 script1234chown user:group filename# 例如：chown slynux:users test.sh# slynux 是用户名， users 是组名 设置沾滞位设置有只有目录的所有者能删除文件夹里的文件，其他人即使有写权限也不能删除 script1chmod a+t directory_name 以递归方式设置文件权限以递归的方式修改当前目录下的所有文件和子目录的权限。选项 -R 指定以递归的方式修改权限。用 . 指定当前工作目录。 script1chmod 777 . -R 以递归方式修改所有权script1chmod user:group . -R 以不同的身份运行可执行文件（setuid)script1234chmod +s executable_filechown root:root executable_filechmod +s executable_file./executable_file 现在，无论是谁发起调用，该文件都是以root用户的身份来执行。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"}]},{"title":"原生video标签移除下载按钮的方法","slug":"2019-11/06-原生video标签移除下载按钮的方法","date":"2019-11-06T12:51:39.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/06/2019-11/06-原生video标签移除下载按钮的方法/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/06/2019-11/06-%E5%8E%9F%E7%94%9Fvideo%E6%A0%87%E7%AD%BE%E7%A7%BB%E9%99%A4%E4%B8%8B%E8%BD%BD%E6%8C%89%E9%92%AE%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"12&lt;video src=&quot;2019-11-01-宫崎骏作品合集.mp4&quot; style=&quot;max-width:100%;&quot; controlsList=&quot;nodownload&quot;controls=&quot;controls&quot;&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"html","slug":"html","permalink":"https://anarckk.github.io/myvolantis/tags/html/"}]},{"title":"hexo写作","slug":"2019-11/06-hexo写作","date":"2019-11-06T11:10:21.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/06/2019-11/06-hexo写作/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/06/2019-11/06-hexo%E5%86%99%E4%BD%9C/","excerpt":"","text":"1hexo new [layout] &lt;title&gt; 布局（Layout）Hexo 有三种默认布局：post、page 和 draft。在创建者三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 post 相同，都将储存到 source&#x2F;_posts 文件夹。post source&#x2F;_postspage sourcedraft source&#x2F;_drafts 新建文件名称Hexo 默认以标题做为文件名称，但您可编辑 new_post_name 参数来改变默认的文件名称，举例来说，设为 :year-:month-:day-:title.md 可让您更方便的通过日期来管理文章。 1234567变量 描述:title 标题（小写，空格将会被替换为短杠）:year 建立的年份，比如， 2015:month 建立的月份（有前导零），比如， 04:i_month 建立的月份（无前导零），比如， 4:day 建立的日期（有前导零），比如， 07:i_day 建立的日期（无前导零），比如， 7 草稿（draft）刚刚提到了 Hexo 的一种特殊布局：draft，这种布局在建立时会被保存到 source&#x2F;_drafts 文件夹，您可通过 publish 命令将草稿移动到 source&#x2F;_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局。 1$ hexo publish [layout] &lt;title&gt; 草稿默认不会显示在页面中，您可在执行时加上 –draft 参数，或是把 render_drafts 参数设为 true 来预览草稿。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"idea 注册码激活","slug":"2019-11/04-idea-注册码激活","date":"2019-11-04T11:37:38.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/04/2019-11/04-idea-注册码激活/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/04/2019-11/04-idea-%E6%B3%A8%E5%86%8C%E7%A0%81%E6%BF%80%E6%B4%BB/","excerpt":"","text":"首先首先要修改 c:\\Windows\\System32\\drivers\\etc\\host 文件，可以猜到，account.jetbrains.com 是 idea 的在线验证网址，打断这个验证 10.0.0.0 https://account.jetbrains.com:443 针对 idea 2018.3.5预计到2020.5失效 1K6IXATEF43-eyJsaWNlbnNlSWQiOiJLNklYQVRFRjQzIiwibGljZW5zZWVOYW1lIjoi5o6I5p2D5Luj55CG5ZWGOiBodHRwOi8vaWRlYS5oay5jbiIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNi0wNSIsInBhaWRVcFRvIjoiMjAyMC0wNi0wNCJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNi0wNSIsInBhaWRVcFRvIjoiMjAyMC0wNi0wNCJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDYtMDUiLCJwYWlkVXBUbyI6IjIwMjAtMDYtMDQifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDYtMDUiLCJwYWlkVXBUbyI6IjIwMjAtMDYtMDQifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDYtMDUiLCJwYWlkVXBUbyI6IjIwMjAtMDYtMDQifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDYtMDUiLCJwYWlkVXBUbyI6IjIwMjAtMDYtMDQifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDYtMDUiLCJwYWlkVXBUbyI6IjIwMjAtMDYtMDQifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA2LTA1IiwicGFpZFVwVG8iOiIyMDIwLTA2LTA0In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNi0wNSIsInBhaWRVcFRvIjoiMjAyMC0wNi0wNCJ9XSwiaGFzaCI6IjEzMjkyMzI4LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-KUaQi549fH96M/qU7jTvuMeq2GuedA+WppV3irI0JHlfDuhJlidK2m3yoRxitGNmimPFVUA8Dk38OzXnP29I39QDXH5VAF8VjOP0XrqdfrpaZUKpdhRaYz8r1NAwID75U4LqYCvFbazka1dCMJBFqJ2wum1+CSQhJ1O7CSchAJAbjcCRQjbU2sXOofAA2sPLi7nlJw2wrjOHzH9cOczUn11n24PE9BQ/oYGITHkzsu94i4Q90Z1jQysMtXLgM/HoLSHY2T9rKULLoh+tdMwBp9+m0VLF/R5gdkVDV/dlorrA9OEZIsSOaG+oWSen/AulKH6OXllZJoR+b/T6YYfGWg==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow== 针对 idea 2019.2.3注册码可用到 2020.7.26 日 1Y9MXSIF79G-eyJsaWNlbnNlSWQiOiJZOU1YU0lGNzlHIiwibGljZW5zZWVOYW1lIjoiSkJGYW1pbHkgQ2hpbmEiLCJhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZW5zZVJlc3RyaWN0aW9uIjoiIiwiY2hlY2tDb25jdXJyZW50VXNlIjpmYWxzZSwicHJvZHVjdHMiOlt7ImNvZGUiOiJJSSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifSx7ImNvZGUiOiJBQyIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifSx7ImNvZGUiOiJEUE4iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiUFMiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiR08iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiRE0iLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiQ0wiLCJmYWxsYmFja0RhdGUiOiIyMDE5LTA3LTI2IiwicGFpZFVwVG8iOiIyMDIwLTA3LTI1In0seyJjb2RlIjoiUlMwIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJEIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlBDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJNIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IldTIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IkRCIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IkRDIiwiZmFsbGJhY2tEYXRlIjoiMjAxOS0wNy0yNiIsInBhaWRVcFRvIjoiMjAyMC0wNy0yNSJ9LHsiY29kZSI6IlJTVSIsImZhbGxiYWNrRGF0ZSI6IjIwMTktMDctMjYiLCJwYWlkVXBUbyI6IjIwMjAtMDctMjUifV0sImhhc2giOiIxMzgzODYyOS8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-rI4et6OSKLA4gvOzxtyp48SCWtjwsOSQBJittaw6BOVJOwVBz0p31wBWDFSdIogdRPKquk2BAou7N694entEn4/Db3Ol5uotDtUd2MHuo+BBu9QcwIoX3RTrnYLwJfTlEJfRH/3TF3WtkPGQZQQcw/23hsZzdC/WJY6tmvyTijIBScUsvIOxZ+8REbWbkTQx1KliliFyrMua7hit8LThzfffZloHciaHwUP9BjxEjU0qQi+yFacSXjxEZERJT25hZrMN+bqBxcn59/4UJBrITt8YpLIlydt0+6vMSWAMawMzKpeDEDInKy0XomauTIUfxS4sbw/dSyVdSrh+IuOc7g==-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO/5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij/78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB/xVy/VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE/EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn/72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN/lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D/cXmgpOyW/1SmBz3XjVIi/zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV/bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit/pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow==","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"},{"name":"idea激活","slug":"idea激活","permalink":"https://anarckk.github.io/myvolantis/tags/idea%E6%BF%80%E6%B4%BB/"}]},{"title":"mybatis开发常用","slug":"2019-11/03-mybatis开发常用","date":"2019-11-03T14:00:10.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/03/2019-11/03-mybatis开发常用/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/03/2019-11/03-mybatis%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8/","excerpt":"","text":"1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.inspur.generate.dao.BasAnalyticalTemplateMapper&quot;&gt; &lt;!-- 写错了instr(#&#123;ids&#125;,id)写反了。应该是 instr(id,#&#123;ids&#125;) --&gt; &lt;select id=&quot;getAllListByIds&quot; resultType=&quot;com.inspur.generate.entity.BasAnalyticalTemplate&quot;&gt; select * from bas_analytical_template where instr(#&#123;ids&#125;,id) &lt;/select&gt; &lt;insert id=&quot;insertBatch&quot; parameterType=&quot;java.util.List&quot;&gt; insert into bas_analytical_template (id,title,content,`type`,template) values &lt;foreach collection=&quot;list&quot; item=&quot;list&quot; separator=&quot;,&quot;&gt; (#&#123;list.id&#125;,#&#123;list.title&#125;,#&#123;list.content&#125;,#&#123;list.type&#125;,#&#123;list.template&#125;) &lt;/foreach&gt; &lt;/insert&gt;&lt;/mapper&gt; 123456789/** * 分析模板表 */public interface BasAnalyticalTemplateMapper extends BaseMapper&lt;BasAnalyticalTemplate&gt; &#123; List&lt;BasAnalyticalTemplate&gt; getAllListByIds(@Param(&quot;ids&quot;) List&lt;String&gt; questionIds); void insertBatch(@Param(&quot;list&quot;) List&lt;BasAnalyticalTemplate&gt; templates);&#125; 其他 123456789101112131415161718192021&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.inspur.generate.dao.BasAnalyticalTemplateMapper&quot;&gt; &lt;insert id=&quot;insertAuthor&quot;&gt; insert into Author (id,username,password,email,bio) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;bio&#125;) &lt;/insert&gt; &lt;update id=&quot;updateAuthor&quot;&gt; update Author set username = #&#123;username&#125;, password = #&#123;password&#125;, email = #&#123;email&#125;, bio = #&#123;bio&#125; where id = #&#123;id&#125; &lt;/update&gt; &lt;delete id=&quot;deleteAuthor&quot;&gt; delete from Author where id = #&#123;id&#125; &lt;/delete&gt;&lt;/mapper&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"}]},{"title":"在我的世界里快乐的玩耍","slug":"2019-11/03-在我的世界里快乐的玩耍","date":"2019-11-03T11:08:10.000Z","updated":"2023-06-20T09:14:39.446Z","comments":true,"path":"2019/11/03/2019-11/03-在我的世界里快乐的玩耍/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/03/2019-11/03-%E5%9C%A8%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%E5%BF%AB%E4%B9%90%E7%9A%84%E7%8E%A9%E8%80%8D/","excerpt":"","text":"最近刚搭建了一个新的我的世界服务器，版本是1.12现在还没人玩，给同学玩了，说网速很好，现在写一下怎么进来玩，让更多人有机会进来玩。 下载我的世界客户端1.12 jdk-8u231-windows-x64.exe 安装安装 jdk，然后打开我的世界客户端，在客户端里修改 java 的地址，如下图 然后就可以进入游戏，在游戏里选择 多人游戏 — 添加服务器 — 输入服务器地址： frp.wo25.net:32326","categories":[{"name":"随笔","slug":"随笔","permalink":"https://anarckk.github.io/myvolantis/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/tags/minecraft/"}]},{"title":"iptables防火墙进行访问控制","slug":"2019-11/03-iptables防火墙进行访问控制","date":"2019-11-03T03:11:37.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/03/2019-11/03-iptables防火墙进行访问控制/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/03/2019-11/03-iptables%E9%98%B2%E7%81%AB%E5%A2%99%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","excerpt":"","text":"参考 linux IPtable防火墙 禁止和开放端口, 写的很有价值，就是排版太烂了 iptbales配置详解：https://www.cnblogs.com/alimac/p/5848372.html 先从需求入手全局默认规则 input output forward 丢弃 27100、 25565、 80、 22 、 3306 端口允许 允许与目标机 192.168.216.1 的连接 清空iptables表规则script123 # 清理iptables所有的表上的所有规则 iptables -Fiptables --flush 设置 INPUT FORWARD OUTPUT 的默认策略。设置默认丢弃包的策略。 script123iptables -P INPUT DROPiptables -P FORWARD DROPiptables -P OUTPUT DROP 允许 22 端口的进出script12345# 允许 INPUT 时，由本机22端口进来的数据iptables -A INPUT -p tcp --dport 22 -j ACCEPT# 允许 OUTPUT 时，由本机22端口出去的数据iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT*/ -A 指定是 INPUT 还是 OUTPUT-p 指定是什么协议–dport 目标端口 当数据从外部进入服务器为目标端口–sport 来源端口 OUTPUT的时候，源端口在本机上。-j 就是指定是 ACCEPT 接收 或者 DROP 不接收 注意区分 INPUT –dport 22 与 INPUT –sport 27100 的意义，一个是许可目标端口为22的数据连接进入，另一个是许可来源端口为27100的数据连接进入。 script123456# 允许来自 27100 端口的数据连接进入iptables -A INPUT -p tcp --sport 27100 -j ACCEPT# 允许去往 27100 端口的数据发送出去iptables -A OUTPUT -p tcp --dport 27100 -j ACCEPTiptables -A INPUT -p udp --sport 27100 -j ACCEPTiptables -A OUTPUT -p udp --dport 27100 -j ACCEPT 允许与 192.168.216.1 宿主机数据链接的全端口自由进出script12345# -t filter 可以免掉# iptables -t filter -A INPUT -s 192.168.216.1 -p tcp -j ACCEPT# 在 minecraft 反向代理到主机的时候，连接是主动发起送给主机的，所以 INPUT 配合 -siptables -A INPUT -s 192.168.216.1 -p tcp -j ACCEPTiptables -A OUTPUT -d 192.168.216.1 -p tcp -j ACCEPT 查看 iptable 的规则script1iptables -L -n 移除 iptables 的规则script12345678910# 先查看先有规则的编码iptables -L -n --line-number/*num target prot opt source destination1 DROP tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:3306*/# 然后根据编码，移除指定的规则iptables -D INPUT 1 关于ping的问题参考来源： iptables设置ping协议ICMP linux 中 iptables关于ping的问题 允许来自外部的ping测试script123456# --icmp 省略了 --icmp-typeiptables -A INPUT -p icmp --icmp 8 -j ACCEPT #允许请求进来iptables -A OUTPUT -p icmp --icmp 0 -j ACCEPT #允许响应出去# 下面这两条也可以iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPTiptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT type 8为ping 命令请求信号type 0为ping 命令响应信号 允许本机ping外部主机script12iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPTiptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT 能ping通回环地址（有的称为 环回 loopback)不设置会导致DNS无法正常关闭等问题 script12iptables -A INPUT -i lo -p all -j ACCEPTiptables -A OUTPUT -o lo -p all -j ACCEPT 能ping通域名也就是我主动向外去连接53端口 script12iptables -A INPUT -p udp --sport 53 -j ACCEPTiptables -A OUTPUT -p udp --dport 53 -j ACCEPT # 参考的那篇博客这里dport写错了，妈逼的 注意保存规则script1service iptables save &amp;&amp; service iptables restart 配置完后的文件内容配置完成之后的 &#x2F;etc&#x2F;sysconfig&#x2F;iptables 文件 1234567891011121314151617181920212223242526272829# Generated by iptables-save v1.4.21 on Sun Nov 3 14:04:33 2019*filter:INPUT DROP [0:0]:FORWARD DROP [0:0]:OUTPUT DROP [1:328]-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT-A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT-A INPUT -p tcp -m tcp --dport 25565 -j ACCEPT-A INPUT -p tcp -m tcp --sport 27100 -j ACCEPT-A INPUT -p udp -m udp --sport 27100 -j ACCEPT-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT-A INPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p udp -m udp --sport 53 -j ACCEPT-A INPUT -s 192.168.216.1/32 -p tcp -j ACCEPT-A OUTPUT -p tcp -m tcp --sport 22 -j ACCEPT-A OUTPUT -p tcp -m tcp --sport 80 -j ACCEPT-A OUTPUT -p tcp -m tcp --sport 3306 -j ACCEPT-A OUTPUT -p tcp -m tcp --sport 25565 -j ACCEPT-A OUTPUT -p tcp -m tcp --dport 27100 -j ACCEPT-A OUTPUT -p udp -m udp --dport 27100 -j ACCEPT-A OUTPUT -p icmp -m icmp --icmp-type 0 -j ACCEPT-A OUTPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT-A OUTPUT -o lo -j ACCEPT-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT-A OUTPUT -d 192.168.216.1/32 -p tcp -j ACCEPTCOMMIT# Completed on Sun Nov 3 14:04:33 2019 对yum放行直接&#x2F;etc&#x2F;sysconfig&#x2F;iptables 配置 1234567891011121314151617181920212223# Generated by iptables-save v1.4.21 on Tue Nov 5 10:57:26 2019*filter:INPUT DROP [0:0]:FORWARD DROP [0:0]:OUTPUT DROP [24:1824] ....中间省略.........# ===主要靠下面的配置===-A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT-A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT# Dont forget to open for the DNS as well# 下面是允许 dns 的意思-A OUTPUT -p udp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT-A INPUT -p udp --sport 53 -m state --state ESTABLISHED -j ACCEPT-A OUTPUT -p tcp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT-A INPUT -p tcp --sport 53 -m state --state ESTABLISHED -j ACCEPT# and a line to accept packets from outbound connections# 下面是允许 出站（outbound） 数据包的连接-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT# ===到这===COMMIT# Completed on Tue Nov 5 10:57:26 2019 解释-m state –state &lt;状态&gt; 状态： INVALID: 无效的封包 ESTABLISHED: 已经联机成功的联机状态 NEW: 想要新建立联机的封包状态 RELATED： 这个最常用，表示这个封包是与我们主机发送出去的封包有关，可能是响应封包或者是联机成功之后的传送封包！这个状态很常被设置，因为设定了他之后，只要未来由本机发送出去的封包，即使我们没有设定封包的 INPUT 规则，该有关的封包还是可以进入我们主机，可以简化相当多的设定规则。 参考链接IPtables not allowing yum in centos 7 iptables参数-m state 对 &#x2F;etc&#x2F;sysconfig&#x2F;iptables 文件内容的介绍参考来源：https://zhidao.baidu.com/question/564388897.html 123456789101112:INPUT ACCEPT [0:0]# 该规则表示INPUT表默认策略是ACCEPT:FORWARD ACCEPT [0:0]# 该规则表示FORWARD表默认策略是ACCEPT:OUTPUT ACCEPT [0:0]# 该规则表示OUTPUT表默认策略是ACCEPT-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT# 意思是允许进入的数据包只能是刚刚我发出去的数据包的回应，ESTABLISHED：已建立的链接状态。RELATED：该数据包与本机发出的数据包有关。-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibited# 这两条的意思是在INPUT表和FORWARD表中拒绝所有其他不符合上述任何一条规则的数据包。并且发送一条host prohibited的消息给被拒绝的主机。这个是iptables的默认策略，你也可以删除这些，另外建立符合自己需求的策略。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"iptables","slug":"iptables","permalink":"https://anarckk.github.io/myvolantis/tags/iptables/"}]},{"title":"FTP、SFTP和FTPS","slug":"2019-11/03-FTP、SFTP和FTPS","date":"2019-11-03T02:44:31.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/03/2019-11/03-FTP、SFTP和FTPS/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/03/2019-11/03-FTP%E3%80%81SFTP%E5%92%8CFTPS/","excerpt":"","text":"简单点记，ftp就是文件传输协议 SFTP 借助 ssl 协议加密 ftp FTPS 借助 ssh 协议加密 ftp ssl是为http&#x2F;smtp等加密设计的，ssh是为telnet&#x2F;ftp等加密、建立传输通道而设计的。 FTPFTP是File Transfer Protocol（文件传输协议）的缩写，用来在两台计算机之间互相传送文件相比于HTTP，FTP协议要复杂得多复杂的原因，是因为FTP协议要用到两个TCP连接，一个是命令链路，用来在FTP客户端与服务器之间传递命令；另一个是数据链路，用来上传或下载数据 FTP协议有两种工作方式：PORT方式和PASV方式，中文意思为主动式和被动式 PORT（主动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路当需要传送数据时，客户端在命令链路上用PORT命令告诉服务器：我打开了XXXX端口，你过来连接我于是服务器从20端口向客户端的XXXX端口发送连接请求，建立一条数据链路来传送数据 PASV（被动）方式的连接过程是：客户端向服务器的FTP端口（默认是21）发送连接请求，服务器接受连接，建立一条命令链路当需要传送数据时，服务器在命令链路上用PASV命令告诉客户端：我打开了XXXX端口，你过来连接我于是客户端向服务器的XXXX端口发送连接请求，建立一条数据链路来传送数据 概括： 主动模式：服务器向客户端敲门，然后客户端开门被动模式：客户端向服务器敲门，然后服务器开门 所以，如果你是如果通过代理上网的话，就不能用主动模式，因为服务器敲的是上网代理服务器的门，而不是敲客户端的门而且有时候，客户端也不是轻易就开门的，因为有防火墙阻挡，除非客户端开放大于1024的高端端口 参考FTP时显示500 Illegal PORT command的解决 关于FTP主动模式与被动模式的一点理解 鸟哥的Linux 私房菜– vsFTPd 文件服务器","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"}]},{"title":"minecraft服务器创世神worldedit插件","slug":"2019-11/02-minecraft服务器创世神worldedit插件","date":"2019-11-02T14:39:18.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-minecraft服务器创世神worldedit插件/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-minecraft%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E4%B8%96%E7%A5%9Eworldedit%E6%8F%92%E4%BB%B6/","excerpt":"","text":"下载服务器端的 worldedit 下载地址： https://www.mcbbs.net/thread-68815-1-1.html 我现在的版本是1.12，应该用 worldedit6.1.9,它兼容1.12.2~1.10 安装我的世界WorldEdit创世神插件指令手拿木斧，左键一角，右键一角，两角之间的长方体为选择区域： &#x2F;&#x2F;set id - 将选中的区域变为某物品(如果是不可放置或者没有放置点的物品会成为被扔出的状态) &#x2F;&#x2F;undo - 还原上一次的WorldEdit行动 &#x2F;&#x2F;redo - 还原上一次的&#x2F;&#x2F;undo(这个说明可能有误) &#x2F;&#x2F;move x - 将区域移动x块。移动时需正对着你要移动的区域，他就会帮你移动到你正对的地方 &#x2F;&#x2F;move x up - 将区域向上移动x块 &#x2F;&#x2F;move x down - 将区域向下移动x块 &#x2F;criticalhit [enable|disable]","categories":[{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/categories/minecraft/"}],"tags":[{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/tags/minecraft/"}]},{"title":"frp内网穿透+nginx tcp反向代理实现发布我的世界服务器","slug":"2019-11/02-frp内网穿透-nginx-tcp反向代理实现发布我的世界服务器","date":"2019-11-02T08:26:52.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-frp内网穿透-nginx-tcp反向代理实现发布我的世界服务器/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-frp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F-nginx-tcp%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%8F%91%E5%B8%83%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"搞了一下午我的世界服务器放在windows主机里，通过centos服务器里的 nginx + frp 实现对外网的发布，很有成就感。 准备首先，centos 服务器是一台虚拟机，位于windows主机内，之所以要这么做，就是喜欢linux稳定，开着虚拟机，乱搞不影响主机。 原理window 上运行一台我的世界服务器端，位于本机虚拟机网卡 192.168.216.1:25565 之上。 centos 使用 frp 的 tcp 连接，连接到外网上，其配置如下，意味着，外网如果有从 32326 端口来的tcp流量，就会被代理到本机的 25565 端口上。","text":"搞了一下午我的世界服务器放在windows主机里，通过centos服务器里的 nginx + frp 实现对外网的发布，很有成就感。 准备首先，centos 服务器是一台虚拟机，位于windows主机内，之所以要这么做，就是喜欢linux稳定，开着虚拟机，乱搞不影响主机。 原理window 上运行一台我的世界服务器端，位于本机虚拟机网卡 192.168.216.1:25565 之上。 centos 使用 frp 的 tcp 连接，连接到外网上，其配置如下，意味着，外网如果有从 32326 端口来的tcp流量，就会被代理到本机的 25565 端口上。 12345[mine]type = tcplocal_ip = 127.0.0.1local_port = 25565remote_port = 32326 然后是 centos 的 nginx 设置了，它将本机 25565 端口上的 tcp 流量，全部反向代理到虚拟机网卡的 192.168.216.1:25565 上。这样一条网络链路，实现了外网直接访问到我的世界服务器。 nginx 的配置,stream直接放到events后面。 123456stream &#123; server &#123; listen 25565; proxy_pass 192.168.216.1:25565; &#125;&#125; 我的世界版本是 1.12，服务器的连接是 frp.wo25.net:32326 优化frp全称是快速反向代理，不需要nginx来做反向代理的，它自带支持反向代理。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"},{"name":"frp","slug":"frp","permalink":"https://anarckk.github.io/myvolantis/tags/frp/"},{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/tags/minecraft/"}]},{"title":"安装我的世界服务器","slug":"2019-11/02-安装我的世界服务器","date":"2019-11-02T04:04:42.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-安装我的世界服务器/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-%E5%AE%89%E8%A3%85%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E6%9C%8D%E5%8A%A1%E5%99%A8/","excerpt":"","text":"准备准备了 craftbukkit.jar，如果要从原始来源找，我发现来了这个网址 https://bukkit.gamepedia.com/FAQ#Where_can_I_get_it.3F 但是，也真是够坏的， To comply with DMCA law no direct download link to the server is available. However, you can build it yourself using the Build Tools provided by SpigotMC 为了遵守DMCA法律，没有直接下载链接到服务器。 但是，您可以使用SpigotMC提供的构建工具自己构建它 然后就找了自己构建它的介绍，https://www.spigotmc.org/threads/buildtools-updates-information.42865/ 有兴趣就自己去构建服务器的jar包吧。或者直接网上找。 找到了个直接下载的网站https://getbukkit.org/get/CiNKyh4l9MuPHLpovnGSDU2oHT9gCpUc 运行123456789@echo off:MAINclsjava -Xms1024M - Xmx1024M -jar craftbukkit-1.7.10-R0.1-20140713.051447-4.jarif exist &quot;plugins\\RestartEvolution\\restart.msc&quot; goto MAINif not exist &quot;plugins\\RestartEvolution\\restart.msc&quot; goto END:ENDechopause&gt;nul 核心就是一行 java -jar craftbukkit-1.7.10-R0.1-20140713.051447-4.jar JVM的堆的内存， 是通过下面面两个参数控制的 ， -Xms 最小堆的大小， 也就是当你的虚拟机启动后， 就会分配这么大的堆内存给你 ， -Xmx 是最大堆的大小 cls是控制台清屏 pause 就是暂停命令，执行时会在命令行窗口显示“请按任意键继续. . .”并等待你按键。 pause &gt; nul的作用是同样的，区别是不显示“请按任意键继续. . .”这些字，nul相当于空文件，把这些文字隐去了。同样是等待你按键。 关于服务器端和客户端的版本服务器端的版本和客户端的版本必须一一对应，连小版本号都要对的上才行。 1.12的服务，用1.12.2的客户端就连不上，提示服务器版本太低，，真无语，连兼容都做不到。 建议的版本1.12 服务器权限管理在minecraft论坛找到一个帖子，讲服务器权限插件 [管理|安全][PCD]LuckPerms —— 高效快速的权限插件[1.7.X-1.12.X] 载下来看看。","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/tags/minecraft/"}]},{"title":"sublime 里的 markdown 插件","slug":"2019-11/02-sublime-里的-markdown-插件","date":"2019-11-02T02:43:18.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-sublime-里的-markdown-插件/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-sublime-%E9%87%8C%E7%9A%84-markdown-%E6%8F%92%E4%BB%B6/","excerpt":"","text":"安装插件的方式1.组合键Ctrl+Shift+P 调出命令面板 2.输入Package Control: Install Package，回车 3.在搜索框中输入要安装的包名（一个一个，不能同时安多个） 4.静待几秒即可安装成功 插件介绍介绍几个Markdown类的常用插件： 插件 功能 MarkdownEditing 一个提高Sublime中Markdown编辑特性的插件 MarkdownPreview Markdown转HTML，提供在浏览器中的预览功能 MarkdownLivePreview 提供在编辑框中实时预览的功能 LiveReload 一个提供md&#x2F;html等文档的实时刷新预览的的插件 参考https://blog.csdn.net/qq_20011607/article/details/81370236 安装好之后修改配置在首选项（Preferences) – package settings 里，修改所安装插件的配置","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://anarckk.github.io/myvolantis/tags/markdown/"},{"name":"sublime","slug":"sublime","permalink":"https://anarckk.github.io/myvolantis/tags/sublime/"}]},{"title":"sublime设置简体中文","slug":"2019-11/02-sublime设置简体中文","date":"2019-11-02T02:37:37.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-sublime设置简体中文/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-sublime%E8%AE%BE%E7%BD%AE%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87/","excerpt":"","text":"一、package control想设置简体中文，要使用sublime设计的一套插件，package control 刚安装的话，先到Tools里找到Install Package Control 然后它会弹出弹窗，Package Control was successfully installed 安装中文插件到 Preferences – Package Control 在弹窗输入 install package, 默认选择第一个， Package Control: Install Package 在之后的弹窗输入 chinese，选择 ChineseLocaloztions（默认第一个），点击安装 等待安装完成，出现中文Message就安装完成了。 切换中文会自动切，也可以在Help里的Language里切 关闭自动更新&quot;update_check&quot;: false","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"sublime","slug":"sublime","permalink":"https://anarckk.github.io/myvolantis/tags/sublime/"}]},{"title":"给hexo博客加密","slug":"2019-11/02-给hexo博客加密","date":"2019-11-02T01:33:21.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-给hexo博客加密/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%AF%86/","excerpt":"","text":"安装 npm install --save hexo-blog-encrypt 把下面这段加入到 tag 下面123password: 密码abstract: Welcome to my blog, enter password to read.message: Welcome to my blog, enter password to read. 文档快速使用 将 “password” 字段添加到您文章信息头就像这样. 1234567---title: Hello Worlddate: 2016-03-30 21:18:02password: mikemessi--- 再使用 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在本地预览加密的文章. 设置优先级文章信息头 &gt; 按标签加密 高级设置文章信息头12345678910111213---title: Hello Worldtags:- 作为日记加密date: 2016-03-30 21:12:21password: mikemessiabstract: 有东西被加密了, 请输入密码查看.message: 您好, 这里需要密码.wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.--- _config.yml示例123456789101112# Securityencrypt: # hexo-blog-encrypt abstract: 有东西被加密了, 请输入密码查看. message: 您好, 这里需要密码. tags: - &#123;name: tagName, password: 密码A&#125; - &#123;name: tagName, password: 密码B&#125; template: &lt;div id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot; data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div class=&quot;hbe-input-container&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;hbePass&quot; placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot; /&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt; wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试. wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容. 配置优先级文章信息头 &gt; _config.yml (站点根目录下的) &gt; 默认配置 对 TOC 进行加密如果你有一篇文章使用了 TOC，你需要修改模板的部分代码。这里用 landscape 作为例子： 你可以在 hexo&#x2F;themes&#x2F;landscape&#x2F;layout&#x2F;_partial&#x2F;article.ejs 找到 article.ejs。 然后找到 &lt;% post.content %&gt; 这段代码，通常在30行左右。 使用如下的代码来替代它: 1234567891011&lt;% if(post.toc == true)&#123; %&gt; &lt;div id=&quot;toc-div&quot; class=&quot;toc-article&quot; &lt;% if (post.encrypt == true) &#123; %&gt;style=&quot;display:none&quot; &lt;% &#125; %&gt;&gt; &lt;strong class=&quot;toc-title&quot;&gt;Index&lt;/strong&gt; &lt;% if (post.encrypt == true) &#123; %&gt; &lt;%- toc(post.origin, &#123;list_number: true&#125;) %&gt; &lt;% &#125; else &#123; %&gt; &lt;%- toc(post.content, &#123;list_number: true&#125;) %&gt; &lt;% &#125; %&gt; &lt;/div&gt;&lt;% &#125; %&gt;&lt;%- post.content %&gt;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"英文名","slug":"2019-11/02-英文名","date":"2019-11-02T01:12:31.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/02/2019-11/02-英文名/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/02/2019-11/02-%E8%8B%B1%E6%96%87%E5%90%8D/","excerpt":"","text":"名人迈克尔·杰克逊（Michael Jackson，1958年8月29日～2009年6月25日） 教父里面的迈克·柯里昂（Michael Corleone） 参考100个好听到爆英文名男","categories":[{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"}],"tags":[{"name":"起名","slug":"起名","permalink":"https://anarckk.github.io/myvolantis/tags/%E8%B5%B7%E5%90%8D/"}]},{"title":"在 centos 部署 frpc 和 nginx","slug":"2019-11/01-在 centos 部署 frpc 和 nginx","date":"2019-11-01T14:18:49.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/01/2019-11/01-在 centos 部署 frpc 和 nginx/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-%E5%9C%A8%20centos%20%E9%83%A8%E7%BD%B2%20frpc%20%E5%92%8C%20nginx/","excerpt":"","text":"frpcfrpc 拷贝到 &#x2F;usr&#x2F;local&#x2F;bin 配置拷贝到 etc里 123456789101112131415161718192021cp frpc.ini /etc/frp/frpc.ini[common]server_addr = server_port = token = user = anarckklogin_fail_exit = falsetls_enable = true#[ssh]#type = tcp#local_ip = 127.0.0.1#local_port = 22#remote_port = 32964[http]type = httplocal_ip = 127.0.0.1local_port = 80subdomain = anarckk 再配置systemctl服务 1234567891011121314vim /usr/lib/systemd/system/frpc.service[Unit]Description=frpcAfter=network.target remote-fs.target nss-lookup.target[Service]TimeoutStartSec=30ExecStart=/usr/local/bin/frp/frpc -c /etc/frp/frpc.iniExecStop=/bin/kill $MAINPIDPrivateTmp=true[Install]WantedBy=multi-user.target systemctl start frpc; &#x2F;&#x2F; 启动 frpc systemctl stop frpc; &#x2F;&#x2F; 关闭 frpc systemctl status frpc; &#x2F;&#x2F; 查看当前 frpc 状态 systemctl enable frpc; &#x2F;&#x2F; 开机启动 systemctl disable frpc; &#x2F;&#x2F; 取消开机启动 参考链接利用 frp 进行内网穿透 nginx可以参考这个博客，LINUX安装NGINX 先装必要的库，gzip需要zlib库，rewrite模块需要pcre库，ssl功能需要openssl库，选usr&#x2F;local为安装目录 1234567891011121314151617181920212223242526272829yum install -y gcc gcc-c++cd /usr/local安装pcrewgetr http://jaist.dl.sourceforge.net/project/pcre/pcre/8.33/pcre-8.33.tar.gztar -zxvf pcre-8.33.tar.gz // 解压cd pcre-8.33./configuremake &amp;&amp; make install安装ssl库cd /usr/localwget http://www.openssl.org/source/openssl-1.0.1j.tar.gztar -zxvf openssl-1.0.1j.tar.gzcd openssl-1.0.1j./configmake &amp;&amp; make install安装zlib库cd /usr/localwget http://zlib.net/zlib-1.2.11.tar.gztar -zxvf zlib-1.2.11.tar.gzcd zlib=1.2.11./configuremake &amp;&amp; make install安装nginxcd nginx-1.6.11 $ ./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module --with-streammake &amp;&amp; make install 若出现以下错误： .&#x2F;configure: error:SSL modules reguire the openssl library 则执行 yum -y install openssl openssl-devel 注意一个报错unknown directive “stream” in &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;nginx.conf:16 我是安装了 nginx 只有，在文件中配置 stram 配置出错的，我的配置是 1234567stream &#123; server &#123; listen 80; proxy_connect_timeout 1s; proxy_pass 192.168.216.1:25565; &#125;&#125; 初步想法是，在安装的时候没有指定 –-with-stream，重装一下试试。 在修复这个错误的时候，参考这篇博客编译nginx平滑添加stream模块 它在第2.3点提醒只要进行 make 操作就可以了，不要进行 make install ，会将原有nginx目录进行覆盖。但是，我不管它了，我直接执行了 make&amp;&amp;make install 问题解决。 nginx 的 systemctl 配置文件vim &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;nginx.service 1234567891011121314[Uint]Description=nginxAfter=network.target remote-fs.target nss-lookup.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStart=/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.confExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true[Install]WantedBy=multi-user.target nginx 多配置一个重启的指令 systemctl restart nginx","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"},{"name":"frp","slug":"frp","permalink":"https://anarckk.github.io/myvolantis/tags/frp/"}]},{"title":"nginx 常用命令及配置","slug":"2019-11/01-nginx 常用命令及配置","date":"2019-11-01T11:22:47.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/01/2019-11/01-nginx 常用命令及配置/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-nginx%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE/","excerpt":"","text":"123456789101112nginx -s stop: fast shutdownnginx -s quit: graceful shutdownnginx -s reload: changing configuration, starting new worker processes with a new configuration, graceful shutdown of old worker process -s reopen: re-opening log files -h 帮助 -p prefix: set prefix path (default: /usr/local/nginx/) -c filename : set configuration file (default: conf/nginx.conf) -g directives : set global directives out of configuration file 普通代理 12345678server &#123; listen 8080; server_name 127.0.0.1; location / &#123; root html/public; index index.html; &#125;&#125; 反向代理 1234567891011121314151617# proxy to my host port:80location / &#123; proxy_pass http://192.168.216.1:80/; proxy_redirect / /;&#125;# proxy to my host port:8080location /devs/ &#123; proxy_pass http://192.168.216.1:8080/; proxy_redirect / /devs;&#125; #proxy to my host port:4200location /devw/ &#123; proxy_pass http://192.168.216.1:4200/; proxy_redirect / /devw/;&#125;","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"}]},{"title":"window 安装 rsync","slug":"2019-11/01-window 安装 rsync","date":"2019-11-01T10:24:08.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/01/2019-11/01-window 安装 rsync/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-window%20%E5%AE%89%E8%A3%85%20rsync/","excerpt":"","text":"Rsync是一款不错的文件免费同步软件，可以镜像保存整个目录树和文件系统，同时保持原来文件的权限、时间、软硬链接。第一次同步时 rsync 会复制全部内容，下次只传输修改过的文件部分。传输数据过程中可以实行压缩及解压缩操作，减少带宽流量。支持scp、ssh及直接socket方式连接,支持匿名传输。支持Linux,Window平台。 官网：http://rsync.samba.org/ Linux版下载：http://rsync.samba.org/download.html Windows版下载：https://www.itefix.no/i2/cwrsync-get 选(Free Edition 免费版) 客户端：cwRsync 4.0.5 Installer 服务端：cwRsyncServer 4.0.5 Installer","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"rsync","slug":"rsync","permalink":"https://anarckk.github.io/myvolantis/tags/rsync/"}]},{"title":"markdown_使用总结","slug":"2019-11/01-markdown_使用总结","date":"2019-11-01T09:35:11.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/01/2019-11/01-markdown_使用总结/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-markdown_%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/","excerpt":"","text":"插入图片1![](/assets/images/TC-outlook-open-file.jpg) 插入视频1234&lt;video src=&quot;../assets/videos/宫崎骏作品合集.mp4&quot; style=&quot;max-width:100%;&quot; controlsList=&quot;nodownload&quot;controls=&quot;controls&quot;&gt;The `&lt;video&gt;` tag is not supported by your browser.&lt;/video&gt; 插入连接1[百度](https://www.baidu.com/ &quot;这是百度的连接&quot;) 百度 字体加粗倾斜删除123** 粗体 *** 斜体 *~~这是删除线~~ 表格123456| 姓名 | 年龄 | 爱好 || :------ |:--------:| -----:|| 胡亮亮 | 53 | 王者荣耀 || 周合合 | 21 | 学习 || 曾向向 | 33 | 英雄联盟 || 姚尖尖 | 36 | 刀塔 | 姓名 年龄 爱好 胡亮亮 53 王者荣耀 周合合 21 学习 曾向向 33 英雄联盟 姚尖尖 36 刀塔 Markdown表格宽度调整Markdown 表格默认宽度是根据内容来的，如果某一列内容很长的话会将其他列的宽度占用导致显示样式很丑。我们可以在表格前增加 CSS 样式来限制列的宽度： 等同于 :nth-of-type(1) 1&lt;style&gt; table th:first-of-type &#123; width: 100px; &#125; &lt;/style&gt; 下载文件12&lt;a href=&quot;&quot;&gt;附件1&lt;/a&gt;&lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;附件1&lt;/a&gt; 首行缩进用 html 的写法 1&amp;nbsp; 或者直接空2个就好 无序列表1234- 第一条内容- 第二条内容- 第三条内容- 第四条内容 第一条内容 第二条内容 第三条内容 第四条内容 有序列表12341. 第一条内容2. 第二条内容3. 第三条内容4. 第四条内容 第一条内容 第二条内容 第三条内容 第四条内容 参考Markdown使用指南(常用语法,干货)","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://anarckk.github.io/myvolantis/tags/markdown/"}]},{"title":"计算机单词","slug":"2019-11/01-计算机单词","date":"2019-11-01T08:28:15.000Z","updated":"2023-06-20T07:43:47.253Z","comments":true,"path":"2019/11/01/2019-11/01-计算机单词/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8D%95%E8%AF%8D/","excerpt":"fingerprint verification：指纹核对 man-in-the-middle attack: 中间人攻击 verbose: 冗长的 permanently: 永久的 fatal: 致命的，一般用大写 FATAL 加报错信息","text":"fingerprint verification：指纹核对 man-in-the-middle attack: 中间人攻击 verbose: 冗长的 permanently: 永久的 fatal: 致命的，一般用大写 FATAL 加报错信息 FATAL Something’s wrong. legacy: 遗产 Reverse Proxy： 反向代理 destination: 目的地 Batch: n.一批;(食物、药物等)一批生产的量;批 v.分批处理 subtract: 减去 divisor: 除数 divide： 分，表示除的意思 multiply: 乘 Analytical： 分析的 RELATED 有关的 ESTABLISHED established 已建立 INVALID 无效的 Determines: 决定 character: 性格 criteria：标准 administrative management: 行政管理 authorization 授权 Comment out 注释掉 Unsatisfied 不匹配的，不适合的 agile 敏捷","categories":[{"name":"英语","slug":"英语","permalink":"https://anarckk.github.io/myvolantis/categories/%E8%8B%B1%E8%AF%AD/"}],"tags":[]},{"title":"将 hexo 编译并部署到服务器之中","slug":"2019-11/01-将 hexo 编译并部署到服务器之中","date":"2019-11-01T05:04:53.000Z","updated":"2023-06-20T07:47:58.573Z","comments":true,"path":"2019/11/01/2019-11/01-将 hexo 编译并部署到服务器之中/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-%E5%B0%86%20hexo%20%E7%BC%96%E8%AF%91%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E4%B8%AD/","excerpt":"","text":"ssh的两种登陆方式介绍(1) 口令验证登录 (2) 密钥验证登录 准备在centos中准备一个文件夹给工程使用,准备采用密钥验证登录。因为 hexo 只支持 ssh 登录的方式。 1/usr/local/my-blog 现在的主要困难是 CentOS7 新建用户与SSH登陆设置，给虚拟弄个账号，然后主机可以用 ssh 连接过去。 在主机新建用户新建和删除用户 12345adduser hexous //添加一个新用户，名字叫 hexouspasswd hexous //设置用户密码gpasswd -a hexous wheel //给予sudo权限, 当权限不够时，可以用sudolid -g hexous //查询所有带sudo权限的用户userdel -r hexous //删除用户和相应的目录 更进一步，这下面的我没有尝试过，但感觉很有意思。参考CentOS7 新建用户与SSH登陆设置 123PermitRootLogin no //阻止root用户登陆 AllowUsers sirius //允许制定用户使用SSH登陆PasswordAuthentication no //阻止用户密码SSH登陆 !!! 如果设置no，证书还没配置对，你就登陆不上了 在客户机新建公私钥123456ssh-keygen -t rsa -C &quot;anarckk@gmail.com&quot;-t = The type of the key to generate 密钥的类型 -C = comment to identify the key 用于识别这个密钥的注释 然后，在 c:\\Users\\zzanar.ssh\\ 路径下可以看到新建的 id_rsa 和 id_rsa.pub 再然后，像这样修改 ~.ssh 目录下的 .config 文件 123456789101112131415161718# vm-centos7-hexousHost 192.168.216.129 HostName 192.168.216.129 User hexous IdentityFile C:/Users/zzanar/.ssh/id_rsa# githubHost github.com HostName github.com User git IdentityFile C:/Users/zzanar/.ssh/id_github# 好像 gitee 可以只用一个 key 就可以管理所有的库了。挺方便的Host gitee.com HostName gitee.com PreferredAuthentications publickey User git IdentityFile C:/Users/zzanar/.ssh/id_gitee 这样，在客户机上就完成了新建公私钥。 将客户机加入到主机的许可之中在 &#x2F;home&#x2F;hexous&#x2F;.ssh&#x2F; 之中新建文件 authorized_keys，里面的内容是客户机的 id_rsa.pub 的内容，一台客户机一行。 测试可以用命令行测试一下 1ssh hexous@192.168.216.129 我在这一步遇到命令行抛出一个问题，跟说我 123The authenticity of host &#x27;192.168.216.129 (192.168.216.129)&#x27; can&#x27;t be established.ECDSA key fingerprint is SHA256:wU5gh5jxhjSB/uL23VzZQOMXQjZSO9fJ/WnyGkFB+W0.Are you sure you want to continue connecting (yes/no)? 直接选择 yes 就好，然后就把信息加入到 know_hosts 文件中，下次就不会再问了。 没办法通过rsync进行部署了做到这一步，发现，windows上没办法运行 rsync ，找了个windows版本的rsync装上，还是发现部署的时候程序找的是 &#x2F;home&#x2F;zzanar&#x2F;.ssh 这个路径的地址，不知道怎么改，感觉 hexo 的部署就是设计与 linux 环境下的。 所以，研究了下，只能另找办法，例如在 &#x2F;usr&#x2F;local&#x2F;my-blog 下建一个 git 库，可以在 windows 里直接克隆出来。地址如下面这么写。 1git clone hexous@192.168.216.129:/usr/local/my-blog 但是，无法提交啊 最后我决定了，只有一招了，使用xftp手动拷贝public里的文件到centos里。等以后找到更好的方法再说了。 安装 hexo-deployer-rsyncnpm install hexo-deployer-rsync –save 修改配置 12345678910111213141516171819deploy: type: rsync host: &lt;host&gt; user: &lt;user&gt; root: &lt;root&gt; port: [port] delete: [true|false] verbose: [true|false] ignore_errors: [true|false]参数 描述 默认值host 远程主机的地址 user 使用者名称 root 远程主机的根目录 port 端口 22delete 删除远程主机上的旧文件 trueverbose 显示调试信息 trueignore_errors 忽略错误 false 使用 ftp 提交文件部署到服务器 修改自2019-11-9 19:58:30 1234567891011# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: ftpsync host: 192.168.216.129 user: leo pass: xxxx remote: /my-blog/ port: 21 connections: 1 verbose: true 在服务器上安装 ftp ，然后就这么配就好，配置 ftp 的在最近一篇博客里 还是不行使用 ftp 部署可以，但是不能用 hexo 内置的发布器。真是垃圾。 idea 编译部署功能最后只能用这个了 Intellij IDEA同步代码至远程FTP服务器 参考来源Linux密钥登录原理和ssh使用密钥实现免密码登陆 阿里云Centos7+Nginx+Window部署Hexo静态博客","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"}]},{"title":"TC 自定义快捷方式，使用 uedit 打开选中的文件","slug":"2019-11/01-TC 自定义快捷方式，使用 uedit 打开选中的文件","date":"2019-11-01T03:11:26.000Z","updated":"2023-06-19T08:37:14.691Z","comments":true,"path":"2019/11/01/2019-11/01-TC 自定义快捷方式，使用 uedit 打开选中的文件/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-TC%20%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%BD%BF%E7%94%A8%20uedit%20%E6%89%93%E5%BC%80%E9%80%89%E4%B8%AD%E7%9A%84%E6%96%87%E4%BB%B6/","excerpt":"","text":"来源：https://zhidao.baidu.com/question/208489792.html 参数选中的好像是%P%S, 取当前光标所有文件是%P%M, 如图所示，但选中多个文件 要看这个自定义按钮对应的命令是否支持， 我这个例子是不支持（用outlook &#x2F;a 参数 打开新邮件，以当前文件为附件，当用s时，不支持， 因为outlook &#x2F;a 本身只附加一个附件）","categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"TotalCommander","slug":"TotalCommander","permalink":"https://anarckk.github.io/myvolantis/tags/TotalCommander/"}]},{"title":"first-page","slug":"2019-11/01-first-page","date":"2019-11-01T01:39:17.000Z","updated":"2023-06-20T07:38:18.530Z","comments":true,"path":"2019/11/01/2019-11/01-first-page/","link":"","permalink":"https://anarckk.github.io/myvolantis/2019/11/01/2019-11/01-first-page/","excerpt":"","text":"写这博客干什么 人的记忆有限，写博客希望将自己现在记住的东西留下来。例如我的世界的基本命令，和游戏经验技巧。几年不玩之后，可以快速的找回原来游戏的经验过程。其他技术同理也是一样。 还有算法，自己总结算法，写在博客上，对自己来说，是一种输出，而输出是最好的学习。 例如费曼技巧，想检验自己是否学会一种东西，最简单的方法就是，把这种知识教授给没有这种知识的人，如果他学会了，就证明你也学会了。 关于这片文章 第一篇文章，主要还是测试用 自己做的一张文字壁纸 宫崎骏作品剪辑The &lt;video&gt; tag is not supported by your browser.","categories":[{"name":"随笔","slug":"随笔","permalink":"https://anarckk.github.io/myvolantis/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]}],"categories":[{"name":"上层技术","slug":"上层技术","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%8A%E5%B1%82%E6%8A%80%E6%9C%AF/"},{"name":"底层原理","slug":"底层原理","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"},{"name":"底层硬核","slug":"底层硬核","permalink":"https://anarckk.github.io/myvolantis/categories/%E5%BA%95%E5%B1%82%E7%A1%AC%E6%A0%B8/"},{"name":"中层算法","slug":"中层算法","permalink":"https://anarckk.github.io/myvolantis/categories/%E4%B8%AD%E5%B1%82%E7%AE%97%E6%B3%95/"},{"name":"收藏","slug":"收藏","permalink":"https://anarckk.github.io/myvolantis/categories/%E6%94%B6%E8%97%8F/"},{"name":"英语","slug":"英语","permalink":"https://anarckk.github.io/myvolantis/categories/%E8%8B%B1%E8%AF%AD/"},{"name":"personal","slug":"personal","permalink":"https://anarckk.github.io/myvolantis/categories/personal/"},{"name":"随笔","slug":"随笔","permalink":"https://anarckk.github.io/myvolantis/categories/%E9%9A%8F%E7%AC%94/"},{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/categories/minecraft/"}],"tags":[{"name":"excel","slug":"excel","permalink":"https://anarckk.github.io/myvolantis/tags/excel/"},{"name":"JAVA","slug":"JAVA","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA/"},{"name":"shiro","slug":"shiro","permalink":"https://anarckk.github.io/myvolantis/tags/shiro/"},{"name":"uml","slug":"uml","permalink":"https://anarckk.github.io/myvolantis/tags/uml/"},{"name":"java api","slug":"java-api","permalink":"https://anarckk.github.io/myvolantis/tags/java-api/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://anarckk.github.io/myvolantis/tags/SpringBoot/"},{"name":"mybatis","slug":"mybatis","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis/"},{"name":"mysql","slug":"mysql","permalink":"https://anarckk.github.io/myvolantis/tags/mysql/"},{"name":"idea","slug":"idea","permalink":"https://anarckk.github.io/myvolantis/tags/idea/"},{"name":"idea激活","slug":"idea激活","permalink":"https://anarckk.github.io/myvolantis/tags/idea%E6%BF%80%E6%B4%BB/"},{"name":"visio","slug":"visio","permalink":"https://anarckk.github.io/myvolantis/tags/visio/"},{"name":"restful","slug":"restful","permalink":"https://anarckk.github.io/myvolantis/tags/restful/"},{"name":"springframework","slug":"springframework","permalink":"https://anarckk.github.io/myvolantis/tags/springframework/"},{"name":"命令语法","slug":"命令语法","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%91%BD%E4%BB%A4%E8%AF%AD%E6%B3%95/"},{"name":"docker","slug":"docker","permalink":"https://anarckk.github.io/myvolantis/tags/docker/"},{"name":"docker命令","slug":"docker命令","permalink":"https://anarckk.github.io/myvolantis/tags/docker%E5%91%BD%E4%BB%A4/"},{"name":"问题解决","slug":"问题解决","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"},{"name":"windows bat脚本","slug":"windows-bat脚本","permalink":"https://anarckk.github.io/myvolantis/tags/windows-bat%E8%84%9A%E6%9C%AC/"},{"name":"CTW","slug":"CTW","permalink":"https://anarckk.github.io/myvolantis/tags/CTW/"},{"name":"JAVA后端","slug":"JAVA后端","permalink":"https://anarckk.github.io/myvolantis/tags/JAVA%E5%90%8E%E7%AB%AF/"},{"name":"用java发起http","slug":"用java发起http","permalink":"https://anarckk.github.io/myvolantis/tags/%E7%94%A8java%E5%8F%91%E8%B5%B7http/"},{"name":"dubbo","slug":"dubbo","permalink":"https://anarckk.github.io/myvolantis/tags/dubbo/"},{"name":"二进制","slug":"二进制","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"shell","slug":"shell","permalink":"https://anarckk.github.io/myvolantis/tags/shell/"},{"name":"vbs","slug":"vbs","permalink":"https://anarckk.github.io/myvolantis/tags/vbs/"},{"name":"paxos","slug":"paxos","permalink":"https://anarckk.github.io/myvolantis/tags/paxos/"},{"name":"centos7","slug":"centos7","permalink":"https://anarckk.github.io/myvolantis/tags/centos7/"},{"name":"frpc","slug":"frpc","permalink":"https://anarckk.github.io/myvolantis/tags/frpc/"},{"name":"maven","slug":"maven","permalink":"https://anarckk.github.io/myvolantis/tags/maven/"},{"name":"maven插件","slug":"maven插件","permalink":"https://anarckk.github.io/myvolantis/tags/maven%E6%8F%92%E4%BB%B6/"},{"name":"ftp","slug":"ftp","permalink":"https://anarckk.github.io/myvolantis/tags/ftp/"},{"name":"sql注入","slug":"sql注入","permalink":"https://anarckk.github.io/myvolantis/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"windows内核编程","slug":"windows内核编程","permalink":"https://anarckk.github.io/myvolantis/tags/windows%E5%86%85%E6%A0%B8%E7%BC%96%E7%A8%8B/"},{"name":"windows server 2008R2","slug":"windows-server-2008R2","permalink":"https://anarckk.github.io/myvolantis/tags/windows-server-2008R2/"},{"name":"服务器运维","slug":"服务器运维","permalink":"https://anarckk.github.io/myvolantis/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"},{"name":"iis","slug":"iis","permalink":"https://anarckk.github.io/myvolantis/tags/iis/"},{"name":"c语言","slug":"c语言","permalink":"https://anarckk.github.io/myvolantis/tags/c%E8%AF%AD%E8%A8%80/"},{"name":"window记事本","slug":"window记事本","permalink":"https://anarckk.github.io/myvolantis/tags/window%E8%AE%B0%E4%BA%8B%E6%9C%AC/"},{"name":"mybatis-plus","slug":"mybatis-plus","permalink":"https://anarckk.github.io/myvolantis/tags/mybatis-plus/"},{"name":"pagehelper","slug":"pagehelper","permalink":"https://anarckk.github.io/myvolantis/tags/pagehelper/"},{"name":"swagger2","slug":"swagger2","permalink":"https://anarckk.github.io/myvolantis/tags/swagger2/"},{"name":"工具","slug":"工具","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%B7%A5%E5%85%B7/"},{"name":"个人提升","slug":"个人提升","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%B8%AA%E4%BA%BA%E6%8F%90%E5%8D%87/"},{"name":"代码片段","slug":"代码片段","permalink":"https://anarckk.github.io/myvolantis/tags/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"},{"name":"sftp","slug":"sftp","permalink":"https://anarckk.github.io/myvolantis/tags/sftp/"},{"name":"nginx","slug":"nginx","permalink":"https://anarckk.github.io/myvolantis/tags/nginx/"},{"name":"编码问题","slug":"编码问题","permalink":"https://anarckk.github.io/myvolantis/tags/%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"},{"name":"linux","slug":"linux","permalink":"https://anarckk.github.io/myvolantis/tags/linux/"},{"name":"markdown","slug":"markdown","permalink":"https://anarckk.github.io/myvolantis/tags/markdown/"},{"name":"阿里云","slug":"阿里云","permalink":"https://anarckk.github.io/myvolantis/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://anarckk.github.io/myvolantis/tags/SpringMVC/"},{"name":"hexo","slug":"hexo","permalink":"https://anarckk.github.io/myvolantis/tags/hexo/"},{"name":"半角全角","slug":"半角全角","permalink":"https://anarckk.github.io/myvolantis/tags/%E5%8D%8A%E8%A7%92%E5%85%A8%E8%A7%92/"},{"name":"slf4j","slug":"slf4j","permalink":"https://anarckk.github.io/myvolantis/tags/slf4j/"},{"name":"chrome","slug":"chrome","permalink":"https://anarckk.github.io/myvolantis/tags/chrome/"},{"name":"iptables","slug":"iptables","permalink":"https://anarckk.github.io/myvolantis/tags/iptables/"},{"name":"yum","slug":"yum","permalink":"https://anarckk.github.io/myvolantis/tags/yum/"},{"name":"HTTP","slug":"HTTP","permalink":"https://anarckk.github.io/myvolantis/tags/HTTP/"},{"name":"nvm","slug":"nvm","permalink":"https://anarckk.github.io/myvolantis/tags/nvm/"},{"name":"nodepad++","slug":"nodepad","permalink":"https://anarckk.github.io/myvolantis/tags/nodepad/"},{"name":"java8Map","slug":"java8Map","permalink":"https://anarckk.github.io/myvolantis/tags/java8Map/"},{"name":"html","slug":"html","permalink":"https://anarckk.github.io/myvolantis/tags/html/"},{"name":"minecraft","slug":"minecraft","permalink":"https://anarckk.github.io/myvolantis/tags/minecraft/"},{"name":"frp","slug":"frp","permalink":"https://anarckk.github.io/myvolantis/tags/frp/"},{"name":"sublime","slug":"sublime","permalink":"https://anarckk.github.io/myvolantis/tags/sublime/"},{"name":"起名","slug":"起名","permalink":"https://anarckk.github.io/myvolantis/tags/%E8%B5%B7%E5%90%8D/"},{"name":"rsync","slug":"rsync","permalink":"https://anarckk.github.io/myvolantis/tags/rsync/"},{"name":"TotalCommander","slug":"TotalCommander","permalink":"https://anarckk.github.io/myvolantis/tags/TotalCommander/"}]}